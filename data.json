{"ld": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj5Vbml0IDQKICAgICAgICA8YnI+SGlzdG9yeSBhbmQgQ3VsdHVyZTwvY2VudGVyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPldheXMgd2l0aCB3b3JkczwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BLiBNYXRjaCB0aGUgd29yZHMgd2l0aCB0aGVpciBtZWFuaW5ncy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5CcmV2aXR5PC9iPiAmIzEwMTQwOyBsYXN0aW5nIG9ubHkgZm9yIGEgc2hvcnQgdGltZQogICAgPGJyPgogICAgPGJyPgogICAgPGI+Q29ucXVlc3Q8L2I+ICYjMTAxNDA7IHZpY3Rvcnkgb3ZlciBhIHBsYWNlIG9yIHBlb3BsZSBieSB1c2Ugb2YgbWlsaXRhcnkgZm9yY2UKICAgIDxicj4KICAgIDxicj4KICAgIDxiPlJlc2VtYmxhbmNlPC9iPiAmIzEwMTQwOyB0aGUgc3RhdGUgb2YgYmVpbmcgYWxpa2UKICAgIDxicj4KICAgIDxicj4KICAgIDxiPkJhcmJhcmlhbjwvYj4gJiMxMDE0MDsgYSBtZW1iZXIgb2YgYW4gdW5jaXZpbGl6ZWQgZ3JvdXAgb2YgcGVvcGxlIG9mIGN1bHR1cmUKICAgIDxicj4KICAgIDxicj4KICAgIDxiPkFsbHk8L2I+ICYjMTAxNDA7IG9uZSBzdGF0ZSB1bml0ZWQgdG8gYW5vdGhlciBieSBhIHRyZWF0eSBvciBhIGxlYWd1ZSBmb3IgYSBtaWxpdGFyeSBwdXJwb3NlCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5Ob2JpbGl0eTwvYj4gJiMxMDE0MDsgc3RhdGUgb2YgYmVpbmcgbm9ibGUgaW4gY2hhcmFjdGVyLCBxdWFsaXR5LCBvciByYW5rCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5SdXRobGVzc25lc3M8L2I+ICYjMTAxNDA7IGNoYXJhY3RlciBvZiBoYXZpbmcgbm8gcGl0eSBvciBjb21wYXNzaW9uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5EZWNpbWF0aW9uPC9iPiAmIzEwMTQwOyB0aGUga2lsbGluZyBvciBkZXN0cnVjdGlvbiBvZiBhIGxhcmdlIG51bWJlciBvZiBhIHBvcHVsYXRpb24KICAgIDxicj4KICAgIDxicj4KICAgIDxiPkhhcnNoPC9iPiAmIzEwMTQwOyBjcnVlbAogICAgPGJyPgogICAgPGJyPgogICAgPGI+RWxpeGlyPC9iPiAmIzEwMTQwOyBsaXF1aWQgdGhhdCBpcyBiZWxpZXZlZCB0byBjdXJlIGFsbCBpbGxzCiAgICA8YnI+PGJyPjxicj48YnI+CiAgICA8c3Bhbj5CLiBGaW5kIHRoZSBmb2xsb3dpbmcgd29yZHMgaW4gdGhlIHRleHQgYW5kIHVzZSB0aGVtIGluIHNlbnRlbmNlcyBvZiB5b3VyIG93bi48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5JbnZhc2lvbjwvYj4KICAgIDxicj4KICAgIFRoZSBwZW9wbGUgbGl2ZSB1bmRlciBhIGNvbnN0YW50IHRocmVhdCBvZiBpbnZhc2lvbi4KICAgIDxicj48YnI+CiAgICA8Yj5EaXNyZWdhcmQ8L2I+CiAgICA8YnI+CiAgICBUaGUgcHJlc2VudCBhcnRpY2xlIHdpbGwgZGlzcmVnYXJkIHRoaXMgZGlzdGluY3Rpb24uCiAgICA8YnI+PGJyPgogICAgPGI+UGFyYW1vdW50PC9iPgogICAgPGJyPgogICAgSGlzIGhhcHBpbmVzcyB3YXMgb2YgcGFyYW1vdW50IGltcG9ydGFuY2UuCiAgICA8YnI+PGJyPgogICAgPGI+UG9wdWxhY2U8L2I+CiAgICA8YnI+CiAgICBUaGV5IGhhZCB0aGUgcG9wdWxhY2Ugb24gdGhlaXIgc2lkZS4KICAgIDxicj48YnI+CiAgICA8Yj5SZXZvbHQ8L2I+CiAgICA8YnI+CiAgICBUaGUgcGVhc2FudHMnIHJldm9sdCB3YXMgY3J1c2hlZCBieSB0aGUga2luZy4KICAgIDxicj48YnI+CiAgICA8Yj5Bc3Nhc3NpbmF0aW9uPC9iPgogICAgPGJyPgogICAgSGUgd2FzIGluIGNvbnN0YW50IGZlYXIgb2YgYXNzYXNzaW5hdGlvbiBhbmQgZGlzdHJ1c3RlZCBhbGwgYXJvdW5kIGhpbS4KICAgIDxicj48YnI+CiAgICA8Yj5TZXJmZG9tPC9iPgogICAgPGJyPgogICAgSXQgaGFzIHJlZHVjZWQgdXMgcG9saXRpY2FsbHkgdG8gc2VyZmRvbS4KICAgIDxicj48YnI+PGJyPjxicj4KICAgIDxzcGFuPkQuIENvbnN1bHQgYSBkaWN0aW9uYXJ5IGFuZCBwcmVwYXJlIGEgbGlzdCBvZiB0ZW4gaG9tb2dyYXBocy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5CYXNzPC9iPiAtIGEgdHlwZSBvZiBmaXNoL2xvdywgZGVlcCB2b2ljZQogICAgPGJyPgogICAgPGI+QmF0PC9iPiAtIGEgcGllY2Ugb2Ygc3BvcnRzIGVxdWlwbWVudC9hbiBhbmltYWwKICAgIDxicj4KICAgIDxiPkV2ZW5pbmc8L2I+IC0gc21vb3RoaW5nIG91dC9hZnRlciBzdW5zZXQKICAgIDxicj4KICAgIDxiPkJlYXI8L2I+IC0gdG8gZW5kdXJlL2FuaW1hbAogICAgPGJyPgogICAgPGI+Q2xvc2U8L2I+IC0gY29ubmVjdGVkL2xvY2sKICAgIDxicj4KICAgIDxiPkxlYW48L2I+IC0gdGhpbi9yZXN0IGFnYWluc3QKICAgIDxicj4KICAgIDxiPkJvdzwvYj4gLSBiZW5kIGZvcndhcmQvZnJvbnQgb2YgYSBzaGlwCiAgICA8YnI+CiAgICA8Yj5MZWFkPC9iPiAtIG1ldGFsL3N0YXJ0IG9mZiBpbiBmcm9udAogICAgPGJyPgogICAgPGI+U2tpcDwvYj4gLSBqdW1wL21pc3Mgb3V0CiAgICA8YnI+CiAgICA8Yj5GYWlyPC9iPiAtIGFwcGVhcmFuY2UvcmVhc29uYWJsZQogICAgPGJyPjxicj48YnI+PGJyPjxicj4KICAgIDxoMz5Db21wcmVoZW5zaW9uPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkIuIEFuc3dlciB0aGVzZSBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPjxicj4KICAgIDxzcGFuPmEuIFdoeSBpcyB0aGUgWmhvdSBBZ2UgY2FsbGVkIGEgZmV1ZGFsIGFnZT88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBUaGUgWmhvdSBBZ2UgaXMgY2FsbGVkIGEgZmV1ZGFsIGFnZSBiZWNhdXNlIFpob3UgcGVyaW9kIGhhZCBmb2xsb3dlZCB0aGUgcnVsZSBvZiBmZXVkYWxpc20uCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmIuIFdoYXQgaXMgdGhlIGxvY2F0aW9uIGFkdmFudGFnZSBvZiB0aGUgUWluPzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBsb2NhdGlvbiBhZHZhbnRhZ2Ugb2YgUWluIGlzIHRoZSB0ZXJyaXRvcnkgb3IgYXJlYSBvZiBkeW5hc3R5IGlzIHdlbGwgYm91bmRlZCBieSBtb3VudGFpbnMuCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmMuIFdoYXQgY29udHJpYnV0ZWQgdG8gdGhlIHN1Y2Nlc3MgaW4gdGhlIHdhcmZhcmUgYXMgZGVzY3JpYmVkIGluIHRoZSB0ZXh0Pzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBsb2NhdGlvbiBvZiB0aGUgc3RhdGUsIHRoZWlyIHNpemUgb2YgdGhlIGFybXksIGFuZCB0aGVpciBleHBlcnQgdXNlIG9mIHRoZSBjaGFyaW90IGNvbnRyaWJ1dGVkIHRvIHRoZWlyCiAgICBzdWNjZXNzIGluIHdhcmZhcmUuCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmQuIFdoeSBkaWQgdGhlIFFpbiBpbnZpdGUgdGhlIGZvcmVpZ24gYWR2aXNvciwgU2hhbmcgWWFuZz88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBUaGUgUWluIGludml0ZWQgdGhlIGZvcmVpZ24gYWR2aXNvciwgU2hhbmcgWWFuZyBkdWUgdG8gdGhlIGxhY2sgb2YgaW50ZWxsZWN0dWFsIHBlb3BsZXMgaW4gUWluLgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5lLiBXaGF0IHdlcmUgdGhlIGtleSBmZWF0dXJlcyBvZiB0aGUgUWluIHBvbGl0aWNhbCBzeXN0ZW0/PC9zcGFuPgogICAgPGJyPgogICAgJiMxMDE0MDsgVGhlIGtleSBmZWF0dXJlcyBvZiB0aGUgUWluIHBvbGl0aWNhbCBzeXN0ZW0gd2VyZSBmZWFyIGFuZCBjb250cm9sLgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5mLiBIb3cgd2VyZSB0aGUgcGVvcGxlIHRyZWF0ZWQgZHVyaW5nIHRoZSBRaW4gUGVyaW9kPzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBwZW9wbGUgd2VyZSB0cmVhdGVkIGFsbW9zdCBsaWtlIHNsYXZlIGluIHRoYXQgcGVyaW9kLiBQZW9wbGUgd2VyZSBzdXBwb3NlZCB0byBjb250cmlidXRlIGluIGFsbAogICAgcHJvamVjdHMgZm9yIHdlbGZhcmUgb2YgTmF0aW9uIGFuZCB3ZXJlIGRlcHJpdmVkIGZyb20gdGhlIGFwcHJvYWNoIG9mIGVkdWNhdGlvbi4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+Zy4gV2h5IGRpZCBTaGkgSHVhbmdkaSBzdG9wIGVkdWNhdGluZyBvcmRpbmFyeSBwZW9wbGU/PC9zcGFuPgogICAgPGJyPgogICAgJiMxMDE0MDsgU2hpIEh1YW5nZGkgc3RvcHBlZCBlZHVjYXRpbmcgb3JkaW5hcnkgcGVvcGxlIGJlY2F1c2UgaGUgYmVsaWV2ZWQgdGhhdCBpbGxpdGVyYXRlIHBlb3BsZSBjYW4gYmUgY29udHJvbGxlZAogICAgZWFzaWx5LgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5oLiBXaGF0IGRpZCB0aGUgUWluIGFjaGlldmUgYnkgdGhlIGxlZ2FsaXNtIGluIHByYWN0aWNlPzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBRaW4gYWNoaWV2ZWQgc3VwZXJpb3IgYXJteSwgZGlzY2lwbGluZWQgcG9wdWxhY2UsIG9iZWRpZW50IHBlb3BsZXMsIHRoZSBncmVhdCB3YWxsLCBncmVhdCBjYW5hbCBldGMuIGJ5CiAgICB0aGUgaGVscCBvZiBsZWdhbGlzbS4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+aS4gV2h5IGRpZCBTaGkgSHVhbmdkaSBuZXZlciBzbGVlcCBpbiB0aGUgc2FtZSByb29tIGZvciB0d28gY29uc2VjdXRpdmUgbmlnaHRzPzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFNoaSBIdWFuZ2RpIG5ldmVyIHNsZXB0IGluIHRoZSBzYW1lIHJvb20gZm9yIHR3byBjb25zZWN1dGl2ZSBuaWdodHMgYmVjYXVzZSBvZiBjb25zdGFudCBmZWFyIG9mCiAgICBhc3Nhc3NpbmF0aW9uLgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5qLiBXaGF0IGFyZSB0aGUgZXZlcmxhc3RpbmcgbWFya3Mgb2YgdGhlIFFpbiBEeW5hc3R5Pzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBldmVybGFzdGluZyBtYXJrcyBvZiB0aGUgUWluIER5bmFzdHkgYXJlIGFzIGZvbGxvd3M6CiAgICA8YnI+CiAgICAxLiBUaGUgVGVycmFjb3R0YSBBcm15CiAgICA8YnI+CiAgICAyLiBDb25jZXB0IG9mIExlZ2FsaXNtCiAgICA8YnI+CiAgICAzLiBUaGUgR3JlYXQgV2FsbCBvZiBDaGluYQogICAgPGJyPgogICAgNC4gVGhlIEdyYW5kIENhbmFsCiAgICA8YnI+CiAgICA1LiBSb2Fkcy4KICAgIDxicj48YnI+PGJyPjxicj48YnI+CiAgICA8aDM+Q3JpdGljYWwgdGhpbmtpbmc8L2gzPgogICAgPGJyPgogICAgPHNwYW4+CiAgICAgICAgYS4gVGhlIEdyZWF0IFdhbGwgYW5kIHRoZSBUYWogTWFoYWwgYXJlIHRoZSBjcmVhdGlvbiBvZiB0aGUgYXV0b2NyYXRpYyBydWxlcnMuIFByZXNlbnQgeW91ciB2aWV3IGZvciBvcgogICAgICAgIGFnYWluc3QgdGhpcyBzdGF0ZW1lbnQuCiAgICA8L3NwYW4+CiAgICA8YnI+PGJyPgogICAgJiMxMDE0MDsgWWVzLCBJIGJlbGlldmUgdGhhdCB0aGUgR3JlYXQgV2FsbCBvZiBDaGluYSBhbmQgdGhlIFRhaiBNYWhhbCB3ZXJlIGNyZWF0ZWQgYnkgYXV0b2NyYXRpYyBydWxlcnMuIFRoZSBHcmVhdAogICAgV2FsbCBvZiBDaGluYSB3YXMgYnVpbHQgdG8gcHJvdGVjdCB0aGUgbm9ydGhlcm4gZW1waXJlIG9mIENoaW5hIGZyb20gZW5lbXkgYXR0YWNrcy4gVGhlcmUgYXJlIG5pbmV0ZWVuIHdhbGxzLiBUaGUKICAgIGZpcnN0IHdhbGwgd2FzIGJ1aWx0IGluIHRoZSA3dGggY2VudHVyeSBCQy4KICAgIDxicj48YnI+CiAgICBUaGUgR3JlYXQgV2FsbCBvZiBDaGluYSBjYW5ub3QgYmUgYnVpbHQgYnkgaW5kaXZpZHVhbCBlZmZvcnQuIEFzIHB1bmlzaG1lbnQsIHBlb3BsZSB3ZXJlIGZvcmNlZCB0byB1bmRlcnRha2Ugc3VjaAogICAgcHJvamVjdHMgYnkgYXV0b2NyYXRpYyBydWxlcnMuIFRoZSB0ZXh0IG1lbnRpb25zIHRoYXQgcGVvcGxlIHRocm91Z2hvdXQgdGhlIGVtcGlyZSBtdXN0IHNoYXJlIHJlc3BvbnNpYmlsaXR5IHdpdGgKICAgIGVhY2ggb3RoZXIuIElmIGEgcGVyc29uIGRpZCBub3QgYmVoYXZlIGFjY29yZGluZyB0byB0aGUgcnVsZXMsIG90aGVycyBoYWQgdG8gY29udGFjdCB0aGVtLiBJZiB0aGV5IGRpZCBub3QsIHRoZXkKICAgIHdlcmUgZGlzbWVtYmVyZWQgb3IgYmVoZWFkZWQuIFRob3NlIHdobyBtYWRlIHRoZSBncmVhdGVzdCBjb250cmlidXRpb24gdG8gdGhlIHN0YXRlIHdlcmUgaGlnaGx5IHJld2FyZGVkLCB3aGlsZQogICAgdGhvc2Ugd2hvc2UgbGl2ZXMgd2VyZSBkZWVtZWQgaW5jb25zZXF1ZW50aWFsIHdlcmUgdXNlZCBhcyBzbGF2ZXMgaW4gU2hpIEh1YW5nZGkncyBjb25zdHJ1Y3Rpb24gcHJvamVjdHMgc3VjaCBhcyB0aGUKICAgIEdyZWF0IFdhbGwgb2YgQ2hpbmEsIHRoZSBHcmFuZCBDYW5hbCwgYW5kIHRoZSBzdHJlZXRzIHRoYXQgZ3JldyB1cCBpbiB0aGUgc2ltcGxlIHRyYWRlIGFuZCB0cmF2ZWwuCiAgICA8YnI+PGJyPgogICAgTGlrZXdpc2UsIFRhaiBNYWhhbCBpcyB0aGUgcmVzdWx0IG9mIHRoZSBhdXRvY3JhdGljIHJ1bGVyIG9mIHRoZSBNdWdoYWwgRW1wZXJvciBvZiBJbmRpYSwgU2hhaCBKYWhhbi4gSXQgaXMgYmVsaWV2ZWQKICAgIHRoYXQgaGUgYnVpbHQgaXQgdG8gaW1tb3J0YWxpemUgaGlzIHdpZmUgTXVtdGF6LiBTaGFoIEphaGFuIGlzIHNhaWQgdG8gaGF2ZSBjdXQgb2ZmIHRoZSBhcnRpc3RzJyBoYW5kcyB0byBwcmV2ZW50CiAgICB0aGVtIGZyb20gcmVjcmVhdGluZyB0aGUgc2FtZSB0eXBlIG9mIHN0cnVjdHVyZS4gSGlzdG9yaWNhbCBmYWN0cyBzaG93IHRoYXQgdGhlIGtpbmcgd2FzIG1vcmUgaW5jb25zaWRlcmF0ZSB0aGFuCiAgICByb21hbnRpYy4gSXQgdG9vayAyMCwwMDAgd29ya2VycyB0byBidWlsZCB0aGUgVGFqIE1haGFsIG92ZXIgMjAgeWVhcnMuCiAgICA8YnI+PGJyPgogICAgRXZlcnlvbmUgcmVtZW1iZXJzIHRoZSBuYW1lcyBvZiB0aGUgZW1wZXJvcnMgd2hvIGJ1aWx0IHRoZSBzdHJ1Y3R1cmVzLCBidXQgbm8gb25lIGlzIGVhZ2VyIHRvIGV4cGxvcmUgdGhlIHJlYWxpdHkKICAgIGJlaGluZCB0aGUgc3RydWN0dXJlcy4gVGhlcmVmb3JlLCBUaGUgR3JlYXQgV2FsbCBhbmQgdGhlIFRhaiBNYWhhbCBjYW4gYmUgY29uc2lkZXJlZCBhcyB0aGUgY3JlYXRpb24gb2YgdGhlIGF1dG9jcmF0aWMgcnVsZXJzLgogICAgPGJyPjxicj48YnI+PGJyPgogICAgPHNwYW4+Yi4gSG93IGRvIHlvdSBkZXNjcmliZSB0aGUgcHJvcyBhbmQgY29ucyBvZiBmZXVkYWxpc20/PC9zcGFuPgogICAgPGJyPjxicj4KICAgICYjMTAxNDA7IEZldWRhbGlzbSBpcyBkZWZpbmVkIGFzIGEgZG9taW5hbnQgc29jaWFsIHN5c3RlbSB0aGF0IGV4aXN0ZWQgaW4gRXVyb3BlIGR1cmluZyB0aGUgTWlkZGxlIEFnZXMgaW4gd2hpY2gKICAgIHBlb3BsZSB3b3JrZWQgYW5kIGZvdWdodCBmb3Igbm9ibGVzIHdobyBnYXZlIHRoZW0gcHJvdGVjdGlvbiBhbmQgdGhlIHVzZSBvZiBsYW5kIGluIHJldHVybi4KICAgIDxicj48YnI+CiAgICA8Yj5Qcm9zIG9mIGZldWRhbGlzbTwvYj4KICAgIDxicj4KICAgIEZldWRhbGlzbSBoZWxwZWQgcHJvdGVjdCBjb21tdW5pdGllcyBmcm9tIHRoZSB2aW9sZW5jZSBhbmQgd2FyZmFyZSB0aGF0IGJyb2tlIG91dCBhZnRlciB0aGUgZmFsbCBvZiBSb21lCiAgICBhbmQgdGhlIGNvbGxhcHNlIG9mIHN0cm9uZyBjZW50cmFsIGdvdmVybm1lbnQgaW4gV2VzdGVybiBFdXJvcGUuIEZldWRhbGlzbSBzZWN1cmVkIFdlc3Rlcm4gRXVyb3BlJ3MKICAgIHNvY2lldHkgYW5kIGtlcHQgb3V0IHBvd2VyZnVsIGludmFkZXJzLiBUaGUgTG9yZHMgd2VyZSB0aGUgbWFqb3IgcGVyc29ucyB3aG8ga2VlcCBhd2F5IHBlb3BsZSdzIHdvcnJpZXMuCiAgICBGZXVkYWxpc20gaGVscGVkIHBlb3BsZSB0byBkZXZlbG9wIHRoZSBxdWFsaXRpZXMgbGlrZSBsb3lhbHR5LCBicmF2ZXJ5LCBnZW5lcm9zaXR5LCBhbmQgaHVtaWxpdHkuCiAgICA8YnI+PGJyPgogICAgPGI+Q29ucyBvZiBmZXVkYWxpc208L2I+CiAgICA8YnI+CiAgICBUaGUgY29uY2VwdCBvZiBmZXVkYWxpc20gdXNlZCB0byBkaXZpZGUgcG9vciBhbmQgcmljaCBwZW9wbGUgaW50byB0d28gY2xhc3Nlcy4gSXQgY3JlYXRlZCBjbGFzcwogICAgZGl2aXNpb25zIGFtb25nIHBlb3BsZS4gQ29tbW9uIGFuZCB3ZWFrIHBlb3BsZSBoYWQgdG8gYmUgZGVwZW5kZW50IHVwb24gdGhlIExvcmRzLiBFYXN5IGVudmlyb25tZW50IGZvcgogICAgcG93ZXJmdWwgcGVvcGxlIHRvIGltcG9zZSB0aGVpciBwb3dlciBvdmVyIG90aGVycy4gTG9yZHMgY291bGQgZWFzaWx5IGRvIHdoYXRldmVyIHRoZXkgd2FudGVkLiBQZWFzYW50cwogICAgaGFkIHRvIHN1cnZpdmUgdW5kZXIgdGhlIGxvcmRzIGFuZCB0aGV5IHdlcmUgbm90IGFsbG93ZWQgdG8gbGVhdmUgdGhlaXIgbG9yZHMnIGxhbmQuIFRoZXkgd2VyZQogICAgcmVzdHJpY3RlZCBpbiBtb3ZlbWVudCBhbmQgZXZlbiBkYWlseSBhY3Rpdml0aWVzIHdpdGhvdXQgdGhlaXIgbG9yZHMnIHBlcm1pc3Npb24uCgogICAgPGJyPjxicj48YnI+PGJyPjxicj4KCiAgICA8aDM+V3JpdGluZzwvaDM+CgogICAgPHNwYW4+YS4gV3JpdGUgYW4gZW1haWwgdG8geW91ciBmcmllbmQgbGl2aW5nIGFicm9hZCBzdGF0aW5nIHRoZSBjb250cmlidXRpb25zIG9mIFByaXRodmkgTmFyYXlhbiBTaGFoIGluIHRoZQogICAgICAgIHVuaWZpY2F0aW9uIG9mIE5lcGFsLjwvc3Bhbj4KICAgIDxicj48YnI+CiAgICA8Yj5Ubzo8L2I+IGFyaWFuYTIzQGdtYWlsLmNvbQogICAgPGJyPjxicj4KICAgIDxiPkZyb206PC9iPiBhdXN0aW5hZGFtNTZAZ21haWwuY29tCiAgICA8YnI+PGJyPgogICAgPGI+U3ViamVjdDo8L2I+IENvbnRyaWJ1dGlvbnMgb2YgUHJpdGhpdmkgTmFyYXlhbiBTaGFoIGluIHRoZSBVbmlmaWNhdGlvbiBvZiBOZXBhbAogICAgPGJyPjxicj4KICAgIEZvbGxvd2luZyB0aGUgcmVjZW50IGRpc2N1c3Npb25zIG9uIHRoZSBhYm92ZSBzdWJqZWN0LCBoZXJlIGFyZSBtb3JlIGNsYXJpZmljYXRpb25zIG9uIHRoZSBpbW1lYXN1cmFibGUKICAgIGNvbnRyaWJ1dGlvbnMgdGhhdCBQcml0aGl2aSBOYXJheWFuIFNoYWggYnJvdWdodCB0byBlbnN1cmUgdGhhdCBOZXBhbCBpcyB3aGF0IGl0IGlzIHRvZGF5LgogICAgPGJyPjxicj4KICAgIFNoYWggZW5kZWQgdGhlIGRpdmlzaW9ucyBhbmQgaW5maWdodGluZyB0aGF0IGV4aXN0ZWQgYmV0d2VlbiB0aGUgZm91ciBtYWpvciBOZXBhbGVzZSBwcmluY2lwYWxpdGllcyBvZiBHb3JraGEsCiAgICBNYWxsYSwgUGF0YW4sIGFuZCBCaGFkZ2Fvbi4gVGhvdWdoIHRoZSBwcmluY2Ugd2FzIGEgdmVyeSBhbWJpdGlvdXMgbWVtYmVyIG9mIHRoZSBTaGFoIHJ1bGluZyBmYW1pbHkgb2YgR29ya2hhLCBoaXMKICAgIHBlcnNvbmFsIGludm9sdmVtZW50IGJyb3VnaHQgdGhlIHdhcnMgYW1vbmcgTWFsbGEsIFBhdGFuLCBhbmQgQmhhZGdhb24gdG8gYW4gZW5kLgogICAgPGJyPjxicj4KICAgIEhlIGRpZCBub3Qgc3RvcCB0aGVyZS4gSGUgcmVzb2x2ZWQgdGhlaXIgbG9uZy10ZXJtIGRpZmZlcmVuY2VzIGFuZCBjb25zb2xpZGF0ZWQgdGhlbSB0byBiZWNvbWUgbW9kZXJuLWRheSBOZXBhbC4KICAgIFNoYWggYWxzbyB3b3JrZWQgaGFyZCB0byBzdHJlbmd0aGVuIHRoZSB1bml0eSBvZiBOZXBhbC4gVGhpcyB1bml0eSBlbmRlZCB0aGUgbWFueSB5ZWFycyB3aGVuIGZvcmVpZ25lcnMgY291bGQgZWFzaWx5CiAgICBpbnZhZGUgYW55IG9mIHRoZSBzbWFsbCBzdGF0ZXMgdG8gY29ucXVlciB0aGVtLgogICAgPGJyPjxicj4KICAgIE5vIGRvdWJ0LCB5b3Ugd2lsbCBhcHByZWNpYXRlIHRoYXQgdGhpcyB3YXMgbm90IGEgbWVyZSBhY2hpZXZlbWVudC4gV2hpbGUgb3RoZXJzIHdlcmUgZGl2aWRpbmcgbmF0aW9ucywgaGUgdW5pdGVkLgogICAgV2hpbGUgb3RoZXJzIGNvbnF1ZXJlZCBuYXRpb25zIGZvciB0aGVpciBzZWxmaXNoIGludGVyZXN0cywgaGUgc3RyZW5ndGhlbmVkIE5lcGFsIGZvciBuYXRpb25hbCB1bml0eS4KICAgIDxicj48YnI+CiAgICBGcm9tIHRoaXMgYnJpZWYgZW1haWwsIHlvdSB3aWxsIGFwcHJlY2lhdGUgdGhhdCBTaGFoIG1hZGUgbGFzdGluZyBjb250cmlidXRpb25zIHRvIHRoZSBOZXBhbCB3ZSBjYW4gY2FsbCBob21lIHRvZGF5LgogICAgPGJyPjxicj4KICAgIEZyb20geW91ciBmcmllbmQsCiAgICA8YnI+CiAgICBBdXN0aW4KCgoKICAgIDxicj48YnI+PGJyPjxicj48YnI+CgogICAgPGgzPkdyYW1tYXIgKFBhc3QgVGVuc2UpPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkIuIENvbXBsZXRlIHRoZSB0ZXh0cyBiZWxvdyB1c2luZyB0aGUgY29ycmVjdCBwYXN0IGZvcm1zIG9mIHRoZSB2ZXJicyBmcm9tIHRoZSBicmFja2V0Ljwvc3Bhbj4KICAgIDxicj48YnI+CiAgICBhLiBUaGUgTWF5YSBlc3RhYmxpc2hlZCBhIHZlcnkgYWR2YW5jZWQgY2l2aWxpc2F0aW9uIGluIHRoZSBqdW5nbGVzIG9mIHRoZSBZdWNhdGFuLiBIb3dldmVyLCB0aGVpciBjdWx0dXJlCiAgICA8Yj48dT5kaXNhcHBlYXJlZDwvdT48L2I+IChkaXNhcHBlYXIpIGJ5IHRoZSB0aW1lIEV1cm9wZWFucyBmaXJzdAogICAgPGI+PHU+YXJyaXZlZDwvdT48L2I+IChhcnJpdmUpIGluIHRoZSBOZXcgV29ybGQuCgogICAgPGJyPjxicj4KCiAgICBiLiBXaGVuIEkgPGI+PHU+dHVybmVkPC91PjwvYj4gKHR1cm4pIG9uIHRoZSByYWRpbyB5ZXN0ZXJkYXksIEkgPGI+PHU+aGVhcmQ8L3U+PC9iPiAoaGVhcikgYSBzb25nIHRoYXQKICAgIHdhcyBwb3B1bGFyIHdoZW4gSSA8Yj48dT53YXM8L3U+PC9iPiAoYmUpIGF0IHRoZSBiYXNpYyBsZXZlbCBvZiBteSBzdHVkeS4gSXQgPGI+PHU+dG9vazwvdT48L2I+ICh0YWtlKQogICAgbWUgYmFjayB0byBzb21lIG9sZCBtZW1vcmllcy4KCiAgICA8YnI+PGJyPgoKICAgIGMuIEkgd2FzIGxvb2tpbmcgZm9yIGEgam9iLiBJIDxiPjx1PmFwcGxpZWQ8L3U+PC9iPiAoYXBwbHkpIGZvciBhIGpvYiBsYXN0IHdlZWsuIEZvcnR1bmF0ZWx5LAogICAgSSA8Yj48dT5nb3Q8L3U+PC9iPiAoZ2V0KSBpdCBhbmQgbm93IEkgYW0gYSBqb2IgaG9sZGVyLgoKICAgIDxicj48YnI+CiAgICA8YnI+PGJyPgoKICAgIDxzcGFuPkMuIENob29zZSB0aGUgY29ycmVjdCB3b3JkcyBmcm9tIHRoZSBsaXN0IGFuZCBjb21wbGV0ZSB0aGUgc2VudGVuY2VzIHdpdGggdGhlIGNvcnJlY3QgdmVyYiBmb3JtLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj48YnI+CiAgICBhLiBOZXd0b24gPGI+PHU+c2F3PC91PjwvYj4gYW4gYXBwbGUgZmFsbGluZyBmcm9tIHRoZSB0cmVlLgogICAgPGJyPjxicj4KICAgIGIuIFJhbWVzaCBCaWthbCA8Yj48dT53cm90ZTwvdT48L2I+IG1hbnkgcG9wdWxhciBzdG9yaWVzLgogICAgPGJyPjxicj4KICAgIGMuIE15IGphY2tldCBpcyBleHBlbnNpdmUuIEl0IDxiPjx1PmNvc3Q8L3U+PC9iPiBtZSBScyA1MDAwLgogICAgPGJyPjxicj4KICAgIGQuIFNoZSA8Yj48dT5nb3QgdXA8L3U+PC9iPiBlYXJseSBpbiB0aGUgbW9ybmluZyB5ZXN0ZXJkYXkuCiAgICA8YnI+PGJyPgogICAgZS4gV2hlbiBJIHdhcyBzbWFsbCwgbXkgZmF0aGVyIDxiPjx1PnRhdWdodDwvdT48L2I+IG1lIGF0IGhvbWUuCiAgICA8YnI+PGJyPgogICAgZi4gV2h5IGRpZCB5b3UgPGI+PHU+dGhyb3c8L3U+PC9iPiB0aGUgY2FwIGF3YXk/CiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPkQuIFB1dCB0aGUgdmVyYiBpbnRvIHRoZSBjb3JyZWN0IGZvcm0gYW5kIGNvbXBsZXRlIHRoZSBzZW50ZW5jZXMuPC9zcGFuPgogICAgPGJyPgogICAgYS4gSSB3ZW50IHRvIHNlZSB0aGUgZmlsbSwgYnV0IEkgPGI+PHU+ZGlkIG5vdDwvdT48L2I+IGl0LiAobm90L2Vuam95KQogICAgPGJyPjxicj4KICAgIGIuIEkgPGI+PHU+bWV0PC91PjwvYj4gUm9qaW5hIGluIHRvd24gaW4gYSBmZXcgZGF5cyBhZ28uIChtZWV0KQogICAgPGJyPjxicj4KICAgIGMuIEl0IHdhcyB2ZXJ5IHdhcm0sIHNvIEkgPGI+PHU+dG9vayBvZmY8L3U+PC9iPiBteSBjb2F0LiAodGFrZSBvZmYpCiAgICA8YnI+PGJyPgogICAgZC4gVGhvdWdoIHRoZSBiZWQgd2FzIHZlcnkgY29tZm9ydGFibGUsIEkgPGI+PHU+ZGlkIG5vdCBzbGVlcDwvdT48L2I+IHZlcnkgd2VsbC4gKG5vdC9zbGVlcCkKICAgIDxicj48YnI+CiAgICBlLiBJIDxiPjx1PnN0YXJ0ZWQ8L3U+PC9iPiBuZXcgam9iIGxhc3Qgd2Vlay4gKHN0YXJ0KQogICAgPGJyPjxicj4KICAgIGcuIEhlIDxiPjx1PndhczwvdT48L2I+IHRvbyBidXN5IGluIHRoZSBvZmZpY2UgeWVzdGVyZGF5LiAoYmUpCiAgICA8YnI+PGJyPgogICAgaC4gTml0YSA8Yj48dT5pbnZpdGVkPC91PjwvYj4gaGVyIHRvIHRoZSBwYXJ0eSwgYnV0IHNoZSBkaWRuJnJzcXVvO3QgY29tZS4gKGludml0ZSkKICAgIDxicj48YnI+PGJyPgogICAgPGJyPjxicj4KICAgIDxzcGFuPklmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tPC9zcGFuPgogICAgPGJyPjxicj4KICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9ib2R5PgoKPC9odG1sPg==", "5": "", "6": "", "7": "", "8": "", "9": "", "10": "", "11": "", "12": "", "13": "", "14": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+VW5pdCAxNAogICAgICAgIDxicj5OYXBvbGVvbiBCb25hcGFydGUKICAgIDwvY2VudGVyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPldheXMgd2l0aCB3b3JkczwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BLiBDaG9vc2UgdGhlIGNvcnJlY3QgbWVhbmluZyBvZiB0aGUgdW5kZXJsaW5lZCB3b3JkLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIGEuIE1hbnkgPHU+cG9ydHJhaXRzPC91PiBvZiBOYXBvbGVvbiBzaG93IGhpbSB3aXRoIGhpcyByaWdodCBoYW5kIHBsYWNlZCBpbnNpZGUgaGlzIGNvYXQuCiAgICA8YnI+CiAgICA8c3Bhbj5za2V0Y2g8L3NwYW4+CiAgICA8YnI+PGJyPgogICAgYi4gTmFwb2xlb24gd29uIG9uZSB2aWN0b3J5IGFmdGVyIGFub3RoZXIsIDx1PmRlZmVhdGluZzwvdT4gdGhlIEF1c3RyaWFucyBpbiBlaWdodGVlbiBiYXR0bGVzLgogICAgPGJyPgogICAgPHNwYW4+YmVhdGluZzwvc3Bhbj4KICAgIDxicj48YnI+CiAgICBjLiBQb3J0cmFpdCBwYWludGVycyB0aG91Z2h0IHRoaXMgcG9zZSBtYWRlIG1lbiBsb29rIG1vcmUgPHU+ZGlnbmlmaWVkPC91Pi4KICAgIDxicj4KICAgIDxzcGFuPmdvb2QtbG9va2luZzwvc3Bhbj4KICAgIDxicj48YnI+CiAgICBkLiBUaGV5IDx1PmFubm91bmNlZDwvdT4gRnJhbmNlIGEgcmVwdWJsaWMuCiAgICA8YnI+CiAgICA8c3Bhbj5vZmZpY2lhbGx5IGRlY2xhcmVkPC9zcGFuPgogICAgPGJyPjxicj4KICAgIGUuIE5hcG9sZW9uIDx1PmNvbnF1ZXJlZDwvdT4gQXVzdHJpYSBpbiAxODA1LgogICAgPGJyPgogICAgPHNwYW4+dHJpdW1waGVkIG92ZXI8L3NwYW4+CiAgICA8YnI+PGJyPgogICAgZi4gVGhlcmUgd2FzIG5vIHBsYWNlIHRvIGhvdXNlIGhpcyBzb2xkaWVycyBpbiB0aGUgPHU+Yml0dGVyPC91PiBSdXNzaWFuIHdpbnRlci4KICAgIDxicj4KICAgIDxzcGFuPkNvbGQ8L3NwYW4+CiAgICA8YnI+PGJyPgogICAgZy4gTmFwb2xlb24gd2FzIDx1Pmh1bWlsaWF0ZWQ8L3U+IHdoZW4gaGUgd2FzIGRlZmVhdGVkLgogICAgPGJyPgogICAgPHNwYW4+c2hhbWVkPC9zcGFuPgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5CLiBHdWVzcyB0aGUgbWVhbmluZ3MgdG8gdGhlc2Ugd29yZHMgZnJvbSB0aGUgdGV4dCBhbmQgbWFrZSBzZW50ZW5jZXMgb2YgeW91ciBvd24uPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPGI+MS4gdmlvbGVudCA6PC9iPiBjYXVzaW5nIGh1cnQKICAgIDxicj4KICAgIFRoZSBsb3ZlIHRoYXQgaXMgdG9vIHZpb2xlbnQgd2lsbCBub3QgbGFzdCBsb25nLgogICAgPGJyPjxicj4KICAgIDxiPjIuIGV4ZWN1dGUgOjwvYj4ga2lsbCBzb21lYm9keSBhcyBhIGxlZ2FsIHB1bmlzaG1lbnQKICAgIDxicj4KICAgIEhlIHdhcyBjYXB0dXJlZCBhbmQgZXhlY3V0ZWQgZm9yIG11cmRlci4KICAgIDxicj48YnI+CiAgICA8Yj4zLiBhbmNpZW50IDo8L2I+IHZlcnkgb2xkCiAgICA8YnI+CiAgICBUaGUgcHlyYW1pZHMgd2VyZSBidWlsdCBpbiBhbmNpZW50IHRpbWVzLgogICAgPGJyPjxicj4KICAgIDxiPjQuIGFsbGlhbmNlIDo8L2I+IGEgdW5pb24gYmV0d2VlbiBwZW9wbGUsIGdyb3VwcywgY291bnRyaWVzLCBldGMuCiAgICA8YnI+CiAgICBUaGUgdHdvIHBhcnRpZXMgd2VyZSBzdGlsbCB0b28gbXVjaCBhcGFydCB0byBmb3JtIGFuIGFsbGlhbmNlLgogICAgPGJyPjxicj4KICAgIDxiPjUuIGJyaWxsaWFudCA6PC9iPiB2ZXJ5IGludGVsbGlnZW50IG9yIHNraWxsZnVsCiAgICA8YnI+CiAgICBCcmlsbGlhbnQgc3R1ZGVudHMgYXJlIGZhdm91cml0ZSBvZiB0ZWFjaGVycy4KICAgIDxicj48YnI+CiAgICA8Yj42LiBnZW5pdXMgOjwvYj4gdmVyeSBncmVhdCBhbmQgcmFyZSBuYXR1cmFsIGFiaWxpdHkgb3Igc2tpbGwKICAgIDxicj4KICAgIFlvdSBkb24ndCBoYXZlIHRvIGJlIGEgZ2VuaXVzIHRvIHNlZSB0aGF0IHRoaXMgcGxhbiB3aWxsIG5ldmVyIHdvcmsuCiAgICA8YnI+PGJyPgogICAgPGI+Ny4gY29uc3VsIDo8L2I+IGFuIG9mZmljaWFsIGNob3NlbiBieSBhIGdvdmVybm1lbnQgdG8gbGl2ZSBpbiBhIGZvcmVpZ24gY2l0eQogICAgPGJyPgogICAgVGhlIENvbnN1bCBzcG9rZSBzbG93bHkgYW5kIHdpdGggZ3JlYXQgZ3Jhdml0eS4KICAgIDxicj48YnI+CiAgICA8Yj44LiBpbnZhZGluZyA6PC9iPiB0byBlbnRlciBhIHBsYWNlIGluIG9yZGVyIHRvIHRha2UgY29udHJvbCBieSBtaWxpdGFyeSBmb3JjZQogICAgPGJyPgogICAgRHVyaW5nIHRoZSBTZWNvbmQgV29ybGQgV2FyIHRoZSBpc2xhbmQgd2FzIGludmFkZWQgYnkgdGhlIEF4aXMgcG93ZXJzLgogICAgPGJyPjxicj48YnI+PGJyPgoKICAgIDxoMz5Db21wcmVoZW5zaW9uPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkFuc3dlciB0aGVzZSBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2hlcmUgd2FzIE5hcG9sZW9uIGZyb20/PC9zcGFuPgogICAgPGJyPgogICAgTmFwb2xlb24gd2FzIGZyb20gRnJhbmNlLgogICAgPGJyPjxicj4KICAgIDxzcGFuPmIuIFdoeSBkaWQgcG9vciBhbmQgbWlkZGxlLWNsYXNzIHBlb3BsZSBkZWNsYXJlIEZyYW5jZSBhIHJlcHVibGljPzwvc3Bhbj4KICAgIDxicj4KICAgIFBvb3IgYW5kIG1pZGRsZS1jbGFzcyBwZW9wbGUgZGVjbGFyZWQgRnJhbmNlIGEgcmVwdWJsaWMgYmVjYXVzZSB0aGV5IHdlcmUgdGlyZWQgb2YgcGF5aW5nIGhlYXZ5IHRheGVzIGZvciB0aGUKICAgIGx1eHVyaW91cyBsaWZlIG9mIHRoZSBraW5nIGFuZCBoaXMgbm9ibGVzLgogICAgPGJyPjxicj4KICAgIDxzcGFuPmMuIFdoZW4gZGlkIE5hcG9sZW9uIGRlY2xhcmUgaGltc2VsZiBlbXBlcm9yIG9mIEZyYW5jZT88L3NwYW4+CiAgICA8YnI+CiAgICBOYXBvbGVvbiBkZWNsYXJlZCBoaW1zZWxmIGVtcGVyb3Igb2YgRnJhbmNlIGluIDE4MDQuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+ZC4gV2hhdCBkaWQgaGUgZG8gd2hlbiBoZSBydWxlZCBGcmFuY2U/PC9zcGFuPgogICAgPGJyPgogICAgV2hlbiBoZSBydWxlZCBGcmFuY2UsIGhlIHJlc3RvcmVkIGFuZCByZW9yZ2FuaXplZCB0aGUgRnJlbmNoIGdvdmVybm1lbnQgYW5kIHRoZSBCYW5rIG9mIEZyYW5jZSwgYnVpbHQgYmVhdXRpZnVsCiAgICBjaXRpZXMgd2l0aCB3aWRlIHN0cmVldHMsIGZpbmUKICAgIGJyaWRnZXMsIGFuZCBiZWF1dGlmdWwgYnVpbGRpbmdzIGFuZCBtb251bWVudHMsIHN1Y2ggYXMgdGhlIEFyYyBkZSBUcmlvbXBoZS4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5lLiBXaGljaCBjb3VudHJpZXMgZGlkIGhlIHJ1bGUgd2hlbiBoZSB3YXMgdGhlIGVtcGVyb3I/PC9zcGFuPgogICAgPGJyPgogICAgSGUgcnVsZWQgSXRhbHksIFN3aXR6ZXJsYW5kLCBhbmQgR2VybWFueSB3aGVuIGhlIHdhcyB0aGUgZW1wZXJvci4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5mLiBXaGF0IHdhcyB0aGUgbWFpbiBjYXVzZSBvZiBoaXMgZGVzdHJ1Y3Rpb24/PC9zcGFuPgogICAgPGJyPgogICAgSW52YXNpb24gb2YgUnVzc2lhIHdhcyB0aGUgbWFpbiBjYXVzZSBvZiBoaXMgZGVzdHJ1Y3Rpb24uCiAgICA8YnI+PGJyPgogICAgPHNwYW4+Zy4gSG93IGRpZCBoaXMgcnVsZSBhcyBlbXBlcm9yIGVuZCBpbiBFdXJvcGU/PC9zcGFuPgogICAgPGJyPgogICAgSGlzIHJ1bGUgYXMgZW1wZXJvciBlbmRlZCBpbiBFdXJvcGUgYWZ0ZXIgdGhlIEV1cm9wZWFucyBnYXRoZXJlZCB0aGVpciBhcm1pZXMgYWdhaW5zdCBoaW0uCiAgICA8YnI+PGJyPgogICAgPHNwYW4+aC4gSG93IGNvdWxkIE5hcG9sZW9uIGhhdmUgYmVlbiBhbiBldmVuIGdyZWF0ZXIgcnVsZXI/PC9zcGFuPgogICAgPGJyPgogICAgTmFwb2xlb24gY291bGQgaGF2ZSBiZWVuIGFuIGV2ZW4gZ3JlYXRlciBydWxlciBpZiBoZSBoYWQgbm90IGJlZW4gZHJpdmVuIGJ5IGhpcyBsb3ZlIG9mIHBvd2VyLgogICAgPGJyPjxicj48YnI+PGJyPgoKICAgIDxoMz5Dcml0aWNhbCB0aGlua2luZzwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBXaGF0IGNhbiBiZSB0aGUgcXVhbGl0aWVzIG9mIGEgZ3JlYXQgbGVhZGVyPyBDYW4gYSBncmVhdCBsZWFkZXIgcmVtYWluIGluIHBvd2VyIGZvciBsb25nIGluIGEgY291bnRyeT8KICAgICAgICBEaXNjdXNzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIExlYWRlcnNoaXAgcmVmZXJzIHRvIHRoZSBxdWFsaXR5IG9mIGxlYWRpbmcgcGVvcGxlLiBQcm9iYWJseSwgaXQgaXMgb25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBhc3BlY3RzIG9mIGxpZmUuIEFib3ZlCiAgICBhbGwsIExlYWRlcnNoaXAgYnkgYSBnb29kIGxlYWRlciBoYXMgbGVkIHRvIHRoZSBwcm9ncmVzcyBvZiBodW1hbiBjaXZpbGl6YXRpb24uIFdpdGhvdXQgYSBnb29kIGxlYWRlciwgbm8KICAgIG9yZ2FuaXphdGlvbiBvciBncm91cCBjYW4gc3VjY2VlZC4gRnVydGhlcm1vcmUsIG5vdCBldmVyeW9uZSBoYXMgdGhpcyBxdWFsaXR5LiBUaGlzIGlzIGJlY2F1c2UgZWZmZWN0aXZlIExlYWRlcnNoaXAKICAgIHJlcXVpcmVzIGNlcnRhaW4gaW1wb3J0YW50IGNoYXJhY3RlcmlzdGljcy4KICAgIDxicj48YnI+CiAgICBGaXJzdCBvZiBhbGwsIGNvbmZpZGVuY2UgaXMgdGhlIG1vc3QgcXVhbGl0eS4gQSBsZWFkZXIgbXVzdCBoYXZlIHN0cm9uZyBzZWxmLWNvbmZpZGVuY2UuIEEgcGVyc29uIGxhY2tpbmcgaW4KICAgIGNvbmZpZGVuY2UgY2FuIG5ldmVyIGJlIGEgZ29vZCBsZWFkZXIuIEEgcGVyc29uIG11c3QgYmUgY29uZmlkZW50IGVub3VnaCB0byBlbnN1cmUgb3RoZXJzIGZvbGxvdyBoaW0uIEEgZ29vZCBsZWFkZXIKICAgIG11c3QgY2VydGFpbmx5IGluc3BpcmUgb3RoZXJzLiBBIGxlYWRlciBtdXN0IGJlIGEgcm9sZSBtb2RlbCBmb3IgaGlzIGZvbGxvd2Vycy4gRnVydGhlcm1vcmUsIGhlIG11c3QKICAgIG1vdGl2YXRlIHRoZW0gd2hlbmV2ZXIgcG9zc2libGUuIEFsc28sIGluIGRpZmZpY3VsdCBzaXR1YXRpb25zLCBhIGxlYWRlciBtdXN0IG5vdCBsb3NlIGhvcGUuIEhvbmVzdHkgaXMgYW5vdGhlcgogICAgbm90YWJsZSBxdWFsaXR5IG9mIGEgbGVhZGVyLiBIb25lc3R5IGFuZCBJbnRlZ3JpdHkgYXJlIGltcG9ydGFudCB0byBlYXJuIHRoZSBsb3ZlIG9mIGZvbGxvd2Vycy4gUHJvYmFibHksIGV2ZXJ5CiAgICBMZWFkZXJzaGlwIHdoaWNoIGxvc2VzIHRydXN0IGlzCiAgICBib3VuZCB0byBmYWlsLiBQZW9wbGUgd2lsbCBub3Qgd29yayB3aXRoIGZ1bGwgZWZmb3J0IGR1ZSB0byBhbiBpbW1vcmFsIGxlYWRlci4KICAgIEFub3RoZXIgaW1wb3J0YW50IHF1YWxpdHkgaXMgZ29vZCBjb21tdW5pY2F0aW9uIGFuZCBkZWNpc2lvbiBtYWtpbmcuIEFib3ZlIGFsbCwgaWYgYSBsZWFkZXIgbWFrZXMgcG9vcgogICAgY29tbXVuaWNhdGlvbnMgYW5kIHBvb3IgZGVjaXNpb25zIHRoZW4gb3RoZXIgcXVhbGl0aWVzIHdpbGwgbm90IG1hdHRlci4gRnVydGhlcm1vcmUsIGdvb2QgZGVjaXNpb24gbWFraW5nIGVuc3VyZXMKICAgIHRoZSBzdWNjZXNzIG9mIHRoZSBlbnRpcmUgZ3JvdXAuIElmIHRoZSBsZWFkZXIgbWFrZXMgcG9vcgogICAgZGVjaXNpb25zLCB0aGVuIHRoZSBlZmZvcnRzIG9mIGZvbGxvd2VycyB3b27igJl0IG1hdHRlci4KICAgIDxicj48YnI+CiAgICBJbiBjb25jbHVzaW9uLCBhIGdvb2QgbGVhZGVyIG11c3QgYmUgYW4gZXhjZWxsZW50IGlubm92YXRvci4gSGUgbXVzdCBkaXNwbGF5IGEgY3JlYXRpdmUgYXR0aXR1ZGUgaW4gaGlzIHdvcmsuIE1vc3QKICAgIG5vdGV3b3J0aHksCiAgICBpbm5vdmF0aW9uIGlzIGEgZ3VhcmFudGVlIG9mIHN1cnZpdmFsIG9mIGEgZ3JvdXAgb3IgaW5ub3ZhdGlvbi4gV2l0aG91dCBjcmVhdGl2ZSB0aGlua2luZywgcHJvZ3Jlc3MgaXMgbm90IHBvc3NpYmxlLgogICAgPGJyPjxicj4KICAgIElmIGEgbGVhZGVyIGlzIGdvb2QsIGNhcGFibGUgYW5kIGhhdmUgYWxsIHRoZSBhYm92ZSB0cmFpdHMgdGhlbiBoZS9zaGUgY2FuIGVhc2lseSByZW1haW4gaW4gcG93ZXIgZm9yIGxvbmcgaW4gYQogICAgY291bnRyeS4KICAgIDxicj48YnI+PGJyPgoKICAgIDxzcGFuPmIuIFRoZSAxNnRoIHByZXNpZGVudCBvZiB0aGUgVVNBLCBBYnJhaGFtIExpbmNvbG4gc2FpZCBkZW1vY3JhY3kgaXMgZ292ZXJubWVudCBvZiB0aGUgcGVvcGxlIGZvciB0aGUgcGVvcGxlCiAgICAgICAgYW5kIGJ5IHRoZSBwZW9wbGUuIERvIHlvdSB0aGluayBpdCBpcyBwZXJmZWN0bHkgYXBwbGljYWJsZSBpbiB0aGUgcHJlc2VudCBjb250ZXh0IG9mIE5lcGFsPyBFeHBsYWluLjwvc3Bhbj4KICAgIDxicj48YnI+CiAgICBUaGUgbGl0ZXJhbCBtZWFuaW5nIG9mIGBkZW1vY3JhY3knIGlzIGBydWxlIGJ5IHRoZSBwZW9wbGUnLCBvciwgaW4gb3RoZXIgd29yZHMsIGEgcG9saXRpY2FsIHN5c3RlbSBpbiB3aGljaCB1bHRpbWF0ZQogICAgYXV0aG9yaXR5IGlzIHNoYXJlZCBlcXVhbGx5IGJ5IGFsbCBtZW1iZXJzIG9mIHRoZSBjb21tdW5pdHkuIEluIE5lcGFsIGFzIGVsc2V3aGVyZSBzdWNoIGEgc3lzdGVtIGlzIHdpZGVseSBlbmRvcnNlZAogICAgYXMgYSBkZXNpcmFibGUgc3RhdGUgb2YgYWZmYWlycyBidXQgdGhlcmUgaXMgbm8gcHJlY2lzZSwgc2hhcmVkIHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCBpdCBpbXBsaWVzIGluIHByYWN0aWNlLiBJbgogICAgTmVwYWwsIGV2ZW4gbW9yZSB0aGFuIGluIG1vc3Qgb3RoZXIgcGxhY2VzLCB0aGVyZSBpcyBhbHNvIGEgc2Vuc2Ugb2YgZGVlcCBkaXNpbGx1c2lvbm1lbnQgd2l0aCB3aGF0IGEgc3lzdGVtCiAgICBkZXNjcmliaW5nIGl0c2VsZiBhcyBkZW1vY3JhdGljIGhhcyBhY3R1YWxseSBhY2hpZXZlZC4KICAgIDxicj48YnI+CiAgICBUaGUgcG9saXRpY2FsIHN5c3RlbSBwcmVzZW50ZWQgYnkKICAgIEFicmFoYW0gTGluY29sbiBkb2VzIG5vdCBhcHBseSB0byBOZXBhbCwgYXMgY29ycnVwdGlvbiBoYWQgcGFyYWx5emVkIGNvbnN0aXR1dGlvbmFsIGFuZCBnb3Zlcm5tZW50IGFnZW5jaWVzLiBUaGUKICAgIENvbnN0aXR1dGlvbiBndWFyYW50ZWVzIHRoZSBpZGVhIG9mIOKAi+KAi2NvbGxlY3RpdmUKICAgIGRlY2lzaW9uLW1ha2luZyB0aGF0IGluY2x1ZGVzIGFsbCBwZW9wbGUgZXF1YWxseSwgYnV0IGl0IGRvZXMgbm90IGFjdHVhbGx5IGFwcGx5LgogICAgRGVtb2NyYXRpYyBub3JtcyBhbmQgdmFsdWVzIOKAi+KAi2RlcGVuZCBvbiB0aGUgcHJvcGVyIGZ1bmN0aW9uaW5nIG9mIGNvbnN0aXR1dGlvbmFsIGFuZCBzdGF0ZSBpbnN0aXR1dGlvbnMuIEJ1dCBpdCBoYXMKICAgIGJlZW4KICAgIGNyaXBwbGVkIGJ5IGEgZ3JvdXAgb2YgY2VydGFpbiBwZW9wbGUuIFRoZSByb2xlIG9mIGJ1cmVhdWNyYXRzIGlzIGltcG9ydGFudCB0byBrZWVwIHRoZSBhZG1pbmlzdHJhdGlvbiBydW5uaW5nCiAgICBzbW9vdGhseSBzbyB0aGF0IGRldmVsb3BtZW50IHN0cmF0ZWdpZXMgY2FuIGJlIGVhc2lseSBpbXBsZW1lbnRlZC4gSG93ZXZlciwgY29ycnVwdCBidXJlYXVjcmFjeSBkb2VzIG5vdCBkbyBpdHMgam9iCiAgICB3aXRob3V0IGJyaWJlcyBhbmQgaXMgZW5kb3JzZWQgYnkgcG9saXRpY2FsIGxlYWRlcnMuIE5lcGFsZXNlIHBlb3BsZSBoYXZlIG5ldmVyIGV4cGVyaWVuY2VkIGEKICAgIHJlc3BvbnNpYmxlLCBhY2NvdW50YWJsZSBnb3Zlcm5tZW50LiBTdGF0ZSBpbnN0aXR1dGlvbnMgYXJlIHZpY3RpbXMgb2YgbmVwb3Rpc20gYW5kIGRpc2NyaW1pbmF0aW9uLgogICAgVGh1cywgaW4gYSBjb3VudHJ5IGxpa2UgTmVwYWwsCiAgICBpbnN0aXR1dGlvbmFsaXppbmcgZGVtb2NyYWN5IGlzIG1vcmUgZGlmZmljdWx0LiBUbyBzdHJlbmd0aGVuIHRoZSBwcmluY2lwbGVzIG9mIGRlbW9jcmFjeSwgYWxsIGNvbnN0aXR1dGlvbmFsCiAgICBhZ2VuY2llcywgZ292ZXJubWVudCBhZ2VuY2llcyBhbmQgY2l0aXplbnMgbXVzdCBiZSByZXNwb25zaWJsZS4KICAgIDxicj48YnI+PGJyPjxicj4KCiAgICA8aDM+V3JpdGluZzwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBXcml0ZSBhbiBlc3NheSBvbiBQb3dlciBhbmQgUG9saXRpY3MgaW4gYWJvdXQgNTAwIHdvcmRzLjwvc3Bhbj4KICAgIDxicj48YnI+CiAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyBmb250LXdlaWdodDogYm9sZDsiPlBvd2VyIGFuZCBQb2xpdGljczwvcD4KICAgIDxicj4KICAgIFBvd2VyIGlzIHVzdWFsbHkgZGVmaW5lZCBhcyB0aGUgYWJpbGl0eSB0byBpbmZsdWVuY2UgcGVvcGxl4oCZcyBiZWhhdmlvciBieSBnZXR0aW5nIHBlb3BsZSB0byBkbyB3aGF0IHRoZSBwZXJzb24KICAgIHdhbnRzLiBQb2xpdGljYWxseSwgaGF2aW5nIHRoZSBhYmlsaXR5IHRvIGluZmx1ZW5jZSBwZW9wbGUgaXMgYSBodWdlIHJlc3BvbnNpYmlsaXR5LiBCZWluZyBhIGxlYWRlciBtZWFucyBoYXZpbmcgdGhlCiAgICBhYmlsaXRpZXMgdG8gbm90IG9ubHkgY29udmluY2UgcGVvcGxlLCBidXQgYWxzbyB0byBpbnNwaXJlIHRoZW0gYW5kIGluZmx1ZW5jZSB0aGVpciBkZWNpc2lvbiBieSBtYWtpbmcgdGhlbSBzZWUgdGhlCiAgICBzZW5zZSB0aGF0IHRoZSBwZXJzb24gd2l0aCBwb3dlciBpcyBhY3RpbmcgaW4gdGhlaXIgYmVzdCBpbnRlcmVzdC4gVGhlcmVmb3JlLCBwb2xpdGljYWwgcG93ZXIgaXMgYWJvdXQgbm90IG9ubHkKICAgIHBlcnN1YXNpb24sIGJ1dCBhbHNvIG1hbmlwdWxhdGlvbi4gUG9saXRpY3MgaXMgdGhlIGFjdCBvZiBwZXJzdWFzaW9uLCBhY3F1aXNpdGlvbiwgYW5kIGV4ZXJjaXNlIG9mIHBvbGl0aWNhbCBwb3dlci4KICAgIDxicj48YnI+CgogICAgUG9saXRpY2FsIHBvd2VyIHNoYXBlcyBhbmQgY29udHJvbCBwZW9wbGXigJlzIGF0dGl0dWRlIHRvd2FyZHMgdGhlIGxlYWRlciBhbmQgdGhlIGdvdmVybmluZyBzeXN0ZW0uIFRoZSBsZWFkZXIgZ3VpZGVzCiAgICB0aGUgYmVoYXZpb3Igb2YgaGlzIGZvbGxvd2VycyBpbiBhIGRpcmVjdGlvbiBoZSBkZXNpcmVzIHRvIGFjaGlldmUgdGhlIGNvbW1vbiBwb2xpdGljYWwgb2JqZWN0aXZlcy4gT2NjdXB5aW5nIGEKICAgIHBvbGl0aWNhbCBwb3NpdGlvbiBtZWFucyBoYXZpbmcgdGhlIHBvd2VyIGFuZCB0aGUgYWJpbGl0eSB0byBlZmZlY3QgdGhlIGRlc2lyZWQgY2hhbmdlIG9mIGJlaGF2aW9yIG9mIG90aGVyIHBlb3BsZQogICAgaW52b2x2ZWQgdGhyb3VnaCBwZXJzdWFzaW9uIG9yIG1hbmlwdWxhdGlvbi4gRm9yIGV4YW1wbGUsIGlmIGFuIGluZGl2aWR1YWwgaGFzIHRoZSBwb2xpdGljYWwgcG93ZXIgb3ZlciB0aGUgb3RoZXIKICAgIHBlcnNvbiwgdGhlIGRlZ3JlZSBpbiB3aGljaCBhIGxlYWRlciBjYW4gbW90aXZhdGUsIGluY2l0ZSwgaW5zcGlyZSwgc3RpbXVsYXRlLCBhbmQgbWFrZXMgb3RoZXIgcGVvcGxlIG1vZGlmeSB0aGVpcgogICAgcG9saXRpY2FsIGJlaGF2aW9yLiBUaGlzIHByb2Nlc3MgaXMgdGVybWVkIGFzIGhhdmluZyB0aGUgcG9saXRpY2FsIHBvd2VyLgogICAgPGJyPjxicj4KCiAgICBJbGxlZ2l0aW1hdGUgcG9saXRpY2FsIHBvd2VyIGltcGxpZXMgZXhlcmNpc2luZyBwb3dlcnMgdGhhdCB2aW9sYXRlIHRoZSBleGlzdGluZyBydWxlczsgdGhlc2UgbWF5IGluY2x1ZGUgc2Fib3RhZ2UsCiAgICBwcm90ZXN0cywgYW5kIHdoaXN0bGUgYmxvd2luZy4gRXh0cmVtZSBpbGxlZ2l0aW1hdGUgZm9ybXMgb2YgcG9saXRpY2FsIHBvd2VyIHBvc2UgYSByaXNrIG9mIGxvc3Mgb2YgbWVtYmVyc2hpcC4KICAgIFNpbmNlIG1vc3QgcG9saXRpY2FsIG9yZ2FuaXphdGlvbiBpcyBtYWRlIHVwIG9mIGluZGl2aWR1YWxzIHdpdGggZGlmZmVyZW50IHZhbHVlcyBhbmQgaW50ZXJlc3QsIHRoaXMgcHJlc2VudHMgdGhlCiAgICBwb3RlbnRpYWwgZm9yIGNvbmZsaWN0IG92ZXIgcmVzb3VyY2VzLiBBIGxlYWRlciBpbiBwb3dlciB1c2VzIGhpcyBwb3NpdGlvbiB0byBhdHRhaW4gZ3JvdXAgZ29hbHMuIEhvd2V2ZXIsIHBvd2VyIGlzCiAgICBhcHBsaWVkIGluIGRpZmZlcmVudCBmb3Jtcy4gQ29lcmNpdmUgcG93ZXIgaXMgYmFzZWQgb24gZmVhci4gQ29lcmNpdmUgcG93ZXIgaW5jbHVkZXMgc2FuY3Rpb25zLCByZXN0cmljdGlvbnMsIGFuZAogICAgY29udHJvbCBieSBmb3JjZS4KICAgIDxicj48YnI+CgogICAgUG93ZXIgcGxheXMgYW4gaW1wb3J0YW50IHJvbGUgaW4gcG9saXRpY3MgYmVjYXVzZSBpdHMgY29uc2VxdWVuY2VzIGNhbiB5aWVsZCBwb3NpdGl2ZSBvciBuZWdhdGl2ZSByZXN1bHRzLiBQb3dlciBpbgogICAgcG9saXRpY3MgaXMgYSB0d28td2F5IHJlbGF0aW9uc2hpcCBkZXBlbmRpbmcgb24gaG93IHBlb3BsZSBpbnRlcmFjdCBiYXNlZCBvbiB0aGUgcmVzb3VyY2VzIG9yIHZhbHVlcyB0aGV5IGhvbGQgb3IKICAgIGFyZSBpbiBjb250cm9sIG9mLiBDb25mbGljdCBhcmlzZXMgZHVlIHRvIHByZXNzdXJlIHRvIGFjaGlldmUgc3BlY2lmaWMgZ29hbHMgdGhhdCBtaWdodCBub3QgYmUgcmVhbGlzdGljLiBUaGF0IGlzCiAgICB3aHkgbGVhZGVycyBtYW5pcHVsYXRlIGhpcyBmb2xsb3dlcnMgdG8gc2VydmUgdGhlaXIgbmVlZHMgYXQgdGhlIGV4cGVuc2Ugb2Ygb3RoZXJzLiBJbiBhIGRlbW9jcmF0aWMgc3lzdGVtLCB1c2Ugb2YKICAgIHBvd2VyIHNob3VsZCBub3QgaW52b2x2ZSBmb3JjZTsgaW5zdGVhZCBvZiBvYnRhaW5pbmcgcG93ZXIgc2hvdWxkIGJlIG1vcmUgb2YgaW5mbHVlbmNlIHRoYXQgaXMga25vd24gYXMgc29mdCBwb3dlci4KICAgIDxicj48YnI+PGJyPgoKICAgIDxzcGFuPmIuIFdyaXRlIGEgY291cGxlIG9mIHBhcmFncmFwaHMgYWJvdXQgYSBuYXRpb25hbCBoZXJvIHdobyBmb3VnaHQgYnJhdmVseSBpbiB0aGUgQW5nbG8tTmVwYWwgV2FyLjwvc3Bhbj4KICAgIDxicj48YnI+CiAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyBmb250LXdlaWdodDogYm9sZDsiPkJhbGJoYWRyYSBLdW53YXIgQ2hoZXRyaTwvcD4KICAgIDxicj4KICAgIEJhbGJoYWRyYSBLdW53YXIgQ2hoZXRyaSAoMzAgSmFudWFyeSAxNzg5IOKAkyAxMyBNYXJjaCAxODIzKSB3YXMgYSBOZXBhbGVzZSBtaWxpdGFyeSBjb21tYW5kZXIgYW5kIGFkbWluaXN0cmF0b3IgaW4gdGhlIEtpbmdkb20gb2YgTmVwYWwuIEhlIGlzIG9uZSBvZiB0aGUgTmF0aW9uYWwgaGVyb2VzIG9mIE5lcGFsLiBIZSB3YXMgaGlnaGx5IHByYWlzZWQgZm9yIGhpcyBtaWxpdGFyeSBza2lsbCBmb3IgdGhlIGRlZmVuY2Ugb2YgdGhlIE5hbGFwYW5pIGZvcnQgaW4gdGhlIEFuZ2xvLU5lcGFsZXNlIFdhciAoMTgxNOKAkzE4MTYpLiBIZSB3YXMgQ2FwdGFpbiBpbiB0aGUgTmVwYWxlc2UgbWlsaXRhcnkgYW5kIHdhcyB0YXNrZWQgYXMgY29tbWFuZGVyIHRvIHByb3RlY3QgdGhlIGZvcnRzIG9mIERlaHJhZHVuLgogICAgPGJyPjxicj4KICAgIEFzIGNvbW1hbmRlciBvZiB0aGUgR29ya2hhbGkgZm9yY2VzIGluIERoZXJhZHVuLCBDYXB0LiBCYWxiaGFkcmEgS3Vud2FyIHdhcyBoYW5kZWQgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIGRlZmVuZGluZyB0aGUgYXJlYS4gVGhlIGV4cGFuZGluZyBOZXBhbGkvR29ya2hhbGkgU3RhdGUgaGFkIHNpbmNlIHRoZSBtaWQtbGF0ZSAxOHRoIGNlbnR1cnkgZXhwYW5kZWQgdGhlIG5hdGlvbidzIGJvcmRlciBvbiBhbGwgc2lkZXMsIHdoaWNoIGV2ZW50dWFsbHkgbGVkIHRvIGNvbmZsaWN0IHdpdGggdGhlIEJyaXRpc2ggRWFzdCBJbmRpYSBDb21wYW55IGFuZCBhIHdhciBmb2xsb3dlZC4gUmVhbGl6aW5nIGhlIGNvdWxkIG5vdCBkZWZlbmQgdGhlIHRvd24gb2YgRGVocmFkdW4sIENhcHQuIEJhbGJoYWRyYSBLdW53YXIgd2l0aGRyZXcgdG8gdGhlIHN0cmF0ZWdpYyBoaWxsIGZvcnQgb2YgS2hhbGFuZ2Egd2l0aCBhbiBhcm15IHN0cmVuZ3RoIG9mIDYwMCBpbmNsdWRpbmcgd29tZW4gYW5kIGNoaWxkcmVuIGFnYWluc3QgdGhlIEJyaXRpc2ggRWFzdCBJbmRpYSBDb21wYW55IEJyaXRpc2ggc3Ryb25naG9sZCBvZiAzMDAw4oCTMzUwMCB0cm9vcHMuIEhlIHR1cm5lZCBkb3duIGFuIGluY2VudGl2ZSBwcm9wb3NhbCBvZiB0aGUgQnJpdGlzaCB3aG8gd291bGQgbWFrZSBoaW0gR292ZXJub3Igb2YgdGhlIFdlc3Rlcm4gR2FyaHdhbCBzaG91bGQgaGUgc3VycmVuZGVyIG9yIGxlYXZlIE5lcGFsLgogICAgPGJyPjxicj48YnI+PGJyPgoKICAgIDxoMz5HcmFtbWFyPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkIuIEZpbGwgaW4gdGhlIGJsYW5rcyB3aXRoIG1heSwgbXVzdCBvciBjYW4mcnNxdW87dC48L3NwYW4+CiAgICA8YnI+PGJyPgogICAgYS4gTWF0dGhldyA8Yj48dT5tdXN0PC91PjwvYj4gYmUgYXQgaG9tZS4gSSBjYW4gc2VlIGhpcyBiaWtlIGluIGZyb250IG9mIGhpcyBob21lLgogICAgPGJyPjxicj4KICAgIGIuIFRoZXkgPGI+PHU+bWF5PC91PjwvYj4gYmUgY29taW5nIHRvbW9ycm93LgogICAgPGJyPjxicj4KICAgIGMuIFNoZSA8Yj48dT5jYW4mcnNxdW87dDwvdT48L2I+IHNwZWFrIEZyZW5jaCB2ZXJ5IHdlbGwuIFNoZSZyc3F1bztzIG9ubHkgbGl2ZWQgaW4gUGFyaXMgZm9yIHR3byB3ZWVrcy4KICAgIDxicj48YnI+CiAgICBkLiBNeSBrZXkgaXMgbm90IGluIG15IHBvY2tldCBvciBvbiBteSBkZXNrIHNvIGl0IDxiPjx1Pm11c3Q8L3U+PC9iPiBiZSBpbiB0aGUgZHJhd2VyLgogICAgPGJyPjxicj4KICAgIGUuIEkgc2F3IGhpbSB5ZXN0ZXJkYXkuIEhlIDxiPjx1PmNhbiZyc3F1bzt0PC91PjwvYj4gYmUgYWJyb2FkLgogICAgPGJyPjxicj4KICAgIGYuIFlvdSBnb3QgdGhlIGpvYj8gVGhhdCZyc3F1bztzIGdyZWF0LiBZb3UgPGI+PHU+bXVzdDwvdT48L2I+IGJlIHZlcnkgZGVsaWdodGVkLgogICAgPGJyPjxicj4KICAgIGcuIEkgPGI+PHU+bWF5PC91PjwvYj4gZmluaXNoIGl0IGJ5IHRvbW9ycm93IGlmIEkgc3RheSBhdCB3b3JrIGFsbCBuaWdodCwgYnV0IEkmcnNxdW87bSBub3Qgc3VyZS4KICAgIDxicj48YnI+CiAgICBoLiBTb21lYm9keSBpcyBrbm9ja2luZyBvbiB0aGUgZG9vci4gSXQgPGI+PHU+bXVzdDwvdT48L2I+IGJlIFNhYmluYSAmbmRhc2g7IHNoZSBwcm9taXNlZCB0byBjb21lIHRvZGF5LgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5DLiBSZXdyaXRlIHRoZSBmb2xsb3dpbmcgc2VudGVuY2VzIHVzaW5nIG1heS9taWdodCwgbXVzdCBvciBjYW4mcnNxdW87dC48L3NwYW4+CiAgICA8YnI+PGJyPgogICAgPHNwYW4+YS4gSSZyc3F1bzttIHN1cmUgaGUmcnNxdW87cyBub3QgZ29pbmcgdG8gdGhlIGNpbmVtYSB0b2RheS48L3NwYW4+CiAgICA8YnI+CiAgICBBbnM6IEhlIGNhbiZyc3F1bzt0IGJlIGdvaW5nIHRvIHRoZSBjaW5lbWEgdG9kYXkuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+Yi4gUGVyaGFwcyBzaGUga25vd3MgdGhlIGFuc3dlci48L3NwYW4+CiAgICA8YnI+CiAgICBBbnM6IFNoZSBtYXkga25vdyB0aGUgYW5zd2VyLgogICAgPGJyPjxicj4KICAgIDxzcGFuPmMuIEkmcnNxdW87bSBzdXJlIGhlIGhhcyBhIGNhci48L3NwYW4+CiAgICA8YnI+CiAgICBBbnM6IEhlIG11c3QgaGF2ZSBhIGNhci4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5kLiBJIGRvdWJ0IGlmIGl0IHJhaW5zIGxhdGVyIG9uLjwvc3Bhbj4KICAgIDxicj4KICAgIEFuczogSXQgbWF5IHJhaW4gbGF0ZXIgb24uCiAgICA8YnI+PGJyPgogICAgPHNwYW4+ZS4gUGVyaGFwcyBzaGUgd2FudHMgdG8gYmUgYWxvbmUuPC9zcGFuPgogICAgPGJyPgogICAgQW5zOiBTaGUgbWF5IHdhbnQgdG8gYmUgYWxvbmUuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+Zi4gSSZyc3F1bzttIHN1cmUgSGFyaW5hIGlzIGluIGhlciBvZmZpY2UuPC9zcGFuPgogICAgPGJyPgogICAgQW5zOiBIYXJpbmEgbXVzdCBiZSBpbiBoZXIgb2ZmaWNlLgogICAgPGJyPjxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPklmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tPC9zcGFuPgogICAgPGJyPgogICAgPGJyPjxicj4KPC9ib2R5PgoKPC9odG1sPg==", "15": "", "16": "", "17": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj5Vbml0IDE3CiAgICAgICAgPGJyPkdsb2JhbGlzYXRpb24gYW5kIERpYXNwb3JhCiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5XYXlzIHdpdGggd29yZHM8L2gzPgogICAgPGJyPgogICAgPHNwYW4+QS4gQ2hvb3NlIHRoZSB3b3JkcyBmb3IgdGhlIGZvbGxvd2luZyBtZWFuaW5ncy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiB0aGUgc2V2ZXJlbHkgZGFtYWdpbmcgb3IgZGVzdHJ1Y3RpdmUgZWZmZWN0cyBvZiBzb21ldGhpbmc8L3NwYW4+CiAgICA8YnI+CiAgICByYXZhZ2UKICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIHNvbWVvbmUgZm9yY2VkIHRvIGxlYXZlIHRoZWlyIGNvdW50cnkgaW4gb3JkZXIgdG8gZXNjYXBlIHdhciwgcGVyc2VjdXRpb24sIG9yIG5hdHVyYWwgZGlzYXN0ZXI8L3NwYW4+CiAgICA8YnI+CiAgICByZWZ1Z2VlCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5jLiB0byBmYWNlIGEgZGlmZmljdWx0IHNpdHVhdGlvbjwvc3Bhbj4KICAgIDxicj4KICAgIGNvbmZyb250CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5kLiB0YWtlIGEgcG9zaXRpb24gb2YgcG93ZXIgb3IgaW1wb3J0YW5jZSBpbGxlZ2FsbHkgb3IgYnkgZm9yY2U8L3NwYW4+CiAgICA8YnI+CiAgICB1c3VycAogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZS4gdGhlIHByb2Nlc3Mgb2YgYmVjb21pbmcgYSBwYXJ0IG9mIGEgZ3JvdXAsIGNvdW50cnksIHNvY2lldHksIGV0Yy48L3NwYW4+CiAgICA8YnI+CiAgICBhc3NpbWlsYXRpb24KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmYuIGFuIGFyZWEgd2l0aGluIGEgbGFyZ2VyIHRlcnJpdG9yeSB3aG9zZSBpbmhhYml0YW50cyBhcmUgY3VsdHVyYWxseSBvciBldGhuaWNhbGx5IGRpc3RpbmN0PC9zcGFuPgogICAgPGJyPgogICAgZW5jbGF2ZQogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Qy4gRmlsbCBpbiB0aGUgZ2FwcyB3aXRoIHRoZSBjb3JyZWN0IHdvcmQgZnJvbSB0aGUgYnJhY2tldHMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgYS4gSSBhc2tlZCBoaW0gaWYgaGUgd2FzIGF0dGVuZGluZyB0aGUgY2VyZW1vbnkgYW5kIGhlIDxiPjx1PnNob29rPC91PjwvYj4gaGlzIGhlYWQgJ25vJy4gPGk+KHNob29rL21vdmVkLwogICAgICAgIG5vZGRlZCk8L2k+CiAgICA8YnI+CiAgICA8YnI+CiAgICBiLiBUaGV5IG1hZGUgYSBob3JyaWJsZSBkZWNpc2lvbiB3aGljaCBjYXVzZWQgPGI+PHU+aXJyZXBhcmFibGU8L3U+PC9iPiBkYW1hZ2UgdG8gb3VyIGNvbXBhbnkuCiAgICA8aT4oaG9wZWxlc3MvaW5mbGV4aWJsZS9pcnJlcGFyYWJsZSk8L2k+CiAgICA8YnI+CiAgICA8YnI+CiAgICBjLiBUaGUgbGVhZGVycyBuZWVkIHRvIGJyZWFrIGRvd24gPGI+PHU+YmFycmllcnM8L3U+PC9iPiBzbyBhcyB0byBjcmVhdGUgZmF2b3JhYmxlIGVudmlyb25tZW50IGluIHRoZSBuYXRpb24uCiAgICA8aT4oYmFycmllcnMvb2JzdGFjbGVzL2hpbmRyYW5jZXMpPC9pPgogICAgPGJyPgogICAgPGJyPgogICAgZC4gWW91IG91Z2h0IHRvIHRhbGsgdG8gdGhlIG1hbmFnZXIgdG8gPGI+PHU+c2V0dGxlPC91PjwvYj4gdGhlIGRpc3B1dGUuIDxpPihzb2x2ZS9zZXR0bGUvY2xlYXIgdXApPC9pPgogICAgPGJyPgogICAgPGJyPgogICAgZS4gUGVyaGFwcyB0aGlzIGlzc3VlIHdpbGwgbm90IGdldCBtdWNoIG1lZGlhIDxiPjx1PmNvdmVyYWdlPC91PjwvYj4uIDxpPihzZWN1cml0eS9leGFtaW5hdGlvbi8gY292ZXJhZ2UpPC9pPgogICAgPGJyPgogICAgPGJyPgogICAgZi4gVGhpcyB3ZWVrIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIEpvYW4gYXMgYW4gaW4tY2hhcmdlLiBFdmVyeXRoaW5nIGlzIHJ1bm5pbmcgPGI+PHU+c21vb3RobHk8L3U+PC9iPi4KICAgIDxpPihzbW9vdGhseS9jYWxtbHkvZWFzaWx5KTwvaT4KICAgIDxicj4KICAgIDxicj4KICAgIGcuIEkgaGF2ZW4ndCByZWFkIHRoZSB0ZXh0IHRob3JvdWdobHksIGJ1dCBnaXZlbiBhIDxiPjx1PnF1aWNrPC91PjwvYj4gZ2xhbmNlLiA8aT4oZmFzdC9xdWljay9yYXBpZCk8L2k+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+Q29tcHJlaGVuc2lvbjwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BbnN3ZXIgdGhlIGZvbGxvd2luZyBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2h5IGRpZCBtaWxsaW9ucyBvZiBQYWxlc3RpbmlhbnMgbGVhdmUgdGhlaXIgY291bnRyeT88L3NwYW4+CiAgICA8YnI+CiAgICBNaWxsaW9ucyBvZiBQYWxlc3RpbmlhbnMgbGVmdCB0aGVpciBjb3VudHJ5IGJlY2F1c2UgdGhlaXIgY291bnRyeSBoYWQgZGVuaWVkIGJhc2ljIGh1bWFuIHJpZ2h0cyB0byBmaW5kIGEKICAgIGJldHRlciBsaWZlIGFuZCBiZXR0ZXIgZWNvbm9taWMgb3Bwb3J0dW5pdGllcy4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIEhvdyBpcyB0aGUgZ2xvYmFsIGN1bHR1cmUgZm9ybWVkPyBJcyBjdWx0dXJhbCBpZGVudGl0eSBwb3NzaWJsZSBldmVuIGluIHRoZSBnbG9iYWwgY3VsdHVyZT8gSnVzdGlmeS48L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgZ2xvYmFsIGN1bHR1cmUgaXMgZm9ybWVkIGJ5IHRoZSB5b3V0aGZ1bCBnZW5lcmF0aW9ucyB3aG8gaGF2ZSBncm93biB1cCBpbiB0aGUgbWlkc3Qgb2YgbWFzc2l2ZSB0ZWNobm9sb2dpY2FsCiAgICBhZHZhbmNlbWVudHMuCiAgICA8YnI+CiAgICBZZXMsIGN1bHR1cmFsIGlkZW50aXR5IGlzIHBvc3NpYmxlIGV2ZW4gaW4gdGhlIGdsb2JhbCBjdWx0dXJlLiBTb2NpYWwgbWVkaWEsIHN0cmVldCBqb3VybmFsaXNtLCBhbmQKICAgIGdsb2JhbCB0cmFuc25hdGlvbmFsIGJ1c2luZXNzZXMgYWxsIHBsYXkgYSByb2xlIGluIGNhdGFseXNpbmcgbmV3IGdsb2JhbCBjdWx0dXJlIGZvcm1hdGlvbiBwcm9jZXNzZXMuIEdsb2JhbGl6YXRpb24KICAgIGZvc3RlcnMgY3VsdHVyYWwgaWRlbnRpdHkgYnkgY3JlYXRpbmcgYSBmZWVsaW5nIG9mIGJlbG9uZ2luZy4gUGVvcGxlIGFyZSBiZWNvbWluZyBpbmNyZWFzaW5nbHkgd29ycmllZCBhYm91dCB0aGUKICAgIHVuaXF1ZW5lc3MgYW5kIHBhcnRpY3VsYXJpdHkgb2YgdGhlaXIgb3duIGN1bHR1cmUgaW4gdGhlIGN1cnJlbnQgYWdlIG9mIGdsb2JhbGlzYXRpb24uIFRodXMsIGV2ZW4gaW4gYSBnbG9iYWwKICAgIHNvY2lldHksIGN1bHR1cmFsIGlkZW50aXR5IGlzIGNvbmNlaXZhYmxlLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Yy4gV2h5IGNhbiBtb3ZpbmcgZnJvbSBvbmUgc2lkZSBvZiB0aGUgd29ybGQgdG8gdGhlIG90aGVyIGJlIGFuIGVjb25vbWljIGNoYWxsZW5nZSBmb3IgbmV3Y29tZXJzPzwvc3Bhbj4KICAgIDxicj4KICAgIE1vdmluZyBmcm9tIG9uZSBzaWRlIG9mIHRoZSB3b3JsZCB0byB0aGUgb3RoZXIgY2FuIGJlIGFuIGVjb25vbWljIGNoYWxsZW5nZSBmb3IgbmV3Y29tZXJzIGJlY2F1c2UgaW50ZWdyYXRpb24KICAgIHByb2Nlc3MgbmVlZHMgdGltZTsgc3RhcnRpbmcgZnJvbSBsZWFybmluZyB0aGUgbGFuZ3VhZ2UsIGludGVncmF0aW5nIGN1bHR1cmFsbHksIGludGVncmF0aW9uIGludG8gdGhlIGxhYm91cgogICAgbWFya2V0LgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gSG93IGNhbiBpbW1pZ3JhbnRzIGZvc3RlciBlY29ub215IGF0IGRpZmZlcmVudCBtYWduaXR1ZGVzIG9mIHNjYWxlIGluIHRoZWlyIG5ldyBob21lcz88L3NwYW4+CiAgICA8YnI+CiAgICBJbW1pZ3JhbnRzIGNhbiBmb3N0ZXIgZWNvbm9teSBhdCBkaWZmZXJlbnQgbWFnbml0dWRlcyBvZiBzY2FsZSBpbiB0aGVpciBuZXcgaG9tZXMgYnkgc3RhcnRpbmcgdGhlaXIgb3duIGNvbXBhbmllcyBvcgogICAgYnVzaW5lc3Nlcy4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmUuIENhbiBpbW1pZ3JhbnRzIGZ1bGx5IGludGVncmF0ZSBpbiB0aGUgbmV3IHNvY2lldGllcz8gR2l2ZSByZWFzb25zLjwvc3Bhbj4KICAgIDxicj4KICAgIE5vLCBpbW1pZ3JhbnRzIGNhbid0IGZ1bGx5IGludGVncmF0ZSBpbiB0aGUgbmV3IHNvY2lldGllcyBiZWNhdXNlIHRoZSBzb2NpZXR5IGRvZXMgbm90IG9wZW4gaXRzIGRvb3JzIGZ1bGx5IHRvIGFsbG93CiAgICB0aGVtIHRvIGludGVncmF0ZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmYuIE1lbnRpb24gYW55IHR3byBiZW5lZml0cyBvZiBpbnRlZ3JhdGluZyBpbnRvIGEgbmV3IHNvY2lldHkgZm9yIHRoZSBpbW1pZ3JhbnRzLjwvc3Bhbj4KICAgIDxicj4KICAgIC0gTWlncmFudHMgd2lsbCBoYXZlIGVxdWFsIGxlYXJuaW5nLCBlbmdhZ2VtZW50LCBhbmQgc2VsZi1lc3RlZW0gcG9zc2liaWxpdGllcy4KICAgIDxicj4KICAgIC0gVGhlIHJlY2VpdmluZyBuYXRpb25zIGNhbiBpbXByb3ZlIHRoZWlyIGVjb25vbWljIHByb3NwZWN0cyBieSBpbnRlZ3JhdGluZyBpbW1pZ3JhbnRzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zy4gV2h5IHNob3VsZCB0aGUgaW1taWdyYW50cyBydW4gaW4gY29uY29yZGFuY2Ugd2l0aCBnbG9iYWwgY3VsdHVyZT88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgaW1taWdyYW50cyBzaG91bGQgcnVuIGluIGNvbmNvcmRhbmNlIHdpdGggZ2xvYmFsIGN1bHR1cmUgYmVjYXVzZSB0aGUgY29zdCBvZiBpc29sYXRpb24gYW5kIG5vbi1jb252ZXJnZW5jZSBpcwogICAgaGlnaGVyIGFuZCBtb3JlIGRhbWFnaW5nIHRoYW4gaW50ZWdyYXRpb24uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+Q3JpdGljYWwgVGhpbmtpbmc8L2gzPgogICAgPGJyPgogICAgPHNwYW4+YS4gRG8geW91IHRoaW5rIHRoYXQgdGhlIGxvY2FsIGlzIGdsb2JhbGl6ZWQgYW5kIHRoZSBnbG9iYWwgaXMgbG9jYWxpemVkPyBDYW4gdGhlcmUgYmUgdGhlIGdsb2JhbCBjdWx0dXJlIGFzCiAgICAgICAgd2VsbD8gR2l2ZSBleGFtcGxlcy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBHbG9iYWxpemF0aW9uIGlzIHRoZSBwcm9jZXNzIG9mIGluY3JlYXNpbmcgbG9jYWwgYnVzaW5lc3NlcyBhcm91bmQgdGhlIHdvcmxkIHdoZXJlYXMgTG9jYWxpemF0aW9uIGlzIHRoZSBhZGFwdGF0aW9uCiAgICBvZiBhIHJlc291cmNlIG9yIHByb2R1Y3QgdG8gZml0IHRoZSBkZW1hbmRzIG9mIG9uZSBzcGVjaWZpYyBjdWx0dXJlIG9yIGxvY2FsZS4gSSB0aGluawogICAgbG9jYWwgaXMgZ2xvYmFsaXplZCBiZWNhdXNlIGxvY2FsIHByb2R1Y3RzLCBtZWRpYSwgY3VsdHVyZSBhcmUgbm93IGFjY2Vzc2libGUgYWxsIG92ZXIgdGhlIHdvcmxkLiBTaW1pbGFybHksIHRoZQogICAgZ2xvYmFsIGlzIGFsc28gbG9jYWxpemVkIGJlY2F1c2UgbG9jYWwgcGVvcGxlIGNhbiBiZW5lZml0IGZyb20gdGhlIGdsb2JhbCBwcm9kdWN0IGFuZCB0aGUgbG9jYWwKICAgIGN1bHR1cmUuIFRoZXJlIGNhbiBiZSBhIGdsb2JhbCBjdWx0dXJlIGFtb25nIGxvY2FsIHBlb3BsZXMgdGhhdCBpcyBhIGJ5LXByb2R1Y3Qgb2YgZ2xvYmFsaXphdGlvbi4gUGVvcGxlIGNhbiBmZWVsCiAgICB3b3JsZCBjdWx0dXJlIGluCiAgICBkaWZmZXJlbnQgZmllbGRzIGxpa2UgZWR1Y2F0aW9uLCBzcG9ydHMsIG11c2ljLCBmb29kLCBmYXNoaW9uLCBsYW5ndWFnZSwgZXRjLiBUaHVzIEkgdGhpbmsgdGhhdCBsb2NhbCBpcyBnbG9iYWxpemVkCiAgICBhbmQgdGhlIGdsb2JhbCBpcyBsb2NhbGl6ZWQuCiAgICA8YnI+CiAgICA8YnI+CiAgICBZZXMgdGhlcmUgY2FuIGJlIHRoZSBnbG9iYWwgY3VsdHVyZSBhcyB3ZWxsLiBTb21lIGV4YW1wbGVzIGFyZSBsaXN0ZWQgYmVsb3c6CiAgICA8YnI+CiAgICAxLiBDcmVhdGluZyBhIG1vcmUgaG9tb2dlbm91cyB3b3JsZC4KICAgIDxicj4KICAgIDIuIEF0dGVtcHQgdG8gcHJvbW90ZSBhIFdlc3Rlcm4gbGlmZXN0eWxlIGFuZCBwb3NzaWJseSBBbWVyaWNhbml6ZSB0aGUgd29ybGQuCiAgICA8YnI+CiAgICAzLiBUcmVuZCB0aGF0IHdpbGwgZXZlbnR1YWxseSBtYWtlIGFsbCBvZiBodW1hbiBleHBlcmllbmNlIGFuZCBjdXN0b21zIHRoZSBzYW1lIHNpbmNlIGFsbCBjdWx0dXJlcyBhcmUgY29taW5nCiAgICB0b2dldGhlciBpbnRvIG9uZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIFdoYXQgaXMgZ2xvYmFsaXphdGlvbj8gRGlzY3VzcyB0aGUgZWZmZWN0cyBvZiBnbG9iYWxpemF0aW9uIG9uIHRyYWRpdGlvbmFsIGN1bHR1cmVzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIEdsb2JhbGl6YXRpb24gY2FuIGJlIGRlZmluZWQgYXMgdGhlIGluY3JlYXNlZCBpbnRlcmNvbm5lY3RlZG5lc3MgYW5kIGludGVyZGVwZW5kZW5jZSBvZiBwZW9wbGVzIGFuZCBjb3VudHJpZXMuIEl0IGlzCiAgICBnZW5lcmFsbHkgdW5kZXJzdG9vZCB0byBpbmNsdWRlIHR3byBpbnRlci1yZWxhdGVkIGVsZW1lbnRzOiB0aGUgb3BlbmluZyBvZiBpbnRlcm5hdGlvbmFsIGJvcmRlcnMgdG8gaW5jcmVhc2luZ2x5CiAgICBmYXN0IGZsb3dzIG9mIGdvb2RzLCBzZXJ2aWNlcywgZmluYW5jZSwgcGVvcGxlIGFuZCBpZGVhczsgYW5kIHRoZSBjaGFuZ2VzIGluIGluc3RpdHV0aW9ucyBhbmQgcG9saWNpZXMgYXQgbmF0aW9uYWwKICAgIGFuZCBpbnRlcm5hdGlvbmFsIGxldmVscyB0aGF0IGZhY2lsaXRhdGUgb3IgcHJvbW90ZSBzdWNoIGZsb3dzLgogICAgPGJyPjxicj4KICAgIEEgbmF0aW9u4oCZcyBjdWx0dXJlIGNoYW5nZXMgd2l0aCBlY29ub21pYyBkZXZlbG9wbWVudC4gT25lIGtleSBmYWN0IGlzIHRoYXQgcGVvcGxlIGxlYXZlIHZpbGxhZ2VzIGFuZCBhZ3JpY3VsdHVyZSBmb3IKICAgIGNpdGllcy4gVGhpcyBpdHNlbGYgY2hhbmdlcyBjdWx0dXJlIC0gYWdyaWN1bHR1cmFsIGZlc3RpdmFscyBkZWNsaW5lLiBJbiBOZXBhbCwgdGhlcmUgdXNlZCB0byBiZSBidWxsb2NrIGNhcnQgLSBidXQKICAgIHRoZW4gdHJhY3RvcnMgY2FtZSBpbi4KICAgIFBlb3BsZSB1c2VkIHRvIHdyaXRlIGxldHRlcnMgLSBhbmQgdGhlbiB0aGUgcGhvbmUgY2FtZS4gV2hlbiB0ZXh0aW5nIHJvc2Ugd2l0aCBzbWFydHBob25lcywgdm9pY2UgY2FsbHMgZGVjbGluZWQsCiAgICBhbmQgbmV3IGN1bHR1cmFsIGV0aXF1ZXR0ZSBjYW1lIHVwLgogICAgV2hlbiBlbGVjdHJpY2l0eSBjYW1lIGluLCBldmVuaW5nIGxpZmUgY2hhbmdlZC4gV2hlbiBhaXItY29uZGl0aW9uaW5nIGNhbWUgaW4sIHBlb3BsZSBzdG9wcGVkIHNpdHRpbmcgb24gdGhlaXIKICAgIHN0b29wcy4gV2hlbiBmYW1pbGllcyBoYWQgb25lIFRWLCB0aGUgZmFtaWx5IChhbmQgbmVpZ2hib3JzKSBzYXQgYXJvdW5kIGl0LiBOb3csIGV2ZXJ5b25lIGhhcyB0aGVpciBvd24gc2NyZWVuLgogICAgPGJyPjxicj4KICAgIFNvLCB0aGUgYW5zd2VyIGlzIHRoYXQgdGVjaG5vbG9neSwgZWNvbm9taWMgZGV2ZWxvcG1lbnQgYW5kIGZvcmVpZ24gY3VsdHVyZXMgZG8gY2hhbmdlIGxvY2FsIGJlaGF2aW9yIC0gYnV0IGNvcmUKICAgIGVsZW1lbnRzIG9mIHRoZSBjdWx0dXJlIG1heSByZW1haW4uIFNvLCB3ZSBjYW5ub3Qgc2F5IHRoYXQgZ2xvYmFsaXphdGlvbiBjaGFuZ2VzIGV2ZXJ5dGhpbmcuIEJ1dCwgc29tZSBjaGFuZ2VzCiAgICBhcmUgaW5ldml0YWJsZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIERpc2N1c3MgdGhlIGltcGFjdHMgb2YgZ2xvYmFsaXphdGlvbiBvbiB0aGUgcHJvY2VzcyBhbmQgcHJvZ3Jlc3Mgb2YgZWR1Y2F0aW9uIGluIE5lcGFsLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIEdsb2JhbGl6YXRpb24gb2YgRWR1Y2F0aW9uIGlzIHRoZSBpbnRlZ3JhdGlvbiBhbmQgYXBwbGljYXRpb24gb2Ygc2ltaWxhciBlZHVjYXRpb24gc3lzdGVtcyBhbmQga25vd2xlZGdlIHRocm91Z2hvdXQKICAgIHRoZSB3b3JsZCBhY3Jvc3MgdGhlIGJvcmRlcnMsIGltcHJvdmluZyB0aGUgcXVhbGl0eSAmIGRlcGxveW1lbnQgb2YgZWR1Y2F0aW9uIHdvcmxkd2lkZS4gVGhlIGltcGFjdHMgb2YKICAgIGdsb2JhbGl6YXRpb24gb24gdGhlIHByb2Nlc3MgYW5kIHByb2dyZXNzIG9mIGVkdWNhdGlvbiBpbiBOZXBhbCBhcmUgYXMgZm9sbG93czoKICAgIDxicj48YnI+CiAgICAxLiBHbG9iYWxpemF0aW9uIGhhcyBpbXByb3ZlZCB0aGUgcXVhbGl0eSBvZiBlZHVjYXRpb24gaW4gTmVwYWwuIER1ZSB0byBnbG9iYWxpemF0aW9uLCBOZXBhbCBnb3QgdGhlIG9wcG9ydHVuaXR5IHRvCiAgICB3aXRuZXNzIHRoZSBiZXN0IGVkdWNhdGlvbiBzeXN0ZW1zIHdvcmxkd2lkZSBhbmQgdGh1cyBjb3VsZCByZXBsaWNhdGUgaXQuCiAgICA8YnI+PGJyPgogICAgMi4gTmV3IG1ldGhvZHMgb2YgbGVhcm5pbmcgc3VjaCBhcyBlLWxlYXJuaW5nLCBibGVuZGVkIGxlYXJuaW5nIHdhcyBxdWlja2x5IGFkb3B0ZWQgYnkgZHVlIHRvIGdsb2JhbGl6YXRpb24uCiAgICA8YnI+PGJyPgogICAgMy4gRHVlIHRvIGdsb2JhbGl6YXRpb24sIGZvcmVpZ24gdW5pdmVyc2l0aWVzIHdlcmUgZXN0YWJsaXNoZWQgaW4gTmVwYWwuIFRoZXNlIHVuaXZlcnNpdGllcyBoZWxwZWQgbWFueSBzdHVkZW50cyBpbgogICAgZ2V0dGluZyBhIGhpZ2gtcXVhbGl0eSBlZHVjYXRpb24uIE1vcmVvdmVyLCBmb3JlaWduIGludmVzdG1lbnRzIGluIHRoZSBlZHVjYXRpb24gc2VjdG9yIGFsc28gaGVscGVkIGluIGltcHJvdmluZyB0aGUKICAgIGZhY2lsaXRpZXMgYW5kIGluZnJhc3RydWN0dXJlLgogICAgPGJyPjxicj4KICAgIDQuIEVkdWNhdGlvbiBzaG91bGQgZGV2ZWxvcCBlbXBhdGh5IGFuZCB1bmRlcnN0YW5kaW5nIGluIHN0dWRlbnRzLiBHbG9iYWxpemF0aW9uIGhhcyBlbmFibGVkIHN0dWRlbnRzIHRvIGRldmVsb3AgYW4KICAgIHVuZGVyc3RhbmRpbmcgb2Ygb3RoZXIgY3VsdHVyZXMsIHdoaWNoIGlzIGxpa2UgYSBwcmFjdGljYWwgZWR1Y2F0aW9uLgogICAgPGJyPjxicj4KICAgIDUuIEdsb2JhbGl6YXRpb24gbWFkZSBtYW55IHBlb3BsZSBhd2FyZSBvZiBodW1hbiByaWdodHMgYW5kIHRoZSBsb29waG9sZXMgaW4gdGhlIGdvdmVybmFuY2UuCiAgICA8YnI+PGJyPgogICAgVGh1cywgR2xvYmFsaXphdGlvbiBoYXMgaGVscGVkIE5lcGFsIGluIGltcHJvdmluZyBpdCdzIGVkdWNhdGlvbiBzeXN0ZW1zIGFuZCBsaXRlcmFjeSByYXRlLiBIb3dldmVyLCBub3QgZXZlcnlvbmUKICAgIGNvdWxkIGJlbmVmaXQgZnJvbSB0aGUgaW1wYWN0IG9mIGdsb2JhbGl6YXRpb24gb24gZWR1Y2F0aW9uLiBFZHVjYXRpb24gaW5lcXVhbGl0aWVzIG11c3QgYmUgYnJpZGdlZCBiZXR3ZWVuCiAgICBSaWNoLXBvb3IgJiB1cmJhbi1ydXJhbCBhcmVhcyBzbyB0aGF0IGV2ZXJ5b25lIGNhbiB1dGlsaXplIHRoZSBvcHBvcnR1bml0aWVzIGNyZWF0ZWQgYnkgZ2xvYmFsaXphdGlvbi4KCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CgogICAgPGgzPldyaXRpbmc8L2gzPgogICAgPGJyPgogICAgPHNwYW4+V3JpdGUgYSBuZXdzIHN0b3J5IHRvIGJlIHB1Ymxpc2hlZCBpbiBhIG5ld3NwYXBlciBhYm91dCBhIGxvY2FsCiAgICAgICAgZmVzdGl2YWwvZmFpciB5b3UgaGF2ZSB3aXRuZXNzZWQuPC9zcGFuPgogICAgPGJyPjxicj4KICAgIDxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtd2VpZ2h0OiBib2xkOyBmb250LXNpemU6IGxhcmdlOyI+RGFzaGFpbiDigJMgVGhlbiBhbmQgTm93PC9wPgogICAgPGJyPgogICAgPGI+S0FUSE1BTkRVLCBPQ1RPQkVSIDI2PC9iPgogICAgPGJyPgogICAgPGJyPgogICAgVGltZSBicmluZ3MgY2hhbmdlLCBhbmQgd2hpbGUgdGhhdCBpcyBtb3N0bHkgZ29vZCBhbmQgcGVyaGFwcyB0aGUgb25seSB3YXkgZm9yd2FyZCwgd2Ugd2lzaCBzb21ldGhpbmcgd291bGQgcmVtYWluCiAgICB0aGUgc2FtZS4KICAgIDxicj48YnI+CiAgICBEYXNoYWluIHNlZW1zIHRvIGV2b2tlIHRoYXQgc2VudGltZW50LgogICAgPGJyPjxicj4KICAgIFRoZXJlIHdhcyBhIHRpbWUgd2hlbiBEYXNoYWluIHdhcyBhIGhpZ2hseSBhbnRpY2lwYXRlZCBmZXN0aXZhbCwgYW5kIHdoaWxlIHRoZSBmdW4gaXMgc3RpbGwgdGhlcmUsIHRoZSB2aWJlIGlzbid0CiAgICB0aGUgc2FtZS4gVGhlIG1lbW9yaWVzIG9mIERhc2hhaW4gd2VyZSBtb3JlIGhlYXJ0IHdhcm1pbmcgdGhhbiBob3cgd2UgY2VsZWJyYXRlIHRoZSBmZXN0aXZhbCB0b2RheS4KICAgIDxicj48YnI+CiAgICBEYXNoYWluIGhvbGlkYXlzIHdlcmUgYWxsIGFib3V0IG1lZXRpbmcgY291c2lucywgcGxheWluZyBnYW1lcyBhbmQgZWF0aW5nIGEgbG90IG9mIG1lYXQuIFdoaWxlIHdlIHN0aWxsIGRvIHRoYXQsIHRoZQogICAgY2hhcm0gYW5kIGV4Y2l0ZW1lbnQgaGF2ZSBsYXJnZWx5IGJlZW4gbG9zdCBiZWNhdXNlIGl0J3Mgbm90IGEgbmV3IHRoaW5nIGZvciB0b2RheSdzIGdlbmVyYXRpb24uCiAgICA8YnI+PGJyPgogICAgVG9kYXkgaXQncyBtb3JlIG9mIHJlc3BvbnNpYmlsaXR5IHRoYW4gZnVuLgogICAgPGJyPjxicj4KICAgIEJlZm9yZSwgZWF0aW5nIHJpY2UgYW5kIG1lYXQgd2FzIGEgdmVyeSBiaWcgdGhpbmcgZm9yIHRoZSBwb29yIGFuZCB1c2VkIHRvIGhhcHBlbiBvbmx5IGR1cmluZyB0aGUgdGltZSBvZiBEYXNoYWluLgogICAgPGJyPjxicj4KICAgIFdlIHVzZWQgdG8gZmx5IGtpdGVzIGFuZCB0cnkgdG8gY3V0IHRoZSB0aHJlYWRzIG9mIHRob3NlIGZyb20gb3VyIG5laWdoYm91cmhvb2QuIFdlIHdvdWxkIHJ1biBhZnRlciB0aGUga2l0ZXMgYXMKICAgIHRoZXkgZ2VudGx5IGZlbGwgb24gdGhlIGdyb3VuZCBUaGUgZmlyc3Qgc2lnbnMgb2YgRGFzaGFpbiB3ZXJlIHRoZSBraXRlcyBhcHBlYXJpbmcgaW4gdGhlIHNreS4gS2l0ZSBmbHlpbmcgYW5kIGFsc28KICAgIHBsYXlpbmcgb24gdGhlIHN3aW5ncyB3ZXJlIHRoZSBtb3N0IGltcG9ydGFudCBhbmQgZnVuIGFjdGl2aXRpZXMgb2YgdGhpcyBmZXN0aXZhbC4KICAgIDxicj48YnI+CiAgICBXaGlsZSB3ZSB3ZXJlIGtpZHMsIHdlIHVzZWQgdG8gc2l0IGluIHRoZSBsYXAgb2YgdGhlIGVsZGVycyBvbiBhIGxhcmdlIHN3aW5nIGFzIHdlIHdlcmUgc2NhcmVkLiBCdXQgbm93IHdlIGNhbgogICAgY2xlYXJseSBzZWUgdGhlIGNoYW5nZS4gSXQgaXMgbm8gbG9uZ2VyIGEgYmlnIGRlYWwgdG8gaGF2ZSBmb29kIG9uIHRoZSB0YWJsZSBhbmQgd2UgcmFyZWx5IHNlZSBraXRlcyBmbHlpbmcgaW4gdGhlCiAgICBza3kgb3IgdGhlIHN3aW5ncyBzd2F5aW5nIGluIHRoZSBmaWVsZHMuCiAgICA8YnI+PGJyPgogICAgV2UgdXNlZCB0byBnZXQgbmV3IGNsb3RoZXMgb25jZSBpbiBhIHllYXIgZHVyaW5nIHRoZSB0aW1lIG9mIERhc2hhaW4sIGJ1dCBub3cgd2UgYnV5IGNsb3RoZXMgZXZlcnkgbW9udGguIFRoZXJlIGlzCiAgICBub3cgbm8gZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBub3JtYWwgZGF5cyBhbmQgRGFzaGFpbi4gQmVmb3JlIERhc2hpbiBjcmVhdGVkIG1lbW9yaWVzLCBidXQgbm93IGl0J3MgbW9yZSBsaWtlCiAgICBjYXB0dXJpbmcgdGhlIG1vbWVudHMuIERhc2hhaW4gaXMgbW9yZSBmb3IgdGhlIHBob3Rvcy4gSXQncyBub3QgYSBiYWQgdGhpbmcsIGJ1dCBvbmx5IGdpdmluZyBwcmlvcml0eSB0byBwaG90b3MgdG8KICAgIHNob3cgb2ZmIGFuZCBub3QgZW5qb3kgdGhlIG1vbWVudCBpcyBub3QgZ29vZCAuCiAgICA8YnI+PGJyPgogICAgQmVmb3JlLCBzbyBtdWNoIHZhbHVlIHdhcyBnaXZlbiB0byBibGVzc2luZ3MgYmVzdG93ZWQgdG8gdXMgYnkgb3VyIGVsZGVycywgYnV0IHRvZGF5IGNoaWxkcmVuIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4KICAgIHRoZSBtb25leSB0aGF0IGlzIGdpdmVuIGFzIGdpZnRzLiBJdCdzIG5vdCB0aGF0IHRvZGF5J3MgZ2VuZXJhdGlvbiBoYXMgY29tcGxldGVseSBmb3Jnb3R0ZW4gdGhlIGltcG9ydGFuY2Ugb2YKICAgIERhc2hhaW4uIEJ1dCBzbG93bHksIGJ1dCBzdXJlbHkgdGhlIGNoYXJtIG9mIHRoZSBiaWdnZXN0IEhpbmR1IGZlc3RpdmFsIGlzIHdhbmluZy4gVGhlIHZpYmVzIGFuZCB0aGF0IGZlZWwgYXJlIGdvaW5nCiAgICBkb3duLgogICAgPGJyPjxicj4KICAgIExhc3RseSwgY2hhbmdlIGNvbWVzIHdpdGggdGltZSwgYW5kIHdlIHNob3VsZCBtb3ZlIGFjY29yZGluZ2x5LCBidXQgd2Ugc2hvdWxkIG5ldmVyIGZvcmdvdCBvdXIgaWRlbnRpdHksIG91cgogICAgdHJhZGl0aW9ucyBhbmQgZmVzdGl2YWxzLCB3aGljaCBjcmVhdGUgZ3JlYXQgbWVtb3JpZXMuCgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgoKICAgIDxoMz5HcmFtbWFyPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkIuIENvbXBsZXRlIGVhY2ggc2VudGVuY2UgdXNpbmcgd2hhdC9ob3cvd2hlcmUvd2hldGhlciArIG9uZSBvZiB0aGVzZSB2ZXJiczo8L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBhLiBEbyB5b3Uga25vdyA8Yj48dT5ob3cgdG8gZ2V0PC91PjwvYj4gdG8gUmFtYSZyc3F1bztzIGhvdXNlPwogICAgPGJyPgogICAgPGJyPgogICAgYi4gSSBkb24mcnNxdW87dCBrbm93IDxiPjx1PndoZXRoZXIgdG8gYXBwbHk8L3U+PC9iPiBmb3IgdGhlIGpvYiBvciBub3QuCiAgICA8YnI+CiAgICA8YnI+CiAgICBjLiBIYXZlIHlvdSBkZWNpZGVkIDxiPjx1PndoZXJlIHRvIGdvPC91PjwvYj4gZm9yIHlvdXIgcGljbmljPwogICAgPGJyPgogICAgPGJyPgogICAgZC4gQ2FuIHlvdSBzaG93IG1lIDxiPjx1PmhvdyB0byB1c2U8L3U+PC9iPiB0aGlzIGNhbWVyYT8KICAgIDxicj4KICAgIDxicj4KICAgIGUuIEFzayBIYXJpLiBIZSZyc3F1bztsbCB0ZWxsIHlvdSA8Yj48dT5ob3cgdG8gcmlkZTwvdT48L2I+IGEgYmljeWNsZS4KICAgIDxicj4KICAgIDxicj4KICAgIGYuIEkgd2FzIHJlYWxseSBhc3RvbmlzaGVkLiBJIGRpZG4mcnNxdW87dCBrbm93IDxiPjx1PmhvdyB0byByaWRlPC91PjwvYj4gb24gdGhlIGhvcnNlLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Qy4gUGFyYXBocmFzZSB0aGUgZm9sbG93aW5nIHNlbnRlbmNlcyB1c2luZyB0aGUgdmVyYiBpbiBicmFja2V0cyBhcyBpbiB0aGUgZXhhbXBsZS48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBNYWhlc2ggZm9yZ2V0cyB0byBjbG9zZSB0aGUgd2luZG93cy4gKHRlbmQpPC9zcGFuPgogICAgPGJyPgogICAgTWFoZXNoIHRlbmRzIHRvIGZvcmdldCBjbG9zaW5nIHRoZSB3aW5kb3dzCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5iLiBZb3VyIGNhciBoYXMgYnJva2VuIGRvd24uIChhcHBlYXIpPC9zcGFuPgogICAgPGJyPgogICAgWW91ciBjYXIgYXBwZWFycyB0byBoYXZlIGJyb2tlbiBkb3duLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Yy4gQXNoaWthIGlzIHdvcnJpZWQgYWJvdXQgaGVyIGV4YW0uIChzZWVtKTwvc3Bhbj4KICAgIDxicj4KICAgIEFzaGlrYSBzZWVtcyB0byBiZSB3b3JyaWVkIGFib3V0IGhlciBleGFtLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gVGhleSBoYXZlIGRldmVsb3BlZCB0aGUgdGhlb3J5LiAoY2xhaW0pPC9zcGFuPgogICAgPGJyPgogICAgVGhleSBjbGFpbSB0byBoYXZlIGRldmVsb3BlZCB0aGUgdGhlb3J5LgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZS4gSGUmcnNxdW87cyBlbmpveWluZyBoaXMgbmV3IGpvYi4gKHByZXRlbmQpPC9zcGFuPgogICAgPGJyPgogICAgSGUgcHJldGVuZHMgdG8gYmUgZW5qb3lpbmcgaGlzIG5ldyBqb2IuCiAgICA8YnI+CgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+SWYgeW91IGhhdmUgYW55IHN1Z2dlc3Rpb25zIG9yIGZlZWRiYWNrcywgcGxlYXNlIHdyaXRlIHRvIHVzIGF0IHBsdXMyaGVscEBnbWFpbC5jb208L3NwYW4+CgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgo8L2JvZHk+Cgo8L2h0bWw+", "18": "", "19": "", "20": ""}, "ss": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "", "7": ""}, "poems": {"1": "", "2": "", "3": "", "4": "", "5": ""}, "essays": {"1": "", "2": "", "3": "", "4": "", "5": ""}, "oap": {"1": "", "2": "", "3": ""}}