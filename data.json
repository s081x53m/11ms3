{"ld": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "", "7": "", "8": "", "9": "", "10": "", "11": "", "12": "", "13": "", "14": "", "15": "", "16": "", "17": "", "18": "", "19": "", "20": ""}, "ss": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "", "7": ""}, "poems": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPkRvYzwvdGl0bGU+CiAgICA8c2NyaXB0PgogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvbnRleHRtZW51IiwgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9LCBmYWxzZSk7CiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY29weSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgLy8gQ2hhbmdlIHRoZSBjb3BpZWQgdGV4dCBpZiB5b3Ugd2FudAogICAgICAgICAgICBldnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCJ0ZXh0L3BsYWluIiwgIkNvcHlpbmcgaXMgbm90IGFsbG93ZWQgb24gdGhpcyB3ZWJwYWdlIik7CiAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgY29weSBhY3Rpb24KICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgPC9zY3JpcHQ+CiAgICA8c3R5bGU+CiAgICAgICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9T3BlbitTYW5zOndnaHRANjAwJmRpc3BsYXk9c3dhcCcpOwogICAgICAgIC8qIE5PIFNFTEVDVCArIEhJR0hMSUdIVCBDT0xPUiAqLwogICAgICAgICogewogICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIH0KICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KICAgICAgICAqOjotbW96LXNlbGVjdGlvbiB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IG5vbmU7CiAgICAgICAgfQogICAgICAgIC8qIHN0eWxpbmcgdGV4dCBjb250ZW50ICovCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTVweDsKICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIzcHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGp1c3RpZnk7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIHdvcmQtc3BhY2luZzogMnB4OwogICAgICAgIH0KICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CiAgICAgICAgaDMgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgIH0KICAgICAgICBzcGFuIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgCjxicj4KICAgIDxjZW50ZXI+IFdobyBhcmUgeW91LCBsaXR0bGUgaT88L2NlbnRlcj4KPGJyPgo8aDM+U3VtbWFyeTwvaDM+Cjxicj4KQ3VtbWluZ3MmcnNxdW87IHBvZW0gJmxkcXVvO3dobyBhcmUgeW91LCBsaXR0bGUgaSZyZHF1bzsgZGVzY3JpYmVzIGEgY2hpbGQgbG9va2luZyBvdXQgYSB3aW5kb3cgYXQgdGhlCmVuZCBvZiB0aGUgZGF5LiBJdCBpcyBhYm91dCBuYXR1cmUgYW5kIHRoZSBlZmZlY3QgaXQgaGFzIG9uIHRoZSBzcGVha2VyLiBUaGUgc3BlYWtlciBvZiB0aGUgcG9lbSBpcyB0aGUKcGVyc29uICZsZHF1bzt2b2ljaW5nJnJkcXVvOyB0aGUgd29yZHMsIHJlY2FsbGluZyBhIGNoaWxkaG9vZCBtb21lbnQgY2xvc2VseSBjb25uZWN0ZWQgd2l0aCBuYXR1cmUuClBlcmhhcHMgdGhlIHNwZWFrZXIgaXMgQ3VtbWluZ3MuIAo8YnI+Cjxicj4KVGhpcyBwb2VtIGlzIHJlbGF0ZWQgdG8gbmF0dXJlIGFuZCBpdHMgZWZmZWN0IG9uIHRoZSBzcGVha2VyLiBUaGlzIHBvZW0gaXMgcXVpdGUgc2hvcnQgd2hpY2ggY29udGFpbnMKb25seSBlaWdodCBsaW5lcy4gVGhlIG1haW4gdGhlbWUgb2YgdGhpcyBwb2VtIGlzIGZyZXNobmVzcyBvZiBiZWF1dGlmdWwgbmF0dXJlIGFuZCBpdHMgcG9zaXRpdmUgZWZmZWN0Cm9uIHRoZSBodW1hbnMuIFRoaXMgcG9lbSBvcGVucyB3aXRoIHRoZSBzcGVha2VyIHN0YW5kaW5nIG5lYXIgYSB3aW5kb3cgYW5kIGxvb2tpbmcgb3V0IG9mIGl0LCBhdCB0aGUgZW5kCm9mIGEgZGF5LiBIZSBnb2VzIHRvIGEgbm9zdGFsZ2ljIG1vb2QsIHJlY2FsbGluZyBoaXMgY2hpbGRob29kLCB3aGVuIGhlIHVzZWQgdG8gd2F0Y2ggYSBzdW5zZXQKdGhvdWdodGZ1bGx5LiBIZSByZW1lbWJlcnMgaG93IGhlIHVzZWQgdG8gZW5qb3kgc3VjaCBhIGJlYXV0eSB3aGVuIGhlIHVzZWQgdG8gYmUgYSBsaXR0bGUgYm95IG9mIGZpdmUgb3IKc2l4IHllYXJzLiBJdCBpcyBhIHdvbmRlciB0aGF0IGhlIHN0aWxsIGhhcyB5b3V0aGZ1bCBwcmVzZW5jZSBpbiBoaW1zZWxmLiBUaGlzIHByZXNlbmNlIGNhbiByZWNvZ25pemUKdGhlIGJlYXV0eSBvZiB0aGUgZXZlbmluZy4gUGVyaGFwcyBpbiBoaXMgaW5uZXIgaGVhcnQgaGUgd2FudHMgdG8gY29tZSBvdXQsIGJ1dCBoaXMgbWF0dXJpdHkgYW5kCmFkdWx0aG9vZCBkb2VzbiZyc3F1bzt0IGFsbG93IGhpbSwgdG8gZG8gc28uCjxicj4KPGJyPgpUaGUgcG9ldCBoYXMgYmVhdXRpZnVsbHkgZGVzY3JpYmVkIGEgbGl0dGxlIGJveSwgaGlzIGxvY2F0aW9uIGFuZCBoaXMgYWN0cyBvZiBwZWVyaW5nIChsb29raW5nKSBhbmQKZmVlbGluZyBhYm91dCBiZWF1dGlmdWwgYW5kIHdvbmRlcmZ1bCBuYXR1cmUuIEhlIGhhcyBwcmVzZW50ZWQgaGlzIGV4cGVyaWVuY2VzIG9mIGNoaWxkaG9vZCBjbG9zZWx5CmNvbm5lY3RlZCB3aXRoIG5hdHVyZS4gSGUgaGFzIHByZXNlbnRlZCBoaW1zZWxmIGFzIGEgbGl0dGxlIGkgb3IgYSBib3kgb2YgZml2ZSBvciBzaXggeWVhcnMgb2xkIHdobwprZWVwcyBvbiBwZWVyaW5nIGJlYXV0aWZ1bCBnb2xkZW4gc3Vuc2V0IG9mIE5vdmVtYmVyIHRocm91Z2ggc29tZSBoaWdoIHdpbmRvdyBhbmQgcG9uZGVyaW5nIGFib3V0IHRoZQp3b25kZXJmdWwgdHJhbnNmb3JtYXRpb24gb2YgdGhlIGRheSBpbnRvIG5pZ2h0IGluIGEgdmVyeSBiZWF1dGlmdWwgd2F5Lgo8YnI+Cjxicj4KPGJyPgo8YnI+CjxoMz5VbmRlcnN0YW5kaW5nIHRoZSB0ZXh0PC9oMz4gCjxicj4KPHNwYW4+QW5zd2VyIHRoZSBmb2xsb3dpbmcgcXVlc3Rpb25zLjwvc3Bhbj4KPGJyPgo8c3Bhbj5hLiBXaG8gY2FuIGJlIHRoZSBzcGVha2VyIG9mIHRoaXMgcG9lbT88L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhlIHNwZWFrZXIgb2YgdGhpcyBwb2VtIGlzIHRoZSBwb2V0IGhpbXNlbGYuIEhlcmUgaW4gdGhpcyBwb2VtLCBoZSBoYXMgcHJlc2VudGVkIGhpbXNlbGYgYXMgYSBsaXR0bGUgYm95IHJlY2FsbGluZyBoaXMgY2hpbGRob29kIGV4cGVyaWVuY2UgY29ubmVjdGVkIHdpdGggbmF0dXJlLgo8YnI+Cjxicj4KPHNwYW4+Yi4gV2hhdCBpcyAmbGRxdW87bGl0dGxlIGkmcmRxdW87IGRvaW5nPzwvc3Bhbj4KPGJyPgomIzEwMTQwOyAnTGl0dGxlIGknIGlzIGxvb2tpbmcgdGhlIGJlYXV0aWZ1bCBhbmQgZ29sZGVuIHNjZW5lIG9mIHN1bnNldCBmcm9tIGEgd2luZG93IGFuZCBmZWVsaW5nIGFib3V0IHRoZSBiZWF1dGlmdWwgd2F5IG9mIHRyYW5zZm9ybWluZyB0aGUgZGF5IGludG8gdGhlIG5pZ2h0Lgo8YnI+Cjxicj4KPHNwYW4+Yy4gV2hhdCBjYW4gYmUgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuICZsZHF1bztsaXR0bGUgaSZyZHF1bzsgYW5kIHRoZSBzcGVha2VyIG9mIHRoZSBwb2VtPzwvc3Bhbj4KPGJyPgomIzEwMTQwOyAgVGhlICJsaXR0bGUgaSIgaXMgdGhlIGNoaWxkaG9vZCBvZiB0aGUgc3BlYWtlciBoaW1zZWxmLCBhbmQgdGhlIHNwZWFrZXIgaXMgdGhlIGNoaWxkIGdyb3duLXVwLiBTbyB3ZSBjYW4gc2F5IHRoYXQgdGhlICJsaXR0bGUgaSIgaXMgdGhlIGNoaWxkIHZlcnNpb24gb2YgdGhlIHNwZWFrZXIuCjxicj4KPGJyPgo8c3Bhbj5kLiBXaGF0IGlzIHRoZSBzcGVha2VyIHJlbWVtYmVyaW5nIGZyb20gaGlzIGNoaWxkaG9vZCBkYXlzIGluIHRoZSBwb2VtPyA8L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhlIHNwZWFrZXIgaXMgcmVtZW1iZXJpbmcgYW4gZXh0cmVtZWx5IGJlYXV0aWZ1bCBzY2VuZSBvZiBuYXR1cmUgZnJvbSBoaXMgY2hpbGRob29kIGRheXMgaW4gdGhlIHBvZW0uIEhlIGlzIHJlbWVtYmVyaW5nIGhpbXNlbGYgYXMgYSBsaXR0bGUgYm95IHdobyB1c2VkIHRvIGVuam95IHRoZSBiZWF1dGlmdWwgZ29sZGVuIHN1bnNldCBhbmQgaXRzIHRyYW5zZm9ybWF0aW9uLgo8YnI+Cjxicj4KPHNwYW4+ZS4gV2hhdCBhdHRpdHVkZSBkb2VzIHRoZSBzcGVha2VyIHNlZW0gdG8gaGF2ZSB0b3dhcmQgdGhlIGNoaWxkIGluIHRoZSBwb2VtPyA8L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhlIHNwZWFrZXIgc2VlbXMgdG8gaGF2ZSBhIHBvc2l0aXZlLCBub3N0YWxnaWMgYXR0aXR1ZGUgdG93YXJkcyB0aGUgY2hpbGQuIEhlIGZlZWxzIGEgeW91dGhmdWwgcHJlc2VuY2UgaW4gaGltc2VsZiBzdGlsbCBub3csIHdobyBpbnNwaXJlcyBoaW0gbm93IHRvIGxvb2sgb3V0IGFuZCBlbmpveSB0aGUgbmF0dXJlIG91dHNpZGUuCjxicj4KPGJyPgo8YnI+Cjxicj4KPGgzPlJlZmVyZW5jZSB0byB0aGUgY29udGV4dDwvaDM+IAo8YnI+CjxzcGFuPmEuIFdoeSBkbyB5b3UgdGhpbmsgQ3VtbWluZ3MgaGFzIHBsYWNlZCBhIHNlbWljb2xvbiBiZXR3ZWVuIHRoZSB3b3JkcyB3aW5kb3cgYW5kIGF0Pzwvc3Bhbj4KPGJyPgomIzEwMTQwOyBJIHRoaW5rIEN1bW1pbmdzIGhhcyBwbGFjZWQgYSBzZW1pY29sb24gYmV0d2VlbiB0aGUgd29yZHMgd2luZG93IHRvIHByb3ZpZGUgYSBicmVhayBpbiB0aGUgbG9uZyBzZW50ZW5jZSB3aGlsZSBrZWVwaW5nIHRoZSB0aG91Z2h0IGZsb3dpbmcuIEluIHN1Y2ggc2l0dWF0aW9ucyBhIHNlbWljb2xvbiB3b3JrcyBzdHJvbmdlciB0aGFuIGEgY29tbWEgYXMgaW4gdGhlIHByZXNlbnQgc2VudGVuY2Ugc3RydWN0dXJlLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj5iLiBJZiB0aGUgc3BlYWtlciBpcyB0aGUgY2hpbGQgZ3Jvd24gdXAsIHdoeSBkb2VzIGhlIGFzaywgJmxkcXVvO3dobyBhcmUgeW91JnJkcXVvOz88L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhlcmUgaXMgbm8gZG91YnQgdGhhdCB0aGUgc3BlYWtlciBpcyB0aGUgY2hpbGQgZ3Jvd24gdXAuIFN0aWxsIGhlIHB1dHMgdGhlIHF1ZXN0aW9uIOKAnHdobyBhcmUgeW914oCdLiBJdCBtYXkgYmUgYmVjYXVzZSBoZSBpcyBzdHJ1Z2dsaW5nIHRvIHJlY2FsbCB0aGUgd29uZGVybWVudCBvZiBoaXMgeW91dGhmdWwgZGF5cy4gIE9yIG1heWJlLCBpdOKAmXMgaGlzIGluY3JlZHVsaXR5IHRoYXQgdGhlcmUgaXMgc3RpbGwgYSB5b3V0aGZ1bCBwcmVzZW5jZSBpbiBoaW1zZWxmIGVuam95aW5nIHRoZSBuYXR1cmUuCjxicj4KPGJyPgo8YnI+CjxzcGFuPgogICAgYy4gSW4gdGhpcyBwb2VtLCBhbiBhZHVsdCByZWZsZWN0cyBvbiB0aGUgY2hpbGRob29kIGV4cGVyaWVuY2UuIEJhc2VkIG9uIHRoYXQsIHdoYXQgbWlnaHQgYmUgdGhlIHRoZW1lCiAgICBvZiB0aGUgbGluZXM6Cjwvc3Bhbj4gPGk+CiAgICAmbGRxdW87KGFuZCBmZWVsaW5nOiB0aGF0IGlmIGRheSAvIGhhcyB0byBiZWNvbWUgbmlnaHQgLyB0aGlzIGlzIGEgYmVhdXRpZnVsCiAgICB3YXkpJnJkcXVvOz8KPC9pPgo8YnI+CiYjMTAxNDA74p6cIEhlcmUsIGluIHRoZXNlIGxpbmVzLCB3ZSBmaW5kIHRoZSBib3kncyBmZWVsaW5nIGFib3V0IHRoZSBiZWF1dGlmdWwgc2NlbmUgb2YgTm92ZW1iZXIncyBnb2xkZW4gc3Vuc2V0LiBIZSBmZWVscyBhYm91dCB3b25kZXJmdWwgdHJhbnNpdGlvbiBvZiBuYXR1cmUgaS5lIGRheSB0byBuaWdodC4gVGh1cywgdGhlIHRoZW1lIG9mIHRoZXNlIGxpbmVzIG1pZ2h0IHJlZmVyIHRvIGRlYXRoLiBJdCBpcyBhIHRvdWNoeSB3YXkgdG8gZGVzY3JpYmUgYW4gdW53ZWxjb21lIHRyYW5zaXRpb24gZnJvbSB0aGUgam95ZnVsIHlvdXRoIHRvIHRoZSBlbmQgb2YgbGlmZS4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+ZC4gV2hhdCBpcyB0aGUgcmh5bWUgc2NoZW1lIHVzZWQgaW4gdGhlIHBvZW0/PC9zcGFuPgo8YnI+CiYjMTAxNDA7IEEgcmh5bWUgc2NoZW1lIGlzIHRoZSBwYXR0ZXJuIG9mIHNvdW5kcyB0aGF0IHJlcGVhdHMgYXQgdGhlIGVuZCBvZiBhIGxpbmUgb3Igc3RhbnphLiBUaGUgcmh5bWUgc2NoZW1lIHVzZWQgaW4gdGhlIHBvZW0gaXMgQUJBQiBhbmQgQ0RDRC4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+ZS4gRXhwbGFpbiB0aGUgcHVuIGluICZsZHF1bztsaXR0bGUgaSZyZHF1bzsgdGhhdCBpcyByZWxhdGVkIHRvIHdoYXQgaGUgaXMgZG9pbmcuPC9zcGFuPgo8YnI+CiYjMTAxNDA7ICBBIHB1biBpcyB0aGUgY2xldmVyIHVzZSBvZiBhIHdvcmQgdGhhdCBoYXMgbW9yZSB0aGFuIG9uZSBtZWFuaW5nIG9yIGEgd29yZCB0aGF0IGhhdmUgZGlmZmVyZW50IG1lYW5pbmdzIGJ1dCBzb3VuZHMgdGhlIHNhbWUuIFRoZSBwdW4gaW4gJ2xpdHRsZSBpJyBpbmRpY2F0ZXMgYm90aCBhIHNwZWNpZmljIGFzcGVjdCBvZiB0aGUgcG9ldCdzIHBlcnNvbmFsaXR5LCB0aGUgY2hpbGRsaWtlIGZlZWxpbmcgb2Ygd29uZGVyLCBhbmQgc2VlaW5nIHRoZSB3b3JsZCB0aHJvdWdoIHRoZSAnZXllJyBvZiBhIGNoaWxkLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj4KICAgIGYuIEhvdyBkb2VzIEN1bW1pbmdzJnJzcXVvO3MgdXNlIG9mIGxvd2VyY2FzZSBsZXR0ZXJzIGFmZmVjdCB5b3VyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIHBvZW0/CiAgICBFeHBsYWluLgo8L3NwYW4+Cjxicj4KJiMxMDE0MDsgQ3VtbWluZ3MncyB1c2Ugb2YgbG93ZXJjYXNlIGxldHRlcnMgYWZmZWN0IG15IHVuZGVyc3RhbmRpbmcgb2YgdGhlIHBvZW0uIEhlIHVzZXMgbG93ZXJjYXNlIGxldHRlcnMgdG8gZW1waGFzaXplIGhpcyBpbmZlcmlvciBmZWVsaW5ncyBpbiByZWdhcmQgdG8gaGlzIGV4cGVyaWVuY2UuIEhlIHVzZWQgdG8gZW5qb3kgbmF0dXJlIGluIGhpcyBjaGlsZGhvb2QgZnVsbCBvZiBoYXBwaW5lc3MgYnV0IG5vdyBoaXMgYWR1bHRob29kIHdvcnJpZXMgaGF2ZSBzdXBwcmVzc2VkIGhpcyBqb3lzIGFuZCBwbGVhc3VyZXMuCjxicj4KPGJyPgo8YnI+Cjxicj4KPGJyPgo8aDM+UmVmZXJlbmNlIGJleW9uZCB0aGUgdGV4dDwvaDM+IAo8YnI+CjxzcGFuPmEuIEhvdyBkb2VzIG5hdHVyZSBpbnNwaXJlIHRoZSBzcGVha2VyIGluICZsZHF1bzt3aG8gYXJlIHlvdSwgbGl0dGxlIGkmcmRxdW87PyBFeHBsYWluLjwvc3Bhbj4KPGJyPgomIzEwMTQwOyBOYXR1cmUgaW5zcGlyZXMgdGhlIHNwZWFrZXIgYSBsb3QgaW4gIndobyBhcmUgeW91LCBsaXR0bGUgaSIuIFRoZSBiZWF1dHkgb2YgbmF0dXJlIGhhcyBtYWRlIGhpbSB0byBnbyBiYWNrIGludG8gaGlzIGJlYXV0aWZ1bCBjaGlsZGhvb2QgZXhwZXJpZW5jZS4gSGUgZmluZHMgaGltc2VsZiBhcyBhIGxpdHRsZSBib3kgb2YgZml2ZSBvciBzaXggeWVhcnMgb2xkIGluIGhpcyBjaGlsZGhvb2QuIEhlIHVzZWQgdG8gbG9vayBhdCB0aGUgYmVhdXRpZnVsIGdvbGRlbiBzdW5zZXQgYW5kIGZlZWxzIGZvciB0aGUgYmVhdXRpZnVsIHdheSBvZiB0aGUgdHJhbnNpdGlvbiBvZiB0aGUgZGF5IGludG8gdGhlIG5pZ2h0Lgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj4KICAgIGIuIFJlY2FsbCBhIGNoaWxkaG9vZCBtb21lbnQgd2hlbiB5b3UgZmVsdCBjbG9zZWx5IGNvbm5lY3RlZCB3aXRoIG5hdHVyZS4gRGVzY3JpYmUgdGhlIHRpbWUgYW5kIHBsYWNlIGFzCiAgICB3ZWxsIGFzIHlvdXIgZmVlbGluZ3MgYW5kIHRob3VnaHRzIGFib3V0IGl0Lgo8L3NwYW4+Cjxicj4KJiMxMDE0MDsgSSB3YXMgYm9ybiBhbmQgcmFpc2VkIGluIHRoZSBidXN5IGNpdHkgb2YgS2F0aG1hbmR1LiBNeSBmYXRoZXIgd29ya3MgdGhlcmUuIEkgZ3JldyB1cCBpbiB0aGUgbWlkc3Qgb2YgdGhlIGNpdHksIHdpdGggbGl0dGxlIGNvbm5lY3Rpb24gdG8gbmF0dXJlLiBBcyBJIHdhcyBhYm91dCB0byB0YWtlIG15IHNjaG9vbCBncmFkdWF0aW9uIGV4YW1zIG15IGZhdGhlciBhbm5vdW5jZWQgdGhhdCB3ZSB3b3VsZCBnbyB0byBvdXIgbmF0aXZlIHZpbGxhZ2UgaW4gdGhlIGxvbmcgdmFjYXRpb24uIE15IGhhcHBpbmVzcyBrbmV3IG5vIGJvdW5kLiBJdCB3YXMgbGlrZSBhIGRyZWFtIGNvbWluZyB0cnVlLiBGaW5hbGx5IEkgd2FzIGluIG15IG5hdGl2ZSB2aWxsYWdlLiBJdCB3YXMgc28gZGlmZmVyZW50LiBPcHBvc2l0ZSB0byB0aGUgaHVzdGxlIGFuZCBidXN0bGUgb2YgdGhlIGJ1c3kgY2l0eSwgaXQgd2FzIHNvIGNhbG0gYW5kIHRyYW5xdWlsLiBJdCB3YXMgZmlyc3QgdGltZSBJIHNhdyBhIG1pbGtpbmcgY293LiBPdGhlcndpc2UgSSB1c2VkIHRvIHRoaW5rIHRoYXQgYWxsIHByb2R1Y2UgY29tZSBmcm9tIHN1cGVyIG1hcmtldHMgb3IgZGFpcmllcy4gVGhlIG5leHQgbW9ybmluZyBteSBncmFuZCBwYSB0b29rIG1lIHRvIG91ciBwYWRkeSBmaWVsZC4gSSB3YXMgc3VycHJpc2VkIHRvIHNlZSB0aGUgdmFzdCBzdHJldGNoIG9mIGdyZWVuZXJ5LiBJdCB3YXMgc28gZGlmZmVyZW50IGZyb20gdGhlIGNvbmNyZXRlIGp1bmdsZSBvZiB0aGUgcGxhY2Ugd2hlcmUgSSBsaXZlLiBUaGUgY2hpcnBpbmcgb2YgYmlyZHMgaW4gbWFuZ28gZ3JvdmVzIHdhcyBzbyBzd2VldC4gSXQgd2FzIG5vdCBsaWtlIGEgY2FnZWQgYmlyZC4gSSBuZXZlciBrbmV3IGJlZm9yZSB0aGF0IHdpbmRzIGNhbiBwbGF5IHNvIGRlbGlnaHRmdWxseS4gVGhlcmUgSSBsZWFybnQgaG93IHRvIGNvbm5lY3Qgd2l0aCBuYXR1cmUuIEkgZW5qb3llZCBzdW4gcmlzZXMgYW5kIHN1bnNldHMsIHdoaWNoIHdlcmUgYWx3YXlzIGNvdmVyZWQgYnkgdGhlIGJpZyBidWlsZGluZ3Mgb2YgbXkgY2l0eS4gV2Ugc3RheWVkIHRoZXJlIGZvciBhYm91dCBhIG1vbnRoLiBCdXQgSSBzaGFsbCBuZXZlciBmb3JnZXQgbXkgZmlyc3QgaW50cm9kdWN0aW9uIHdpdGggbmF0dXJlLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj4KICAgIGMuIEludGVycHJldCB0aGUgcG9lbSBpbiBhbnkgd2F5IHlvdSBsaWtlLgo8L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhpcyBsaXR0bGUgcG9lbSBpcyBpbiB0aGUgZm9ybSBvZiBhIGRyYW1hdGljIG1vbm9sb2d1ZSB3aGVyZSBoZSBhZGRyZXNzZXMgaGlzIG93biBjaGlsZGhvb2QuIEl0IG9wZW5zIHdpdGggaW4gYSBub3N0YWxnaWMgbW9vZC4gV2F0Y2hpbmcgc3Vuc2V0IHRocm91Z2ggaGlzIHdpbmRvdyBvbmUgZXZlbmluZywgdGhlIHNwZWFrZXIgc3VkZGVubHkgZ29lcyBpbiBmbGFzaGJhY2sgd2hlbiBpbiBoaXMgY2hpbGRob29kIGhlIHVzZWQgdG8gZW5qb3kgc3VjaCBuYXR1cmFsIHNjZW5lcy4gCjxicj48YnI+CkhlIGFza3MgaGlzICJsaXR0bGUgaSIgd2hvIGhlIGlzLiBObyBkb3VidCwgdGhlICdsaXR0bGUgaScgaXMgaGlzIGNoaWxkaG9vZCB2ZXJzaW9uIChoaXMgY2hpbGRob29kKS4gSXQgc2hvd3MgdGhhdCBhbHRob3VnaCB0aGUgd29ycmllcyBvZiBoaXMgY2hpbGRob29kIGhhdmUga2VwdCBzdXBwcmVzc2VkIGhpcyBjaGlsZGhvb2QgcGxlYXN1cmVzLCBpdCBpcyBzdGlsbCB0aGVyZSBpbiBzb21lIGNvcm5lciBvZiBoaXMgaGVhcnQuIFRoYXQgaXMgdGhlIGhhcHBpZXN0IHRoaW5nLgo8YnI+PGJyPgpBcyB0aGUgcG9lbSBwcm9jZWVkcywgdGhlIG1vb2QgY2hhbmdlcyBmcm9tIG5vc3RhbGdpYyB0byBzYWQgcGVuc2l2ZSBvbmUsIHdoZW4gaGUgdGFsa3MgYWJvdXQgdGhlIHRoZSBwYXNzaW5nIGRheXMsIGluZGljYXRpbmcgJ2RlYXRoJy4gSGVyZSB3ZSBmaW5kIGFuIHVud2VsY29tZSB0cmFuc2l0aW9uIChjaGFuZ2UpIGZyb20gcGxlYXNpbmcgY2hpbGRob29kIHRvIGFwcHJvYWNoaW5nIGRlYXRoLiBCdXQgaGVyZSBhZ2FpbiwgaGUgZmluZHMgYSBiZWF1dGlmdWwgd2F5IG9mIGFwcHJvYWNoaW5nIGEgZHJlYWRlZCBmaW5hbGUgKHRoYXQgaXMsIGZlYXIgb2YgZGVhdGgpLgo8YnI+PGJyPgpCeSBwdXR0aW5nICJpIiB3aXRoICJsaXR0bGUiIGhlIGRlZW1waGFzaXplcyAobWluaW1pemVzIHRoZSBpbXBvcnRhbmNlIG9mKSB0aGUgc2VsZiBhbmQgcHJvbW90ZXMgdGltZS4KCjxicj4KPGJyPjxicj48YnI+PGJyPgo8c3Bhbj5JZiB5b3UgaGF2ZSBhbnkgc3VnZ2VzdGlvbnMgb3IgZmVlZGJhY2tzLCBwbGVhc2Ugd3JpdGUgdG8gdXMgYXQgcGx1czJoZWxwQGdtYWlsLmNvbTwvc3Bhbj4KPGJyPjxicj4KPC9ib2R5Pgo8L2h0bWw+", "5": ""}, "essays": {"1": "", "2": "", "3": "", "4": "", "5": ""}, "oap": {"1": "", "2": "", "3": ""}}