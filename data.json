{"ld": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPkRvYzwvdGl0bGU+CiAgICA8c2NyaXB0PgogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvbnRleHRtZW51IiwgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9LCBmYWxzZSk7CiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY29weSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgLy8gQ2hhbmdlIHRoZSBjb3BpZWQgdGV4dCBpZiB5b3Ugd2FudAogICAgICAgICAgICBldnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCJ0ZXh0L3BsYWluIiwgIkNvcHlpbmcgaXMgbm90IGFsbG93ZWQgb24gdGhpcyB3ZWJwYWdlIik7CiAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgY29weSBhY3Rpb24KICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgPC9zY3JpcHQ+CiAgICA8c3R5bGU+CiAgICAgICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9T3BlbitTYW5zOndnaHRANjAwJmRpc3BsYXk9c3dhcCcpOwogICAgICAgIC8qIE5PIFNFTEVDVCArIEhJR0hMSUdIVCBDT0xPUiAqLwogICAgICAgICogewogICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIH0KICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KICAgICAgICAqOjotbW96LXNlbGVjdGlvbiB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IG5vbmU7CiAgICAgICAgfQogICAgICAgIC8qIHN0eWxpbmcgdGV4dCBjb250ZW50ICovCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTVweDsKICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIzcHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGp1c3RpZnk7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIHdvcmQtc3BhY2luZzogMnB4OwogICAgICAgIH0KICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CiAgICAgICAgaDMgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgIH0KICAgICAgICBzcGFuIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj5Vbml0IDYgPGJyPgogICAgICAgICBIZWFsdGggYW5kIEV4ZXJjaXNlPC9jZW50ZXI+Cjxicj4KPGJyPgo8aDM+V2F5cyB3aXRoIHdvcmRzPC9oMz4KPGJyPgo8c3Bhbj5BLiBUZW4gd29yZHMgaW4gdGhlIGJvbGQgZmFjZSBpbiB0aGUgdGV4dCBjb3JyZXNwb25kIHRvIHRoZSBkZWZpbml0aW9ucyBiZWxvdy4gTWF0Y2ggdGhlIGRlZmluaXRpb25zIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgd29yZHMuPC9zcGFuPgo8YnI+Cjxicj4KYS4gaW4gc3BpdGUgb2Ygd2hhdCBoYXMganVzdCBiZWVuIHNhaWQgb3IgcmVmZXJyZWQgdG8gLSA8Yj5uZXZlcnRoZWxlc3M8L2I+Cjxicj4KPGJyPgpiLiBhIHN0cm9uZyBkZXNpcmUgb3IgaW1wdWxzZSAtIDxiPnVyZ2U8L2I+Cjxicj4KPGJyPgpjLiB0aGUgYWJpbGl0eSB0byBjb250aW51ZSB0cnlpbmcgdG8gZG8gc29tZXRoaW5nLCBhbHRob3VnaCBpdCBpcyB2ZXJ5IGRpZmZpY3VsdCAtIDxiPmRldGVybWluYXRpb248L2I+Cjxicj4KPGJyPgpkLiB0byBhdHRyYWN0IGF0dGVudGlvbiB0byBvciBlbXBoYXNpemUgc29tZXRoaW5nIGltcG9ydGFudCAtIDxiPmhpZ2hsaWdodDwvYj4KPGJyPgo8YnI+CmUuIGFyZ3VpbmcgYWJvdXQgdGhpbmdzIHRoYXQgYXJlIG5vdCBpbXBvcnRhbnQgLSA8Yj5iaWNrZXJpbmc8L2I+Cjxicj4KPGJyPgpmLiBub3QgaGF2aW5nIHRoaW5ncyBvciBjb25kaXRpb25zIHRoYXQgYXJlIHVzdWFsbHkgY29uc2lkZXJlZCBuZWNlc3NhcnkgLSA8Yj5kZXByaXZhdGlvbjwvYj4KPGJyPgo8YnI+CmcuIGNvbnRpbnVlIHRvIGV4aXN0IC0gPGI+cGVyc2lzdDwvYj4KPGJyPgo8YnI+CmguIHNvZnQgbG9vc2UgZmxlc2ggb24gYSBwZXJzb24ncyBib2R5IC0gPGI+ZmxhYjwvYj4KPGJyPgo8YnI+CmkuIHRvIGltcHJvdmUgb3IgaW5jcmVhc2Ugc29tZXRoaW5nIC0gPGI+Ym9vc3Q8L2I+Cjxicj4KPGJyPgpqLiBhIGxpbWl0aW5nIGNvbmRpdGlvbiBvbiBzb21ldGhpbmcgLSA8Yj5yZXN0cmljdGlvbjwvYj4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+Tm93LCBtYWtlIHNlbnRlbmNlcyBvZiB5b3VyIG93biB1c2luZyB0aGUgc2FtZSB3b3JkcyBpbiBib2xkIHR5cGUuPC9zcGFuPgo8YnI+Cjxicj4KYS4gPGI+TmV2ZXJ0aGVsZXNzPC9iPiB0aGUgaWRlYSBvZiB0aGUgdmFsdWUgb2YgaW1wcm92aW5nIGJyZWVkcyBpcyBnYWluaW5nIGdyb3VuZC4KPGJyPgo8YnI+CmIuIFNoZSBmb3VnaHQgYmFjayB0aGUgPGI+dXJnZTwvYj4gdG8gcnVuLgo8YnI+Cjxicj4KYy4gPGI+RGV0ZXJtaW5hdGlvbjwvYj4gd2FzIGhlciBtb3RpdmF0aW9uIHRvIHN0YW5kIHVwIHRvIHRoZSBidWxseS4KPGJyPgo8YnI+CmQuIERvIHlvdSBrbm93IHdoYXQgaGUgPGI+aGlnaGxpZ2h0ZWQ8L2I+IGluIHJlZD8KPGJyPgo8YnI+CmUuIE1heWJlIGhlIG1lYW50IGhlIHdhcyBzaWNrIG9mIGFsbCB0aGUgPGI+Ymlja2VyaW5nPC9iPiB3aXRoIGhpcyBmYW1pbHkuCjxicj4KPGJyPgpmLiBUaGV5IGFyZSBvZnRlbiB0YXJnZXRlZCBvbiBhcmVhcyBvZiBtdWx0aXBsZSA8Yj5kZXByaXZhdGlvbjwvYj4uCjxicj4KPGJyPgpnLiBmIHRoZSBzeW1wdG9tcyA8Yj5wZXJzaXN0PC9iPiwgY29udGFjdCB5b3VyIGRvY3Rvci4KPGJyPgo8YnI+CmguIEkgd2lzaCBldmVyeW9uZSB3aG8gaXMgZmlnaHRpbmcgdGhlIDxiPmZsYWI8L2I+IHRoZSB2ZXJ5IGJlc3Qgb2YgbHVjay4KPGJyPgo8YnI+CmkuIERyYW1hIGFsc28gPGI+Ym9vc3RzPC9iPiB0aGUgY29tbXVuaWNhdGlvbiBza2lsbHMgb2Ygc3R1ZGVudHMgd2l0aCBzcGVjaWFsIG5lZWRzLgo8YnI+Cjxicj4Kai4gQm90aCB0aGVzZSBwcm9wb3NpdGlvbnMgd2VyZSwgd2l0aCBzb21lIDxiPnJlc3RyaWN0aW9uczwvYj4sIHNlY3VyZWQuCjxicj4KPGJyPgo8YnI+CiAKPGJyPgo8c3Bhbj5CLiBUaGUgd29yZHMgJmxzcXVvO3Jlc3RyaWN0aW9uJnJzcXVvOyBhbmQgJmxzcXVvO2F3YXJlbmVzcyZyc3F1bzsgYXJlIG5vdW5zIHdpdGggdGhlIHN1ZmZpeGVzICZsc3F1bzstaW9uJnJzcXVvOyBhbmQgJmxzcXVvOy1uZXNzJnJzcXVvOy4gTWFrZSBhIGxpc3Qgb2YgYXMgbWFueSB3b3JkcyBhcyB5b3UgY2FuIHdoaWNoIGVuZCBpbiAmbHNxdW87LWlvbiZyc3F1bzsgYW5kICZsc3F1bzstbmVzcyZyc3F1bzsuIE1ha2UgYSBsaXN0IG9mIGFzIG1hbnkgd29yZHMgYXMgeW91IGNhbiB3aGljaCBlbmQgaW4gJmxzcXVvOy1pb24mcnNxdW87IGFuZCAmbHNxdW87bmVzcy48L3NwYW4+Cjxicj4KPGJyPgo8Yj4nLWlvbic8L2I+Cjxicj4KcG9sbHV0aW9uCjxicj4KaW52ZW50aW9uCjxicj4KaW52ZW50aW9uCjxicj4Kc29sdXRpb24KPGJyPgpzdWJzdGl0dXRpb24KPGJyPgpwYXJ0aXRpb24KPGJyPgpldm9sdXRpb24KPGJyPgo8YnI+CjxiPi0mcnNxdW87bmVzcyZyc3F1bzs8L2I+Cjxicj4KcG9saXRlbmVzcwo8YnI+Cmdvb2RuZXNzCjxicj4KYmFkbmVzcwo8YnI+CnVzZWZ1bG5lc3MKPGJyPgpLaW5kbmVzcwo8YnI+Cjxicj4KPGJyPgo8YnI+CjxoMz5Db21wcmVoZW5zaW9uPC9oMz4KPGJyPgo8c3Bhbj5BLiBXcml0ZSB3aGV0aGVyIHRoZSBmb2xsb3dpbmcgc3RhdGVtZW50cyBhcmUgVHJ1ZSwgRmFsc2Ugb3IgTm90IEdpdmVuLjwvc3Bhbj4KPGJyPgo8YnI+CmEuIER1cmluZyB0aGUgaG9saWRheXMgcGVvcGxlIGVhdCBhbmQgZHJpbmsgbW9yZSB0aGFuIHVzdWFsLiA8Yj5UcnVlPC9iPgo8YnI+Cjxicj4KYi4gR2V0dGluZyB0b28gbGl0dGxlIGV4ZXJjaXNlIGFuZCBlYXRpbmcgdG9vIG11Y2ggaXMgdGhlIHJlYXNvbiB3aHkgcGVvcGxlIHB1dCBvbiB3ZWlnaHQuIDxiPlRydWU8L2I+Cjxicj4KPGJyPgpjLiBEYXZpZCBBbGxpc29uJnJzcXVvO3MgcmVzZWFyY2ggaW52b2x2ZWQgc3R1ZHlpbmcgcmF0cyB1bmRlciBsYWJvcmF0b3J5IGNvbmRpdGlvbnMuIDxiPkZhbHNlPC9iPgo8YnI+Cjxicj4KZC4gWW91IG1heSBuZWVkIHRvIGdvIHNob3BwaW5nIGZvciBjbG90aGVzIGlmIHlvdSBjb21lIGRvd24gd2l0aCBhIGNvbGQuIDxiPlRydWU8L2I+Cjxicj4KPGJyPgplLiBBZGVub3ZpcnVzLTM2IChBRC0zNikgZGVjcmVhc2VzIHRoZSBwZXJjZW50YWdlIG9mIGZhdCBpbiB0aGUgZmF0IGNlbGxzLiA8Yj5GYWxzZTwvYj4KPGJyPgo8YnI+CmYuIFZhY2NpbmF0aW9uIGFnYWluc3QgaW5mZWN0aW9ucyBjb3VsZCBiZSB1c2VkIGluIHRoZSBmdXR1cmUgdG8gcHJldmVudCBvYmVzaXR5LiA8Yj5UcnVlPC9iPgo8YnI+Cjxicj4KZy4gUGVvcGxlIHVuZGVyIHNldmVyZSBzdHJlc3MgY2FuIGV4cGVyaWVuY2UgYnJlYXRoaW5nIGRpZmZpY3VsdGllcy4gPGI+Tm90IEdpdmVuPC9iPgo8YnI+Cjxicj4KaC4gQSBzdHVkeSBpbmRpY2F0ZXMgdGhhdCBtaWNlIHRoYXQgaGF2ZSBuZXZlciBiZWVuIG9uIGEgZGlldCBjaG9vc2UgZmF0dHkgZm9vZCwgd2hlbiBnaXZlbiBhIGNob2ljZSBiZXR3ZWVuIGhpZ2gtY2Fsb3JpZSBvciBsb3ctY2Fsb3JpZSBmb29kIHByb2R1Y3RzLiA8Yj5GYWxzZTwvYj4KPGJyPgo8YnI+CmkuIFJhaml0YSBTaW5oYSBoYXMgYmVlbiBzdHVkeWluZyB0aGUgY29ubmVjdGlvbiBiZXR3ZWVuIGJyYWluIGFjdGl2aXR5IGFuZCBiZWhhdmlvdXIuIDxiPkZhbHNlPC9iPgo8YnI+Cjxicj4Kai4gU3BlY2lmaWMgaG9ybW9uZXMgcmVndWxhdGUgb3VyIGFwcGV0aXRlLiA8Yj5UcnVlPC9iPgo8YnI+Cjxicj4KPGJyPgo8YnI+CjxzcGFuPkIuIEFuc3dlciB0aGUgZm9sbG93aW5nIHF1ZXN0aW9ucy48L3NwYW4+Cjxicj4KPGJyPgo8c3Bhbj5hLiBJbiB3aGF0IHNlbnNlIGFyZSB0aGUgaG9saWRheXMgYSB0aW1lIG9mIGV4Y2Vzcz8gV2hlbiBjYW4gYSBwZXJzb24gZ2FpbiB3ZWlnaHQ/PC9zcGFuPgo8YnI+CkluIGhvbGlkYXlzIHBlb3BsZSBlYXQgYW5kIGRyaW5rIG1vcmUgdGhhbiB1c3VhbC4gSW4gdGhpcyBzZW5zZSBob2xpZGF5cyBhcmUgYSB0aW1lIG9mIGV4Y2Vzcy4gQSBwZXJzb24gY2FuIGdhaW4gd2VpZ2h0IGlmIGhlL3NoZSBlYXRzIG1vcmUgZm9vZCBhbmQgZG8gbGl0dGxlIGV4ZXJjaXNlLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj5iLiBBY2NvcmRpbmcgdG8gRGF2aWQgQWxsaXNvbiwgd2hpY2ggZmFjdG9yIGNvbnRyaWJ1dGVzIHRvIGV4Y2VzcyBvYmVzaXR5Pzwvc3Bhbj4KPGJyPgpBY2NvcmRpbmcgdG8gRGF2aWQgQWxsaXNvbiwgb3ZlciBlYXRpbmcgYW5kIHVuZGVyIGV4ZXJjaXNlIGNvbnRyaWJ1dGVzIHRvIGV4Y2VzcyBvYmVzaXR5Lgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj5jLiBXaGF0LCBhY2NvcmRpbmcgdG8gRGh1cmFuZGhhciwgY2FuIGJlIHRoZSB3YXkgb2YgcHJldmVudGluZyBmYXRuZXNzPzwvc3Bhbj4KPGJyPgpBY2NvcmRpbmcgdG8gRGh1cmFuZGhhciwgdmFjY2luYXRpb24gYWdhaW5zdCBpbmZlY3Rpb25zIGNhbiBiZSB0aGUgd2F5IG9mIHByZXZlbnRpbmcgZmF0bmVzcy4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+ZC4gV2hhdCBpcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gY2hpbGwgYW5kIG9iZXNpdHk/IEhvdyBjYW4gc2F5aW5nICZsc3F1bztvbSZyc3F1bzsgaGVscCByZWR1Y2UgZmF0bmVzcz88L3NwYW4+Cjxicj4KQmVpbmcgY2hpbGwsIHdlIGNhbiByZWR1Y2Ugb3VyIGZhdG5lc3MuIFNheWluZyDigJhPbeKAmSBoZWxwcyByZWR1Y2UgZmF0bmVzcyBieSB0YWtpbmcgY29udHJvbCBvdmVyIHRoZSB1cmdlcyBhbmQgc3RyZXNzIHJlbGF0ZWQgZWF0aW5nIG9mIGhpZ2ggY2Fsb3JpZSBmb29kcy4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+ZS4gV2h5IGlzIGl0IG5lY2Vzc2FyeSB0byBiZSBjYXJlZnVsIHdoaWxlIGJ1eWluZyBwbGFzdGljIHBhY2thZ2VkIGZhdHR5IGZvb2RzPzwvc3Bhbj4KPGJyPgpJdCBpcyBuZWNlc3NhcnkgdG8gYmUgY2FyZWZ1bCB3aGlsZSBidXlpbmcgcGxhc3RpYyBwYWNrYWdlZCBmYXR0eSBmb29kcyBiZWNhdXNlIHRoZXkgY29udGFpbiBlbmRvY3JpbmUgZGlzcnVwdGVyIGNoZW1pY2FscyB0aGF0IGNhbiBhZmZlY3Qgb3VyIHN0b21hY2guCjxicj4KPGJyPgo8YnI+CjxzcGFuPmYuIFdoeSBkb2VzIE5lbHNvbiBzdWdnZXN0IGF2b2lkaW5nIGJsdWUgd2F2ZWxlbmd0aHMgb2YgbGlnaHQgYXQgbmlnaHQ/PC9zcGFuPgo8YnI+Ck5lbHNvbiBzdWdnZXN0cyBhdm9pZGluZyBibHVlIHdhdmVsZW5ndGhzIG9mIGxpZ2h0IGF0IG5pZ2h0IGJlY2F1c2UgdGhlc2UgbGlnaHRzIG1pZ2h0IGluY3JlYXNlIHRoZSBjYWxvcmllcyBpbiBodW1hbiBib2R5Lgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj5nLiBIb3cgZG9lcyBicmVhdGhpbmcgcG9sbHV0ZWQgYWlyIGFmZmVjdCBvbmUmcnNxdW87cyBmYXRuZXNzPzwvc3Bhbj4KPGJyPgpCcmVhdGhpbmcgcG9sbHV0ZWQgYWlyIGFmZmVjdHMgb25l4oCZcyBmYXRuZXNzIGFzIHBvbGx1dGVkIGFpciBhY3RpdmF0ZXMgKGNocm9uaWMpIGluZmxhbW1hdGlvbiBhbmQgZGlzcnVwdHMgdGhlIGJvZHnigJlzIGFiaWxpdHkgdG8gYnVybiBlbmVyZ3kuCjxicj4KPGJyPgo8YnI+CjxzcGFuPmguIFdoYXQgaXMgdGhlIGxpbmsgYmV0d2VlbiBzbGVlcCBhbmQgd2VpZ2h0Pzwvc3Bhbj4KPGJyPgpUaGUgbGluayBiZXR3ZWVuIHNsZWVwIGFuZCB3ZWlnaHQgaXMgdGhhdCBzbGVlcCBkZXByaXZhdGlvbiBib29zdHMgYm9keSB3ZWlnaHQuCjxicj4KPGJyPgo8YnI+Cjxicj4KPGJyPgo8aDM+Q3JpdGljYWwgdGhpbmtpbmc8L2gzPgo8YnI+CjxzcGFuPmEuIFdoYXQgZG8geW91IGRvIHlvdSB0byBrZWVwIHlvdXJzZWxmIGZpdD8gV2hhdCBmb29kIGRvIHlvdSBhdm9pZCBhbmQgd2h5Pzwvc3Bhbj4KPGJyPgo8YnI+ClN0YXlpbmcgZml0IGlzIGEgZ3JlYXQgd2F5IHRvIGltcHJvdmUgb3VyIG1vb2QgYW5kIG92ZXJhbGwgaGVhbHRoLiBNYW55IHBlb3BsZSBzdHJ1Z2dsZSB3aXRoIHN0YXlpbmcgZml0IG92ZXIgdGltZSwgYnV0IHRoZSBiZW5lZml0cyBvZiBmaXRuZXNzIGRlZmluaXRlbHkgb3V0d2VpZ2ggdGhlIGNvc3RzLiBXaXRoIHNvbWUgY29tbWl0bWVudCBhbmQgbW90aXZhdGlvbiwgd2UgY2FuIG1haW50YWluIG91ciBwaHlzaWNhbCBmaXRuZXNzIGZvciB5ZWFycyB0byBjb21lISBJIGRvIHJlZ3VsYXIgZXhlcmNpc2luZyBhbmQgdGFrZSBiYWxhbmNlZCBkaWV0IHRvIGtlZXAgbXlzZWxmIGZpdC4KPGJyPgo8YnI+CkkgYXZvaWQgYW55IGp1bmsgZm9vZCwgZm9vZHMgd2hpY2ggYXJlIGhpZ2ggaW4gc3VnYXIgbGlrZSBkb251dHMsIGNha2VzLCBjb29raWVzIGFuZCB0aGUgZm9vZHMgd2hpY2ggYXJlIGhpZ2ggaW4gZmF0IGxpa2UgcHJvY2Vzc2VkIG1lYXRzLCBoeWRyb2dlbmF0ZWQgb2lsIGFuZCBzaG9ydGVuaW5nLiBJIGRvIHNvIGJlY2F1c2UgaXQgaXMgb25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBjb21wb25lbnRzIG9mIGEgZml0IGxpZmVzdHlsZS4gTWFueSBwZW9wbGUgaWdub3JlIGl0LCBidXQgaWYgd2UgZXhlcmNpc2UgYW5kIGVhdCBhIGxvdCBvZiB1bmhlYWx0aHkgZm9vZHMgbGlrZSBqdW5rIGZvb2RzIHdlIHdpbGwgbm90IGdldCBhbnkgZml0dGVyLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGp1bmsgZm9vZCB0dXJucyB0byBmYXQgYWxtb3N0IGltbWVkaWF0ZWx5LiBKdW5rIGZvb2RzIGNvbnRhaW4gcG9vciBudXRyaXRpb24gYW5kIGFyZSBoaWdoIGluIHNvZGl1bSBhbmQgc3VnYXIuIEJlY2F1c2Ugb2YgdGhpcywgb3VyIGJvZHkgc3VnYXIgbGV2ZWxzIGRyb3AgYWZ0ZXIgY29uc3VtcHRpb24gYW5kIHdlIGVuZCB1cCBmZWVsaW5nIGZhdGlndWVkIHdpdGggYSBtYWpvciBsYWNrIG9mIGVuZXJneS4KPGJyPgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj5iLiBIZWFsdGh5IGNpdGl6ZW5zIGFyZSB0aGUgZ3JlYXRlc3QgYXNzZXQgb2YgYSBjb3VudHJ5LiBXaGF0IGNhbiBhIHN0YXRlIGRvIHRvIGtlZXAgaGVyIGNpdGl6ZW4gaGVhbHRoeT88L3NwYW4+Cjxicj4KPGJyPgpUaGUgc3VjY2VzcyBvciBmYWlsdXJlIG9mIGFueSBnb3Zlcm5tZW50IGluIHRoZSBmaW5hbCBhbmFseXNpcyBtdXN0IGJlIG1lYXN1cmVkIGJ5IHRoZSB3ZWxsLWJlaW5nIG9mIGl0cyBjaXRpemVucy4gTm90aGluZyBjYW4gYmUgbW9yZSBpbXBvcnRhbnQgdG8gYSBzdGF0ZSB0aGFuIGl0cyBwdWJsaWMgaGVhbHRoOyB0aGUgc3RhdGUncyBwYXJhbW91bnQgY29uY2VybiBzaG91bGQgYmUgdGhlIGhlYWx0aCBvZiBpdHMgcGVvcGxlLiBBIHN0YXRlIGNhbiBkbyB0aGUgZm9sbG93aW5nIHRoaW5ncyB0byBrZWVwIGhlciBjaXRpemVucyBoZWFsdGh5Ogo8YnI+PGJyPgoxLiBBIHN0YXRlIHNob3VsZCBwcm92aWRlIHBlb3BsZXMgd2l0aCBwcm9wZXIgaGVhbHRoIGNhcmUgZmFjaWxpdGllcy4KPGJyPjxicj4KMi4gUHJvcGVyIGVkdWNhdGlvbiBpcyBhbHNvIHJlcXVpcmVkIGZvciBtYWludGFpbmluZyBtZW50YWwgYW5kIHNvY2lhbCBoZWFsdGgsIHNvIGVtcGhhc2lzIG9uIGVkdWNhdGlvbiBtdXN0IGJlIGdpdmVuLgo8YnI+PGJyPgozLiBQZW9wbGUgbXVzdCBiZSBtYWRlIGF3YXJlZCBvZiB0aGUgY29tbXVuaWNhYmxlIGRpc2Vhc2VzIHRocm91Z2ggYWR2ZXJ0aXNlbWVudHMgYW5kIG1hc3MgbWVkaWEuCjxicj48YnI+CjQuIFByb3BlciB2YWNjaW5hdGlvbiBzaG91bGQgYmUgZG9uZSBhZ2FpbnN0IGNvbW1vbiBjb21tdW5pY2FibGUgZGlzZWFzZXMuCgo8YnI+Cjxicj4KPGJyPgo8YnI+Cjxicj4KPGgzPldyaXRpbmc8L2gzPgo8YnI+CjxzcGFuPmEuIFlvZ2EgY2FuIGJlIGdvb2QgdG8gc3RheSBwaHlzaWNhbGx5IGFuZCBtZW50YWxseSBoZWFsdGh5LiBEbyB5b3UgcHJhY3RpY2UgYW55IHlvZ2E/IFdyaXRlIGFuIGVzc2F5IG9uIHRoZSBiZW5lZml0cyBvZiB5b2dhLjwvc3Bhbj4KPGJyPgo8YnI+CjxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtd2VpZ2h0OiBib2xkOyI+QmVuZWZpdHMgb2YgWW9nYTwvcD4KPGJyPgpZb2dhIGlzIGFuIGFuY2llbnQgYXJ0IHRoYXQgY29ubmVjdHMgdGhlIG1pbmQgYW5kIGJvZHkuIEl0IGlzIGFuIGV4ZXJjaXNlIHRoYXQgd2UgcGVyZm9ybSBieSBiYWxhbmNpbmcgdGhlIGVsZW1lbnRzIG9mIG91ciBib2RpZXMuIEluIGFkZGl0aW9uLCBpdCBoZWxwcyB1cyBtZWRpdGF0ZSBhbmQgcmVsYXguCjxicj48YnI+CllvZ2EgaGFzIG51bWVyb3VzIGJlbmVmaXRzIGlmIHdlIGxvb2sgYXQgaXQgY2xvc2VseS4gWW91IHdpbGwgZ2V0IHJlbGllZiB3aGVuIHlvdSBwcmFjdGljZSBpdCByZWd1bGFybHkuIEFzIGl0IGtlZXBzIGF3YXkgdGhlIGFpbG1lbnRzIGZyb20gb3VyIG1pbmQgYW5kIGJvZHkuIEluIGFkZGl0aW9uLCB3aGVuIHdlIHByYWN0aWNlIHNldmVyYWwgYXNhbmFzIGFuZCBwb3N0dXJlcywgaXQgc3RyZW5ndGhlbnMgb3VyIGJvZHkgYW5kIGdpdmVzIHVzIGEgZmVlbGluZyBvZiB3ZWxsLWJlaW5nIGFuZCBoZWFsdGhpbmVzcy4KPGJyPjxicj4KRnVydGhlcm1vcmUsIHlvZ2EgaGVscHMgaW4gc2hhcnBlbmluZyBvdXIgbWluZCBhbmQgaW1wcm92aW5nIG91ciBpbnRlbGxpZ2VuY2UuIFdlIGNhbiBhY2hpZXZlIGEgaGlnaGVyIGxldmVsIG9mIGNvbmNlbnRyYXRpb24gdGhyb3VnaCB5b2dhIGFuZCBhbHNvIGxlYXJuIGhvdyB0byBzdGVhZHkgb3VyIGVtb3Rpb25zLiBJdCBjb25uZWN0cyB1cyB0byBuYXR1cmUgbGlrZSBuZXZlciBiZWZvcmUgYW5kIGVuaGFuY2VzIG91ciBzb2NpYWwgd2VsbC1iZWluZy4KPGJyPjxicj4KMjFzdCBvZiBKdW5lIGlzIGNlbGVicmF0ZWQgYXMgSW50ZXJuYXRpb25hbCBEYXkgb2YgWW9nYSB3aGVyZSBwZW9wbGUgYXJlIG1hZGUgYXdhcmUgb2YgdGhlIGJlbmVmaXRzIG9mIHlvZ2EuIFlvZ2EgaXMgYSBncmVhdCBnaWZ0IHRvIG1hbmtpbmQgd2hpY2ggaGVscHMgdXMga2VlcCBiZXR0ZXIgYW5kIG1haW50YWluIG91ciBoZWFsdGguIFlvdSBhbHNvIGRldmVsb3AgYSBoaWdoZXIgcGF0aWVuY2UgbGV2ZWwgd2hlbiB5b3UgcHJhY3RpY2UgeW9nYSB3aGljaCBhbHNvIGhlbHBzIGluIGtlZXBpbmcgdGhlIG5lZ2F0aXZlIHRob3VnaHRzIGF3YXkuIFlvdSBnZXQgZ3JlYXQgbWVudGFsIGNsYXJpdHkgYW5kIGJldHRlciB1bmRlcnN0YW5kaW5nLgo8YnI+PGJyPgpJbiBzaG9ydCwgeW9nYSBoYXMgc2V2ZXJhbCBiZW5lZml0cy4gRXZlcnlvbmUgbXVzdCBwcmFjdGljZSBpdCB0byBrZWVwIHRoZWlyIGhlYWx0aCBtYWludGFpbmVkIGFuZCBhbHNvIGJlbmVmaXQgZnJvbSBpdC4gSXQgaXMgdGhlIHNlY3JldCB0byBsaXZpbmcgYSBoZWFsdGh5IGFuZCBsb25nIGxpZmUgd2l0aG91dCB0aGUgdXNlIG9mIGFueSBhcnRpZmljaWFsIG1lYW5zIGxpa2UgbWVkaWNpbmVzIG9yIGFueSBvdGhlciBzaG9ydGN1dHMgb2YgYW55IGtpbmQuCjxicj4KPGJyPgogPGJyPgogPGJyPgo8c3Bhbj5iLiBIb3cgY2FuIGEgcGVyc29uIGJlIG1lbnRhbGx5IGhlYWx0aHk/IFByb3ZpZGUgYWJvdXQgdGVuIHRpcHMgdG8gYSBwZXJzb24gdG8gc3RheSBtZW50YWxseSBmcmVzaCBhbmQgaGVhbHRoeS48L3NwYW4+Cjxicj4KPGJyPgpBbiBpbXBvcnRhbnQgcGFydCBvZiBrZWVwaW5nIGZpdCBhbmQgaGVhbHRoeSBpcyB0byB0YWtlIGNhcmUgb2YgeW91ciBvd24gbWVudGFsIGhlYWx0aC4gVGhlcmUgYXJlIHBsZW50eSBvZiB0aGluZ3MgeW91IGNhbiBkbyB0byBoZWxwIG1ha2Ugc3VyZSB5b3Uga2VlcCB5b3Vyc2VsZiBtZW50YWxseSBoZWFsdGh5LiBTb21lIG9mIHRoZSB0aXBzIHRvIGtlZXAgdGhlIG1pbmQgaGVhbHRoeSBhcmUgYXMgZm9sbG93czoKPGJyPjxicj4KU29tZSBvZiB0aGUgdGlwcyB0byBrZWVwIHRoZSBtaW5kIGhlYWx0aHkgYXJlIGFzIGZvbGxvd3M6IDxicj4KMS4JR2V0IHBsZW50eSBvZiBzbGVlcAo8YnI+CjIuCUVhdCB3ZWxsCjxicj4KMy4JVGFrZSBhIGJyZWFrCjxicj4KNC4JQXZvaWQgYWxjb2hvbCwgc21va2luZyBhbmQgZHJ1Z3MKPGJyPgo1LglHZXQgcGxlbnR5IG9mIHN1bmxpZ2h0Cjxicj4KNi4JTWFuYWdlIHN0cmVzcwo8YnI+CjcuCUFjdGl2aXR5IGFuZCBleGVyY2lzZQo8YnI+CjguCURvIHNvbWV0aGluZyB5b3UgZW5qb3kKPGJyPgo5LglDb25uZWN0IHdpdGggb3RoZXJzIGFuZCBiZSBzb2NpYWJsZQo8YnI+CjEwLglCZSBhIHRvdXJpc3QgaW4geW91ciBvd24gdG93bgo8YnI+Cjxicj4KPGJyPgo8YnI+Cjxicj4KPGgzPkdyYW1tYXI8L2gzPgo8YnI+CjxzcGFuPkIuIENvbXBsZXRlIHRoZSBzZW50ZW5jZXMgYnkgY2hvb3NpbmcgdGhlIGNvcnJlY3QgdmVyYnMgZnJvbSB0aGUgYnJhY2tldHMuPC9zcGFuPgo8YnI+Cjxicj4KYS4gRXZlcnlvbmUgPGI+PHU+aGFzPC91PjwvYj4gKGhhcy9oYXZlKSBwcm9ibGVtcyBpbiB0aGVpciBsaWZlLiBDb3VudHJpZXMgYWxzbyA8Yj48dT5oYXZlPC91PjwvYj4gKGhhcy9oYXZlKSBwcm9ibGVtcywgYW5kIHNvIDxiPjx1PmRvZXM8L3U+PC9iPiAoZG8vZG9lcykgdGhlIHdvcmxkLiBPbmUgb2YgdGhlIGdyZWF0ZXN0IHByb2JsZW1zIDxiPjx1PmlzPC91PjwvYj4gKGlzL2FyZSkgdGhlIGdyb3dpbmcgcG9wdWxhdGlvbi4gVGhlIHBvcHVsYXRpb24gaW4gc29tZSBjb3VudHJpZXMgPGI+PHU+aXM8L3U+PC9iPiAoaXMvYXJlKSBodWdlLgo8YnI+Cjxicj4KPGJyPgpiLiBBIG51bWJlciBvZiBteSBmcmllbmRzIDxiPjx1PmxvdmU8L3U+PC9iPiAobG92ZS9sb3ZlcykgcmlkaW5nIGJpY3ljbGVzLCBidXQgbmVpdGhlciBteSBicm90aGVyIG5vciBteSBzaXN0ZXIgPGI+PHU+b3duczwvdT48L2I+IChvd24vb3ducykgYSBjeWNsZS4gQXQgNCBvJnJzcXVvO2Nsb2NrLCBlaXRoZXIgbXkgbW90aGVyIG9yIGZhdGhlciA8Yj48dT5pczwvdT48L2I+IChpcy9hcmUpIGNvbWluZyB0byBwaWNrIG1lIHVwIGluIGEgY2FyLgo8YnI+Cjxicj4KPGJyPgpjLiBUaGUgcGFpciBvZiBzaG9lcyBvbiB0aGUgZmxvb3IgPGI+PHU+aXM8L3U+PC9iPiAoaXMvYXJlKSBtaW5lLiBUaGUgc2hvZXMgPGI+PHU+d2VyZTwvdT48L2I+ICh3YXMvIHdlcmUpIG1hZGUgaW4gQ2hpbmEuIFRoZSB0aHJlZSB0aG91c2FuZCBydXBlZXMgSSBzcGVudCBvbiB0aGVtIDxiPjx1PndhczwvdT48L2I+ICh3YXMvd2VyZSkgd29ydGggaXQuCjxicj4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+Qy4gQXJlIHRoZSBmb2xsb3dpbmcgc2VudGVuY2VzIGNvcnJlY3Q/IElmIG5vdCwgY29ycmVjdCB0aGVtLjwvc3Bhbj4KPGJyPgo8YnI+CjxzcGFuPmEuIEV2ZXJ5b25lIG9mIHRoZSB3b3JrZXJzIHJlY2VpdmUgdGhlIHNhbWUgYmVuZWZpdHMuPC9zcGFuPgo8YnI+CkV2ZXJ5b25lIG9mIHRoZSB3b3JrZXJzIHJlY2VpdmVzIHRoZSBzYW1lIGJlbmVmaXRzLgo8YnI+Cjxicj4KPHNwYW4+Yi4gVGhlcmUgaXMgdHdvIGdlcmJpbHMgaW4gbXkgYmF0aHJvb20uPC9zcGFuPgo8YnI+ClRoZXJlIGFyZSB0d28gZ2VyYmlscyBpbiBteSBiYXRocm9vbS4KPGJyPgo8YnI+CjxzcGFuPmMuIEJvdGggb2YgbXkgZnJpZW5kcyBsaXZlIGluIEthdGhtYW5kdS48L3NwYW4+Cjxicj4KQm90aCBvZiBteSBmcmllbmRzIGxpdmUgaW4gS2F0aG1hbmR1Lgo8YnI+Cjxicj4KPHNwYW4+ZC4gU2Npc3NvcnMgaXMgdXNlZCB0byBoYXZlIG91ciBoYWlyIGN1dC48L3NwYW4+Cjxicj4KU2Npc3NvcnMgYXJlIHVzZWQgdG8gaGF2ZSBvdXIgaGFpciBjdXQuCjxicj4KPGJyPgo8c3Bhbj5lLiBZb3UgYW5kIHlvdXIgZnJpZW5kcyBhcmUgd2VsY29tZSB0byBqb2luIHVzLjwvc3Bhbj4KPGJyPgpZb3UgYW5kIHlvdXIgZnJpZW5kcyBhcmUgd2VsY29tZSB0byBqb2luIHVzLgo8YnI+Cjxicj4KPHNwYW4+Zi4gQXJlIHRoZSBuZXdzIG9uIGF0IGZpdmUgb3Igc2l4Pzwvc3Bhbj4KPGJyPgpJcyB0aGUgbmV3cyBvbiBhdCBmaXZlIG9yIHNpeD8KPGJyPgo8YnI+CjxzcGFuPmcuIFRoZSBtYW4gd2l0aCBhbGwgaGlzIGNoaWxkcmVuIGxpdmUgaW4gdGhlIGNpdHkuPC9zcGFuPgo8YnI+ClRoZSBtYW4gd2l0aCBhbGwgaGlzIGNoaWxkcmVuIGxpdmVzIGluIHRoZSBjaXR5Lgo8YnI+Cjxicj4KPHNwYW4+aC4gTWF0aGVtYXRpY3MgYXJlIFByZW0ncyBmYXZvdXJpdGUgc3ViamVjdCwgd2hpbGUgRWNvbm9taWNzIGlzIEFsaW5hJ3MgZmF2b3VyaXRlIHN1YmplY3QuPC9zcGFuPgo8YnI+Ck1hdGhlbWF0aWNzIGlzIFByZW0ncyBmYXZvdXJpdGUgc3ViamVjdCwgd2hpbGUgRWNvbm9taWNzIGlzIEFsaW5hJ3MgZmF2b3VyaXRlIHN1YmplY3QuCgo8YnI+PGJyPjxicj48YnI+CjxzcGFuPklmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tPC9zcGFuPgoKPGJyPjxicj4KPGJyPgo8L2JvZHk+CjwvaHRtbD4=", "7": "", "8": "", "9": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+VW5pdCA5CiAgICAgICAgPGJyPgogICAgICAgIERlbW9jcmFjeSBhbmQgSHVtYW4gUmlnaHRzPC9jZW50ZXI+PGJyPgogICAgPGJyPgogICAgPGgzPldheXMgd2l0aCB3b3JkczwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BLiBGaW5kIHRoZSB3b3JkcyBpbiB0aGUgdGV4dCB0aGF0IG1lYW4gdGhlIHNhbWUgYXMgdGhlIGZvbGxvd2luZy4gVGhlIGZpcnN0IGxldHRlcnMgYXJlIGdpdmVuLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIGEuIHRoZSBzeXN0ZW0gdGhhdCBjb21wbGV0ZWx5IHNlcGFyYXRlZCBibGFjayBwZW9wbGUgZnJvbSB3aGl0ZSBwZW9wbGUgKDxiPmFwYXJ0aGVpZDwvYj4pCiAgICA8YnI+PGJyPgogICAgYi4gZm9ybWFsIG9iamVjdGlvbiAoPGI+cHJvdGVzdDwvYj4pCiAgICA8YnI+PGJyPgogICAgYy4gYW4gZXRobmljYWwgZ3JvdXAgb2YgcGVvcGxlICg8Yj50cmliZTwvYj4pCiAgICA8YnI+PGJyPgogICAgZC4gYW4gYWN0IHVuZGVydGFrZW4gdG8gYWNoaWV2ZSBhIHNldCBnb2FsICg8Yj5jYW1wYWlnbjwvYj4pCiAgICA8YnI+PGJyPgogICAgZS4gdGhlIGZvcm1hbCBiZWdpbm5pbmcgb2YgYW55IG1vdmVtZW50ICg8Yj5pbmF1Z3VyYXRpb248L2I+KQogICAgPGJyPjxicj4KICAgIGYuIGEgc3Ryb25nIGZlZWxpbmcgb2YgZXhjaXRlbWVudCBhbmQgaGFwcGluZXNzICg8Yj5leGhpbGFyYXRpb248L2I+KQogICAgPGJyPjxicj4KICAgIGcuIGJlaW5nIHNldCBmcmVlIGZyb20gbGVnYWwsIHNvY2lhbCwgb3IgcG9saXRpY2FsIHJlc3RyaWN0aW9ucyAoPGI+ZW1hbmNpcGF0aW9uPC9iPikKICAgIDxicj48YnI+PGJyPjxicj4KICAgIDxzcGFuPkIuIEZpbmQgdGhlc2Ugd29yZHMgaW4gYSBkaWN0aW9uYXJ5IGFuZCB3cml0ZSB0aGVpciBtZWFuaW5ncyBhcyB0aGV5IGFyZSB1c2VkIGluIHRoZSB0ZXh0Ljwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmEuIGxpYmVydHk8L3NwYW4+CiAgICA8YnI+CiAgICB0aGUgc3RhdGUgb2YgYmVpbmcgZnJlZSB3aXRoaW4gc29jaWV0eSBmcm9tIG9wcHJlc3NpdmUgcmVzdHJpY3Rpb25zIGltcG9zZWQgYnkgYXV0aG9yaXR5IG9uIG9uZSdzIHdheSBvZiBsaWZlLAogICAgYmVoYXZpb3VyLCBvciBwb2xpdGljYWwgdmlld3MuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+Yi4gY29uZmxpY3Q8L3NwYW4+CiAgICA8YnI+CiAgICBhIHNlcmlvdXMgZGlzYWdyZWVtZW50IG9yIGFyZ3VtZW50LCB0eXBpY2FsbHkgYSBwcm90cmFjdGVkIG9uZS4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5jLiBpZGVvbG9neTwvc3Bhbj4KICAgIDxicj4KICAgIGEgc3lzdGVtIG9mIGlkZWFzIGFuZCBpZGVhbHMsIGVzcGVjaWFsbHkgb25lIHdoaWNoIGZvcm1zIHRoZSBiYXNpcyBvZiBlY29ub21pYyBvciBwb2xpdGljYWwgdGhlb3J5IGFuZCBwb2xpY3kuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+ZC4gb3BwcmVzc2lvbjwvc3Bhbj4KICAgIDxicj4KICAgIHByb2xvbmdlZCBjcnVlbCBvciB1bmp1c3QgdHJlYXRtZW50IG9yIGV4ZXJjaXNlIG9mIGF1dGhvcml0eS4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5lLiBwcml2aWxlZ2U8L3NwYW4+CiAgICA8YnI+CiAgICBhIHNwZWNpYWwgcmlnaHQsIGFkdmFudGFnZSwgb3IgaW1tdW5pdHkgZ3JhbnRlZCBvciBhdmFpbGFibGUgb25seSB0byBhIHBhcnRpY3VsYXIgcGVyc29uIG9yIGdyb3VwLgogICAgPGJyPjxicj4KICAgIDxzcGFuPmYuIGRpZ25pdHk8L3NwYW4+CiAgICA8YnI+CiAgICB0aGUgc3RhdGUgb3IgcXVhbGl0eSBvZiBiZWluZyB3b3J0aHkgb2YgaG9ub3VyIG9yIHJlc3BlY3QuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+Zy4gc3VycmVuZGVyPC9zcGFuPgogICAgPGJyPgogICAgc3RvcCByZXNpc3RpbmcgdG8gYW4gZW5lbXkgb3Igb3Bwb25lbnQgYW5kIHN1Ym1pdCB0byB0aGVpciBhdXRob3JpdHkuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+aC4gcmVjb25jaWxpYXRpb248L3NwYW4+CiAgICA8YnI+CiAgICB0aGUgcmVzdG9yYXRpb24gb2YgZnJpZW5kbHkgcmVsYXRpb25zLgogICAgPGJyPjxicj48YnI+PGJyPgogICAgPHNwYW4+Qy4gVGhlICdkJyBvciAnZWQnIGluIHRoZSBmb2xsb3dpbmcgdmVyYnMgaGF2ZSBkaWZmZXJlbnQgcHJvbnVuY2lhdGlvbi4gUHV0IHRoZXNlIHZlcmJzIGluIHRoZSBjb3JyZWN0CiAgICAgICAgYm94Ljwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxpPlthc2tlZCwga2lsbGVkLCBtaXNzZWQsIGVuZGVkLCBkZWNpZGVkLCB3YXNoZWQsIHZpc2l0ZWQsIGxhc3RlZCwgd2F0Y2hlZCwgcGlja2VkLCBzbWlsZWQsIGZpeGVkLCB3YWxrZWQsIGJsZXNzZWQsCiAgICAgICAgYnJ1c2hlZCwgc3RvcHBlZCwgd2FudGVkLCByZWFjaGVkLCBsYXVnaGVkLCBlbmpveWVkXTwvaT4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPi90Lzwvc3Bhbj4KICAgIDxicj4KICAgIGFza2VkLCBtaXNzZWQsIHdhc2hlZCwgd2F0Y2hlZCwgcGlja2VkLCBmaXhlZCwgd2Fsa2VkLCBibGVzc2VkICh2KSwgYnJ1c2hlZCwgc3RvcHBlZCwgcmVhY2hlZCwgbGF1Z2hlZAogICAgPGJyPjxicj4KICAgIDxzcGFuPi9kLzwvc3Bhbj4KICAgIDxicj4KICAgIGtpbGxlZCwgc21pbGVkCiAgICA8YnI+PGJyPgogICAgPHNwYW4+LyYjNjE4O2QvPC9zcGFuPgogICAgPGJyPgogICAgZW5kZWQsIGRlY2lkZWQsIHZpc2l0ZWQsIGxhc3RlZCwgYmxlc3NlZCAoYWRqKSwgd2FudGVkLCBlbmpveWVkCiAgICA8YnI+PGJyPjxicj48YnI+CiAgICA8c3Bhbj5ELiBQdXQgdGhlc2Ugbm91bnMgaW50byB0aGUgY29ycmVjdCBib3ggYWNjb3JkaW5nIHRvIHRoZSBwcm9udW5jaWF0aW9uIG9mIHRoZSBwbHVyYWwgc3VmZml4OiBzL2VzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxpPltjYXRzLCBkb2dzLCBob3JzZXMsIGhvdXNlcywgYm9va3MsIHJvb2ZzLCBib3lzLCByb29tcywgZ2lybHMsIG5vaXNlcywgc2hvcHMsIHRyZWVzLCBwYWdlcywgYmFiaWVzLCBiZW5jaGVzLAogICAgICAgIGNsYXNzZXNdPC9pPgogICAgPGJyPgogICAgPHNwYW4+L3MvPC9zcGFuPgogICAgPGJyPgogICAgY2F0cywgYm9va3MsIHJvb2ZzLCBzaG9wcwogICAgPGJyPjxicj4KICAgIDxzcGFuPi96Lzwvc3Bhbj4KICAgIDxicj4KICAgIGRvZ3MsIGJveXMsIHJvb21zLCBnaXJscywgdHJlZXMsCiAgICA8YnI+PGJyPgogICAgPHNwYW4+LyYjNjE4O3ovPC9zcGFuPgogICAgPGJyPgogICAgaG9yc2VzLCBob3VzZXMsIG5vaXNlcywgcGFnZXMsIGJhYmllcywgYmVuY2hlcywgY2xhc3NlcwogICAgPGJyPjxicj48YnI+PGJyPjxicj4KICAgIDxoMz5Db21wcmVoZW5zaW9uPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkFuc3dlciB0aGVzZSBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2hhdCB3ZXJlIHRoZSByZXN0cmljdGlvbnMgaW1wb3NlZCBvbiB0aGUgQmxhY2tzIGluIFNvdXRoIEFmcmljYT88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgcmVzdHJpY3Rpb25zIGltcG9zZWQgb24gdGhlIEJsYWNrcyBpbiBTb3V0aCBBZnJpY2Egd2VyZSBSYWNpYWwgc2VncmVnYXRpb24sIGFuZCBwb2xpdGljYWwgYW5kIGVjb25vbWljCiAgICBkaXNjcmltaW5hdGlvbi4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5iLiBXaHkgd2FzIE1hbmRlbGEgYXJyZXN0ZWQ/PC9zcGFuPgogICAgPGJyPgogICAgTWFuZGVsYSB3YXMgYXJyZXN0ZWQgYmVjYXVzZSBoZSB3YXMgY2hhcmdlZCB3aXRoIG9yZ2FuaXppbmcgYW4gYXJtZWQgd2luZyBvZiB0aGUgQWZyaWNhbiBOYXRpb25hbCBDb25ncmVzcyAoQU5DKS4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5jLiBIb3cgZGlkIGhlIGRlc2NyaWJlIHJhY2lzbSBhbmQgcmFjaWFsIG9wcHJlc3Npb24/PC9zcGFuPgogICAgPGJyPgogICAgSGUgZGVzY3JpYmVkIHJhY2lzbSBhbmQgcmFjaWFsIG9wcHJlc3Npb24gYXMgdGhlIHBlcm5pY2lvdXMgaWRlb2xvZ3kgYW5kIHByYWN0aWNlLgogICAgPGJyPjxicj4KICAgIDxzcGFuPmQuIFdoeSBkaWQgaGUgdGhhbmsgYWxsIHRoZSBpbnRlcm5hdGlvbmFsIGd1ZXN0cz88L3NwYW4+CiAgICA8YnI+CiAgICBIZSB0aGFua2VkIGFsbCB0aGUgaW50ZXJuYXRpb25hbCBndWVzdHMgZm9yIGNvbWluZyB0byB0YWtlIHBvc3Nlc3Npb24gYWJvdXQgcGVhY2UgYW5kIGp1c3RpY2Ugd2l0aCB0aGUgcGVvcGxlIG9mIGhpcwogICAgY291bnRyeS4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5lLiBXaHkgZGlkIGhlIHRoaW5rIHRoYXQgcGVvcGxlIGluIGhpcyBjb3VudHJ5IGhhZCBhY2hpZXZlZCBwb2xpdGljYWwgZW1hbmNpcGF0aW9uPzwvc3Bhbj4KICAgIDxicj4KICAgIEhlIHRob3VnaHQgdGhhdCBwZW9wbGUgaW4gaGlzIGNvdW50cnkgaGFkIGFjaGlldmVkIHBvbGl0aWNhbCBlbWFuY2lwYXRpb24gdG8gbGliZXJhdGUgdGhlbXNlbHZlcyBmcm9tIHRoZSBjb250aW51aW5nCiAgICBib25kYWdlIG9mIHBvdmVydHksIGRlcHJpdmF0aW9uLCBzdWZmZXJpbmcsIGdlbmRlciBhbmQgb3RoZXIgZGlzY3JpbWluYXRpb24uCiAgICA8YnI+PGJyPgogICAgPHNwYW4+Zi4gV2hhdCBpcyB0aGUgbWFpbiBwb2ludCBvZiBNYW5kZWxhJ3Mgc3BlZWNoPzwvc3Bhbj4KICAgIDxicj4KICAgIFRoZSBtYWluIHBvaW50IG9mIE1hbmRlbGHigJlzIHNwZWVjaCBpcyB0aGF0IHBlb3BsZSBvZiBTb3V0aCBBZnJpY2Egc2hvdWxkIGJ1aWxkIGEgc29jaWV0eSB3aGVyZSB0aGVyZSB3aWxsIGJlCiAgICBqdXN0aWNlLCBwZWFjZSBhbmQgZXF1YWxpdHkgZm9yIGFsbCBwZW9wbGVzLgogICAgPGJyPjxicj48YnI+PGJyPjxicj4KICAgIDxoMz5Dcml0aWNhbCB0aGlua2luZzwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBXaGF0IGRvZXMgTWFuZGVsYSBtZWFuIHdoZW4gaGUgc2F5cyAtIGEgcmFpbmJvdyBuYXRpb24gYXQgcGVhY2Ugd2l0aCBpdHNlbGYgYW5kIHRoZSB3b3JsZD88L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBXaGUgTWFuZGVsYSBzYXlzIC0gYSByYWluYm93IG5hdGlvbiBhdCBwZWFjZSB3aXRoIGl0c2VsZiBhbmQgdGhlIHdvcmxkIGhlIG1lYW5zIHRoYXQgU291dGggQWZyaWNhbnMgc2hvdWxkIGJ1aWxkIGEKICAgIHNvY2lldHkgd2hlcmUgYm90aCBibGFjayBhbmQgd2hpdGUgd2lsbCBiZSBhYmxlIHRvIHdhbGssIHRhbGsgd2l0aCBlYWNoIG90aGVyIHdpdGhvdXQgYW55IGZlYXIuIFdlIGtub3cgdGhhdCByYWluYm93CiAgICBpcyB0aGUgY29tYmluYXRpb24gb2Ygc2V2ZW4gZGlmZmVyZW50IGNvbG9ycy4gU28gYnkgc2F5aW5nIGEgcmFpbmJvdyBuYXRpb24gaGUgaXMgdHJ5aW5nIHRvIGNvbnZleSB1cyBhIG1lc3NhZ2UgdGhhdAogICAgd2hlbmV2ZXIgYWxsIHRoZSBwZW9wbGVzIHVuaXRlIGFzIGxpa2UgdGhlIGNvbG9ycyBpbiB0aGUgcmFpbmJvdyB0aGVuIG9ubHkgdGhlcmUgd2lsbCBiZSBwZWFjZS4KICAgIDxicj48YnI+CiAgICBJbiBTb3V0aCBBZnJpY2FucyBjdWx0dXJlcywgdGhlIHJhaW5ib3cgc3ltYm9saXplcyBob3BlIGFuZCBicmlnaHQgZnV0dXJlLiBTb3V0aCBBZnJpY2EgaXMgcmVmZXJyZWQgdG8gYSBSYWluYm93CiAgICBOYXRpb24gdG8gZGVzY3JpYmUgdGhlIHVuaXR5IG9mIHZhcmlvdXMgY3VsdHVyYWwsIHJhY2lhbCBvciBldGhuaWMgZ3JvdXBzIGluCiAgICB0aGUgY291bnRyeS4gRHVyaW5nIHRoZSBzZWdyZWdhdGlvbiBwZXJpb2QsIHBlb3BsZXMgd2VyZSBkaXZpZGVkIG9uIHRoZSBiYXNpcyBvZiBza2luIGNvbG9yLiBNYW5kZWxhIHdhbnRzCiAgICB0aGVtIHRvIGxpdmUgYW5kIHdvcmsgdG9nZXRoZXIgaW4gdW5pdHkgbGlrZSB0aGUgY29sb3JzIGluIGEgcmFpbmJvdy4gSGUgd2lzaGVkIHRoZXkgY291bGQgZm9yZ2V0IHRoZSBmZXJvY2lvdXMgYW5kCiAgICBicnV0YWwgcGFzdCBhbmQgcHV0IHRoZWlyIGhhbmQgaW4gaGFuZCB3aXRoIGVhY2ggb3RoZXIgYW5kIG1haW50YWluIGEgcGVhY2VmdWwgbmF0aW9uLgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5iLiBNYW5kZWxhIHNob3VsZCBoYXZlIGF2ZW5nZWQgdGhvc2Ugd2hvIGltcHJpc29uZWQgaGltIGZvciBzdWNoIGEgbG9uZyBwZXJpb2QuIEluc3RlYWQsIGhlIGZvbGxvd2VkIHRoZSBwYXRoCiAgICAgICAgb2YgcmVjb25jaWxpYXRpb24uIFdoeSBkbyB5b3UgdGhpbmsgaGUgZGlkIHNvPzwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIElmIE1hbmRlbGEgaGFzIGF2ZW5nZWQgdGhvc2UgaG8gaGFkIHByaXNvbmVkIGhpbSB0aGVuIGhlIHdvbid0IGJlIGFibGUgdG8gcmVhY2ggaGlzIGRlc3RpbmF0aW9uLiBNYW5kZWxhIGxlZCBoaXMKICAgIGNvdW50cnkgd2lzZWx5IGFuZCBwcm9tb3RlZCBuYXRpb25hbCByZWNvbmNpbGlhdGlvbi4gSGUgd2FzIGEgbWFuIG9mIHRydWUgd29yZHMuIEhlIGZvdWdodCBmb3IgaGlzIG93biBwZW9wbGUgZm9yIGEKICAgIGxvbmcgcGVyaW9kIGFuZCB3YXMgYWxzbyBpbXByaXNvbmVkIHdoZW4gaGUgcmFpc2VkIGhpcyB2b2ljZSBhZ2FpbnN0IHRoZSBhdXRob3JpdGllcy4gSG93ZXZlciwgYWZ0ZXIgY29taW5nIG91dCBvZgogICAgamFpbCBoZSBkaWQgbm90IGF2ZW5nZSB0aG9zZSB3aG8gaGFkIHB1dCBoaW0gaW4gdHJvdWJsZS4gQmVjYXVzZSBoZSBiZWxpZXZlZCB0aGF0IGF2ZW5nZSBhbmQgZW5taXR5IGNhdXNlIGRpc29yZGVyCiAgICBhbW9uZyBwZW9wbGUgYW5kIGJ5IGRvaW5nIHNvIGhlIHdvdWxkIGxvc2UgdGhlIHN1cHBvcnQgb2YgdGhlIG1ham9yaXR5LgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5jLiBXaHkgYW5kIGhvdyBoYXZlIHNvY2lldGllcyBzdHJ1Z2dsZWQgd2l0aCBzZWdyZWdhdGlvbiBpbiB0aGUgd29ybGQ/IERvIHlvdSBmaW5kIGFueSBldmlkZW5jZSBvZiBzZWdyZWdhdGlvbgogICAgICAgIGluIHlvdXIgc29jaWV0eT8gRGlzY3Vzcy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBTZWdyZWdhdGlvbiBpcyB0aGUgc2VwYXJhdGlvbiBvciBpc29sYXRpb24gb2YgYSByYWNlLCBjbGFzcywgb3IgZXRobmljIGdyb3VwIGJ5IGVuZm9yY2VkIG9yIHZvbHVudGFyeSByZXNpZGVuY2UgaW4gYSByZXN0cmljdGVkIGFyZWEsIGJ5IGJhcnJpZXJzIHRvIHNvY2lhbCBpbnRlcmNvdXJzZSBvciBzZXBhcmF0ZSBlZHVjYXRpb25hbCBmYWNpbGl0aWVzIG9yIGJ5IG90aGVyIGRpc2NyaW1pbmF0b3J5IG1lYW5zLiBNYW55IHBlb3BsZSBvZiB0aGUgd29ybGQgYXJlIHN0cnVnZ2xpbmcgd2l0aCBzb2NpYWwgc2VwYXJhdGlvbiBwcm9ibGVtIGluIHRoZSB3b3JsZC4gIFJhY2lhbCBzZWdyZWdhdGlvbiBpcyBvbmUgb2YgbWFueSB0eXBlcyBvZiBzZWdyZWdhdGlvbiwgd2hpY2ggY2FuIHJhbmdlIGZyb20gZGVsaWJlcmF0ZSBhbmQgc3lzdGVtYXRpYyBwZXJzZWN1dGlvbiB0aHJvdWdoIG1vcmUgc3VidGxlIHR5cGVzIG9mIGRpc2NyaW1pbmF0aW9uIHRvIHNlbGYtaW1wb3NlZCBzZXBhcmF0aW9uLiBDYXN0IHNlZ3JlZ2F0aW9uIGlzIG9uZSBvZiB0aGUgbW9zdCBjb21tb24gZm9ybXMgb2Ygc2VncmVnYXRpb24gaW4gdGhlIEhpbmR1IGN1bHR1cmUuIEFueSB0eXBlcyBvZiBzZWdyZWdhdGlvbiBjYW4gbGVhZCB0byBjaGFvcyBhbmQgdm9pbGVuY2UuCiAgICA8YnI+PGJyPgogICAgWWVzIEkgaGF2ZSBmb3VuZCB0aGUgZXZpZG5lY2VzIG9mIHNlZ3JlZ2F0aW9uIGluIG15IHNvY2lldHkuIEFsdGhvdWdoLCB0aGUgTmVwYWxlc2UgQ29uc3RpdHV0aW9uIExhdyBkb2VzbiZyc3F1bzt0IGFsbG93IGFueSBzZWdyZWdhdGlvbiBpbiB0ZXJtcyBvZiByZWxpZ2lvbiwgY2FzdGUgYW5kIGV0aG5pY2l0eSBidXQgc3RpbGwgaXQgaXMgcHJldmFsZW50IGluIG91ciBzb2NpZXR5LiBIb3dldmVyLCBzaW5jZSB0aGUgdW5pZmljYXRpb24gb2YgTmVwYWwgaW4gdGhlIDE4dGggY2VudHVyeSwgTmVwYWwncyB2YXJpb3VzIG5vbi1IaW5kdSBldGhuaWMgbmF0aW9uYWxpdGllcyBhbmQgdHJpYmVzLCBwcmV2aW91c2x5IGNhbGxlZCAiTWF0d2FsaXMiIChhbGNvaG9sLWRyaW5rZXJzKSBhbmQgbm93IHRlcm1lZCBhcyAiQWRpdmFzaS9KYW5hamF0aSIgKGluZGlnZW5vdXMvbmF0aW9uYWxpdGllcyksIGhhdmUgYmVlbiBpbmNvcnBvcmF0ZWQgd2l0aGluIHRoZSBjYXN0ZSBoaWVyYXJjaHkgdG8gdmFyeWluZyBkZWdyZWVzIG9mIHN1Y2Nlc3MuIERlc3BpdGUgdGhlIGZvcmNlZnVsIGludGVncmF0aW9uIGJ5IHRoZSBzdGF0ZSBpbnRvIHRoZSBwYW4tSGluZHUgc29jaWFsIHN0cnVjdHVyZSwgdGhlIHRyYWRpdGlvbmFsbHkgbm9uLUhpbmR1IGdyb3VwcyBhbmQgdHJpYmVzIGRvIG5vdCBuZWNlc3NhcmlseSBhZGhlcmUgdG8gdGhlIGN1c3RvbXMgYW5kIHByYWN0aWNlcyBvZiB0aGUgY2FzdGUgc2VncmVnYXRpb24uCgogICAgPGJyPjxicj48YnI+PGJyPjxicj4KCiAgICA8aDM+V3JpdGluZzwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBOZXBhbCBoYXMgdG9wc3ktdHVydnkgcG9saXRpY2FsIGhpc3RvcnkuIE1hbnkgY2hhbmdlcyBoYXZlIGJlZW4gb2JzZXJ2ZWQgaW4gZGlmZmVyZW50IHRpbWVzLiBXcml0ZSBhIHNob3J0CiAgICAgICAgYmlvZ3JhcGh5IG9mIGFueSBOZXBhbGkgZnJlZWRvbSBmaWdodGVyIGluY29ycG9yYXRpbmcgdGhlIGNoYW5nZXMgYnJvdWdodCB1bmRlciBoaXMvaGVyIGxlYWRlcnNoaXAuPC9zcGFuPgogICAgPGJyPjxicj4KICAgIDxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtd2VpZ2h0OiBib2xkOyI+R2FuZXNoIE1hbiBTaW5naDwvcD4KICAgIDxicj4KICAgIEdhbmVzaCBNYW4gU2luZ2ggd2FzIGJvcm4gb24gTm92ZW1iZXIgOSwgMTkxNSBhbmQgd2FzIGNvbW1hbmRlciBvZiB0aGUgcG9wdWxhciAxOTkwIEphbmFhbmRvbGFuLiBTaW5naCB3YXMgYWxzbyBvbmUKICAgIG9mIHRoZSBtYWluIGxlYWRlcnMgb2YgdGhlIE5lcGFsaSBDb25ncmVzcyBtb3ZlbWVudCBvZiAxOTUxLCB3aGljaCBvdmVydGhyZXcgdGhlIFJhbmEgcmVnaW1lLiBNb3JlIHRoYW4gYW55dGhpbmcKICAgIGVsc2UsIEdhbmVzaCBNYW4gd2FzIGEgcmViZWwgYW5kIGEgZnJlZWRvbSBmaWdodGVyLiBIZSB3YXMgYSBwb3B1bGFyIGhlcm8gYW5kIGhpcyBleHBsb2l0cyBhcmUgbGVnZW5kYXJ5LiBIZSB3YXMgYQogICAgbWFuIG9mIHNtYWxsIHByb3BvcnRpb25zIGJ1dCBjaGFyaXNtYXRpYywgZmVhcmxlc3MsIGFuZCBwaHlzaWNhbGx5IHZlcnkgc3Ryb25nLiBIZSB3YXMgbmV2ZXIgYWZyYWlkIG9mIHRha2luZyByaXNrcwogICAgaW4gaGlzIHBvbGl0aWNhbCBjYXJlZXIuIEhlIHdhcyBhIHN0cmFpZ2h0Zm9yd2FyZCBhbmQgZnJhbmsgbGVhZGVyIGluIGRlYWxpbmcgd2l0aCBhbGwuCgogICAgPGJyPjxicj4KCiAgICBHYW5lc2ggTWFuIHdhcyBhIHJhcmUgYnJlZWQgYW1vbmdzdCBOZXBhbGkgcG9saXRpY2lhbnPigJRhIG1hbiBvZiBpbnRlZ3JpdHkuIEhlIGRlbW9uc3RyYXRlZCBoaXMgZ3JlYXRuZXNzIHRocm91Z2ggaGlzCiAgICBsZWFkZXJzaGlwLCByaXNpbmcgYWJvdmUgcGV0dHkgcGVyc29uYWwgaW50ZXJlc3RzLiBSZWNvZ25pc2luZyBoaXMgb3V0c3RhbmRpbmcgY29udHJpYnV0aW9uIHRvIHRoZSBmaWVsZCBvZgogICAgZGVtb2NyYWN5IGFuZCBodW1hbiByaWdodHMsIEdhbmVzaCBNYW4gd2FzIGhvbm9yZWQgYnkgdGhlIFVuaXRlZCBOYXRpb25zIHdpdGggdGhlIOKAmEh1bWFuIFJpZ2h0cyBBd2FyZOKAmSBpbiAxOTkzLiBIZQogICAgd2FzIHRoZSBmaXJzdCBzdGF0ZXNtYW4gZnJvbSBTb3V0aCBBc2lhIHRvIHJlY2VpdmUgdGhpcyBwcmVzdGlnaW91cyBhd2FyZC4gSGUgYWxzbyByZWNlaXZlZCB0aGUg4oCYVW5pdGVkIFN0YXRlcyBQZWFjZQogICAgUnVuIFByaXpl4oCZIGluIDE5OTAgZm9yIGhpcyBjb250cmlidXRpb24gdG8gcGVhY2UgaW4gTmVwYWwgYW5kIHRoZSB3b3JsZC4gSGUgd2FzIGFsc28gZGVjb3JhdGVkIHdpdGggdGhlIOKAmFUgVGhhbnQKICAgIFBlYWNlIEF3YXJk4oCZLiBIZSBoYXMgYmVjb21lIGltbW9ydGFsaXNlZCBhcyBhIGdyZWF0IGxlYWRlciB0aGF0IHRoZSBuYXRpb24gYW5kIGl0cyBjaXRpemVucywgd2l0aG91dCBhbnkgcG9saXRpY2FsCiAgICBiYXJyaWVycywgZmVlbCBwcm91ZCBvZi4gTm8gb3RoZXIgbmF0aW9uYWwgbGVhZGVyIGhhcyBiZWVuIGFibGUgdG8gZmlsbCB0aGUgcG9saXRpY2FsIHZhY3V1bSBhZnRlciBoaXMgZGVhdGguCiAgICA8YnI+PGJyPjxicj48YnI+PGJyPgogICAgPGgzPkdyYW1tYXI8L2gzPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Qi4gQ29tcGxldGUgdGhlIHNlbnRlbmNlcyB3aXRoIHNob3VsZCBvciBzaG91bGRuJ3QuIFVzZSBvbmUgb2YgdGhlc2UgdmVyYnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPGk+W2RyaW5rLCB2aXNpdCwgbGVhdmUsIHJvYW0sIHF1aXRdPC9pPgogICAgPGJyPjxicj4KICAgIGEuIFlvdSBoYXZlIHJlYWxseSBkb25lIGEgd29uZGVyZnVsIGpvYi4gSSByZWNvbW1lbmQgeW91IDxiPjx1PnNob3VsZG4mcnNxdW87dCBsZWF2ZTwvdT48L2I+IGl0LgogICAgPGJyPjxicj4KICAgIGIuIFRoYXQncyBhIHZlcnkgZGFuZ2Vyb3VzIGFyZWEuIFRvdXJpc3RzIDxiPjx1PnNob3VsZG4mcnNxdW87dCB2aXNpdDwvdT48L2I+IHRoZXJlLgogICAgPGJyPjxicj4KICAgIGMuIEknbSBnb2luZyB0byBiZSBsYXRlLiBEbyB5b3UgdGhpbmsgSSA8Yj48dT5zaG91bGQgbGVhdmU8L3U+PC9iPiBub3c/CiAgICA8YnI+PGJyPgogICAgZC4gQ2hpbGRyZW4gPGI+PHU+c2hvdWxkbiZyc3F1bzt0IGRyaW5rPC91PjwvYj4gc3VnYXJ5IGRyaW5rcy4gSXQncyBub3QgdmVyeSBoZWFsdGh5LgogICAgPGJyPjxicj4KICAgIGUuIEkgaGF2ZSBsb3RzIG9mIGhvbWV3b3JrLiBJIDxiPjx1PnNob3VsZG4mcnNxdW87dCByb2FtPC91PjwvYj4gaGVyZSBhbmQgdGhlcmUgdG9kYXkuCiAgICA8YnI+PGJyPjxicj48YnI+CiAgICA8c3Bhbj5DLiBQdXQgaW4gaGFkIGJldHRlciBvciBzaG91bGQuPC9zcGFuPgogICAgPGJyPjxicj4KICAgIGEuIEkgdGhpbmsgeW91IDxiPjx1PnNob3VsZDwvdT48L2I+IGxlYXJuIEVuZ2xpc2ggdG8gZW5yb2xsIGEgdW5pdmVyc2l0eSBjb3Vyc2UuCiAgICA8YnI+PGJyPgogICAgYi4gSXQncyBhIGdyZWF0IGZpbG0uIFlvdSA8Yj48dT5zaG91bGQ8L3U+PC9iPiBnbyBhbmQgc2VlIGl0LgogICAgPGJyPjxicj4KICAgIGMuIEkgaGF2ZSB0byBtZWV0IG15IGZyaWVuZCBpbiB0ZW4gbWludXRlcy4gSSA8Yj48dT5oYWQgYmV0dGVyPC91PjwvYj4gZ28gbm93IG9yIEknbGwgYmUgbGF0ZS4KICAgIDxicj48YnI+CiAgICBkLiBUaGVzZSBiaXNjdWl0cyBhcmUgZGVsaWNpb3VzLiBZb3UgPGI+PHU+c2hvdWxkPC91PjwvYj4gdHJ5IG9uZS4KICAgIDxicj48YnI+CiAgICBlLiBXZSA8Yj48dT5oYWQgYmV0dGVyPC91PjwvYj4gZ2V0IHRvIHRoZSBhaXJwb3J0IGJ5IDIgcG0gb3IgZWxzZSB3ZSBtYXkgbWlzcyB0aGUgZmxpZ2h0LgogICAgPGJyPjxicj4KICAgIGYuIFdoZW4gcGVvcGxlIGFyZSBkcml2aW5nLCB0aGV5IDxiPjx1PnNob3VsZDwvdT48L2I+IGtlZXAgdGhlaXIgZXllcyBvbiB0aGUgcm9hZC4KICAgIDxicj48YnI+CiAgICBnLiBJIDxiPjx1PnNob3VsZDwvdT48L2I+IGdldCB1cCBlYXJseSB0b21vcnJvdy4gSSd2ZSBnb3QgYSBsb3QgdG8gZG8uCiAgICA8YnI+PGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+SWYgeW91IGhhdmUgYW55IHN1Z2dlc3Rpb25zIG9yIGZlZWRiYWNrcywgcGxlYXNlIHdyaXRlIHRvIHVzIGF0IHBsdXMyaGVscEBnbWFpbC5jb208L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+PGJyPgo8L2JvZHk+Cgo8L2h0bWw+", "10": "", "11": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "12": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "13": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "14": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "15": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "16": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "17": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "18": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "19": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "20": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}, "ss": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "", "7": ""}, "poems": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPkRvYzwvdGl0bGU+CiAgICA8c2NyaXB0PgogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvbnRleHRtZW51IiwgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB9LCBmYWxzZSk7CiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiY29weSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgLy8gQ2hhbmdlIHRoZSBjb3BpZWQgdGV4dCBpZiB5b3Ugd2FudAogICAgICAgICAgICBldnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCJ0ZXh0L3BsYWluIiwgIkNvcHlpbmcgaXMgbm90IGFsbG93ZWQgb24gdGhpcyB3ZWJwYWdlIik7CiAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlIGRlZmF1bHQgY29weSBhY3Rpb24KICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgPC9zY3JpcHQ+CiAgICA8c3R5bGU+CiAgICAgICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9T3BlbitTYW5zOndnaHRANjAwJmRpc3BsYXk9c3dhcCcpOwogICAgICAgIC8qIE5PIFNFTEVDVCArIEhJR0hMSUdIVCBDT0xPUiAqLwogICAgICAgICogewogICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIH0KICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KICAgICAgICAqOjotbW96LXNlbGVjdGlvbiB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IG5vbmU7CiAgICAgICAgfQogICAgICAgIC8qIHN0eWxpbmcgdGV4dCBjb250ZW50ICovCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0cHg7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMTVweDsKICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTVweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDIzcHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGp1c3RpZnk7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOwogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIHdvcmQtc3BhY2luZzogMnB4OwogICAgICAgIH0KICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CiAgICAgICAgaDMgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OwogICAgICAgIH0KICAgICAgICBzcGFuIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgCjxicj4KICAgIDxjZW50ZXI+IFdobyBhcmUgeW91LCBsaXR0bGUgaT88L2NlbnRlcj4KPGJyPgo8aDM+VW5kZXJzdGFuZGluZyB0aGUgdGV4dDwvaDM+IAo8YnI+CjxzcGFuPkFuc3dlciB0aGUgZm9sbG93aW5nIHF1ZXN0aW9ucy48L3NwYW4+Cjxicj4KPHNwYW4+YS4gV2hvIGNhbiBiZSB0aGUgc3BlYWtlciBvZiB0aGlzIHBvZW0/PC9zcGFuPgo8YnI+CiYjMTAxNDA7ICBUaGUgc3BlYWtlciBvZiB0aGlzIHBvZW0gaXMgdGhlIHBvZXQgaGltc2VsZi4gSGVyZSBpbiB0aGlzIHBvZW0sIGhlIGhhcyBwcmVzZW50ZWQgaGltc2VsZiBhcyBhIGxpdHRsZSBib3kgcmVjYWxsaW5nIGhpcyBjaGlsZGhvb2QgZXhwZXJpZW5jZSBjb25uZWN0ZWQgd2l0aCBuYXR1cmUuCjxicj4KPGJyPgo8c3Bhbj5iLiBXaGF0IGlzICZsZHF1bztsaXR0bGUgaSZyZHF1bzsgZG9pbmc/PC9zcGFuPgo8YnI+CiYjMTAxNDA7ICdMaXR0bGUgaScgaXMgbG9va2luZyB0aGUgYmVhdXRpZnVsIGFuZCBnb2xkZW4gc2NlbmUgb2Ygc3Vuc2V0IGZyb20gYSB3aW5kb3cgYW5kIGZlZWxpbmcgYWJvdXQgdGhlIGJlYXV0aWZ1bCB3YXkgb2YgdHJhbnNmb3JtaW5nIHRoZSBkYXkgaW50byB0aGUgbmlnaHQuCjxicj4KPGJyPgo8c3Bhbj5jLiBXaGF0IGNhbiBiZSB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gJmxkcXVvO2xpdHRsZSBpJnJkcXVvOyBhbmQgdGhlIHNwZWFrZXIgb2YgdGhlIHBvZW0/PC9zcGFuPgo8YnI+CiYjMTAxNDA7ICBUaGUgImxpdHRsZSBpIiBpcyB0aGUgY2hpbGRob29kIG9mIHRoZSBzcGVha2VyIGhpbXNlbGYsIGFuZCB0aGUgc3BlYWtlciBpcyB0aGUgY2hpbGQgZ3Jvd24tdXAuIFNvIHdlIGNhbiBzYXkgdGhhdCB0aGUgImxpdHRsZSBpIiBpcyB0aGUgY2hpbGQgdmVyc2lvbiBvZiB0aGUgc3BlYWtlci4KPGJyPgo8YnI+CjxzcGFuPmQuIFdoYXQgaXMgdGhlIHNwZWFrZXIgcmVtZW1iZXJpbmcgZnJvbSBoaXMgY2hpbGRob29kIGRheXMgaW4gdGhlIHBvZW0/IDwvc3Bhbj4KPGJyPgomIzEwMTQwOyBUaGUgc3BlYWtlciBpcyByZW1lbWJlcmluZyBhbiBleHRyZW1lbHkgYmVhdXRpZnVsIHNjZW5lIG9mIG5hdHVyZSBmcm9tIGhpcyBjaGlsZGhvb2QgZGF5cyBpbiB0aGUgcG9lbS4gSGUgaXMgcmVtZW1iZXJpbmcgaGltc2VsZiBhcyBhIGxpdHRsZSBib3kgd2hvIHVzZWQgdG8gZW5qb3kgdGhlIGJlYXV0aWZ1bCBnb2xkZW4gc3Vuc2V0IGFuZCBpdHMgdHJhbnNmb3JtYXRpb24uCjxicj4KPGJyPgo8c3Bhbj5lLiBXaGF0IGF0dGl0dWRlIGRvZXMgdGhlIHNwZWFrZXIgc2VlbSB0byBoYXZlIHRvd2FyZCB0aGUgY2hpbGQgaW4gdGhlIHBvZW0/IDwvc3Bhbj4KPGJyPgomIzEwMTQwOyBUaGUgc3BlYWtlciBzZWVtcyB0byBoYXZlIGEgcG9zaXRpdmUsIG5vc3RhbGdpYyBhdHRpdHVkZSB0b3dhcmRzIHRoZSBjaGlsZC4gSGUgZmVlbHMgYSB5b3V0aGZ1bCBwcmVzZW5jZSBpbiBoaW1zZWxmIHN0aWxsIG5vdywgd2hvIGluc3BpcmVzIGhpbSBub3cgdG8gbG9vayBvdXQgYW5kIGVuam95IHRoZSBuYXR1cmUgb3V0c2lkZS4KPGJyPgo8YnI+Cjxicj4KPGJyPgo8aDM+UmVmZXJlbmNlIHRvIHRoZSBjb250ZXh0PC9oMz4gCjxicj4KPHNwYW4+YS4gV2h5IGRvIHlvdSB0aGluayBDdW1taW5ncyBoYXMgcGxhY2VkIGEgc2VtaWNvbG9uIGJldHdlZW4gdGhlIHdvcmRzIHdpbmRvdyBhbmQgYXQ/PC9zcGFuPgo8YnI+CiYjMTAxNDA7ICBJIHRoaW5rIEN1bW1pbmdzIGhhcyBwbGFjZWQgYSBzZW1pY29sb24gYmV0d2VlbiB0aGUgd29yZHMgd2luZG93IHRvIHByb3ZpZGUgYSBicmVhayBpbiB0aGUgbG9uZyBzZW50ZW5jZSB3aGlsZSBrZWVwaW5nIHRoZSB0aG91Z2h0IGZsb3dpbmcuIEluIHN1Y2ggc2l0dWF0aW9ucyBhIHNlbWljb2xvbiB3b3JrcyBzdHJvbmdlciB0aGFuIGEgY29tbWEgYXMgaW4gdGhlIHByZXNlbnQgc2VudGVuY2Ugc3RydWN0dXJlLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj5iLiBJZiB0aGUgc3BlYWtlciBpcyB0aGUgY2hpbGQgZ3Jvd24gdXAsIHdoeSBkb2VzIGhlIGFzaywgJmxkcXVvO3dobyBhcmUgeW91JnJkcXVvOz88L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhlcmUgaXMgbm8gZG91YnQgdGhhdCB0aGUgc3BlYWtlciBpcyB0aGUgY2hpbGQgZ3Jvd24gdXAuIFN0aWxsIGhlIHB1dHMgdGhlIHF1ZXN0aW9uIOKAnHdobyBhcmUgeW914oCdLiBJdCBtYXkgYmUgYmVjYXVzZSBoZSBpcyBzdHJ1Z2dsaW5nIHRvIHJlY2FsbCB0aGUgd29uZGVybWVudCBvZiBoaXMgeW91dGhmdWwgZGF5cy4gIE9yIG1heWJlLCBpdOKAmXMgaGlzIGluY3JlZHVsaXR5IHRoYXQgdGhlcmUgaXMgc3RpbGwgYSB5b3V0aGZ1bCBwcmVzZW5jZSBpbiBoaW1zZWxmIGVuam95aW5nIHRoZSBuYXR1cmUuCjxicj4KPGJyPgo8YnI+CjxzcGFuPgogICAgYy4gSW4gdGhpcyBwb2VtLCBhbiBhZHVsdCByZWZsZWN0cyBvbiB0aGUgY2hpbGRob29kIGV4cGVyaWVuY2UuIEJhc2VkIG9uIHRoYXQsIHdoYXQgbWlnaHQgYmUgdGhlIHRoZW1lCiAgICBvZiB0aGUgbGluZXM6Cjwvc3Bhbj4gPGk+CiAgICAmbGRxdW87KGFuZCBmZWVsaW5nOiB0aGF0IGlmIGRheSAvIGhhcyB0byBiZWNvbWUgbmlnaHQgLyB0aGlzIGlzIGEgYmVhdXRpZnVsCiAgICB3YXkpJnJkcXVvOz8KPC9pPgo8YnI+CiYjMTAxNDA7IEhlcmUsIGluIHRoZXNlIGxpbmVzLCB3ZSBmaW5kIHRoZSBib3kncyBmZWVsaW5nIGFib3V0IHRoZSBiZWF1dGlmdWwgc2NlbmUgb2YgTm92ZW1iZXIncyBnb2xkZW4gc3Vuc2V0LiBIZSBmZWVscyBhYm91dCB3b25kZXJmdWwgdHJhbnNpdGlvbiBvZiBuYXR1cmUgaS5lIGRheSB0byBuaWdodC4gVGh1cywgdGhlIHRoZW1lIG9mIHRoZXNlIGxpbmVzIG1pZ2h0IHJlZmVyIHRvIGRlYXRoLiBJdCBpcyBhIHRvdWNoeSB3YXkgdG8gZGVzY3JpYmUgYW4gdW53ZWxjb21lIHRyYW5zaXRpb24gZnJvbSB0aGUgam95ZnVsIHlvdXRoIHRvIHRoZSBlbmQgb2YgbGlmZS4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+ZC4gV2hhdCBpcyB0aGUgcmh5bWUgc2NoZW1lIHVzZWQgaW4gdGhlIHBvZW0/PC9zcGFuPgo8YnI+CiYjMTAxNDA7IEEgcmh5bWUgc2NoZW1lIGlzIHRoZSBwYXR0ZXJuIG9mIHNvdW5kcyB0aGF0IHJlcGVhdHMgYXQgdGhlIGVuZCBvZiBhIGxpbmUgb3Igc3RhbnphLiBUaGUgcmh5bWUgc2NoZW1lIHVzZWQgaW4gdGhlIHBvZW0gaXMgQUJBQiBhbmQgQ0RDRC4KPGJyPgo8YnI+Cjxicj4KPHNwYW4+ZS4gRXhwbGFpbiB0aGUgcHVuIGluICZsZHF1bztsaXR0bGUgaSZyZHF1bzsgdGhhdCBpcyByZWxhdGVkIHRvIHdoYXQgaGUgaXMgZG9pbmcuPC9zcGFuPgo8YnI+CiYjMTAxNDA7ICBBIHB1biBpcyB0aGUgY2xldmVyIHVzZSBvZiBhIHdvcmQgdGhhdCBoYXMgbW9yZSB0aGFuIG9uZSBtZWFuaW5nIG9yIGEgd29yZCB0aGF0IGhhdmUgZGlmZmVyZW50IG1lYW5pbmdzIGJ1dCBzb3VuZHMgdGhlIHNhbWUuIFRoZSBwdW4gaW4gJ2xpdHRsZSBpJyBpbmRpY2F0ZXMgYm90aCBhIHNwZWNpZmljIGFzcGVjdCBvZiB0aGUgcG9ldCdzIHBlcnNvbmFsaXR5LCB0aGUgY2hpbGRsaWtlIGZlZWxpbmcgb2Ygd29uZGVyLCBhbmQgc2VlaW5nIHRoZSB3b3JsZCB0aHJvdWdoIHRoZSAnZXllJyBvZiBhIGNoaWxkLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj4KICAgIGYuIEhvdyBkb2VzIEN1bW1pbmdzJnJzcXVvO3MgdXNlIG9mIGxvd2VyY2FzZSBsZXR0ZXJzIGFmZmVjdCB5b3VyIHVuZGVyc3RhbmRpbmcgb2YgdGhlIHBvZW0/CiAgICBFeHBsYWluLgo8L3NwYW4+Cjxicj4KJiMxMDE0MDsgQ3VtbWluZ3MncyB1c2Ugb2YgbG93ZXJjYXNlIGxldHRlcnMgYWZmZWN0IG15IHVuZGVyc3RhbmRpbmcgb2YgdGhlIHBvZW0uIEhlIHVzZXMgbG93ZXJjYXNlIGxldHRlcnMgdG8gZW1waGFzaXplIGhpcyBpbmZlcmlvciBmZWVsaW5ncyBpbiByZWdhcmQgdG8gaGlzIGV4cGVyaWVuY2UuIEhlIHVzZWQgdG8gZW5qb3kgbmF0dXJlIGluIGhpcyBjaGlsZGhvb2QgZnVsbCBvZiBoYXBwaW5lc3MgYnV0IG5vdyBoaXMgYWR1bHRob29kIHdvcnJpZXMgaGF2ZSBzdXBwcmVzc2VkIGhpcyBqb3lzIGFuZCBwbGVhc3VyZXMuCjxicj4KPGJyPgo8YnI+Cjxicj4KPGJyPgo8aDM+UmVmZXJlbmNlIGJleW9uZCB0aGUgdGV4dDwvaDM+IAo8YnI+CjxzcGFuPmEuIEhvdyBkb2VzIG5hdHVyZSBpbnNwaXJlIHRoZSBzcGVha2VyIGluICZsZHF1bzt3aG8gYXJlIHlvdSwgbGl0dGxlIGkmcmRxdW87PyBFeHBsYWluLjwvc3Bhbj4KPGJyPgomIzEwMTQwOyBOYXR1cmUgaW5zcGlyZXMgdGhlIHNwZWFrZXIgYSBsb3QgaW4gIndobyBhcmUgeW91LCBsaXR0bGUgaSIuIFRoZSBiZWF1dHkgb2YgbmF0dXJlIGhhcyBtYWRlIGhpbSB0byBnbyBiYWNrIGludG8gaGlzIGJlYXV0aWZ1bCBjaGlsZGhvb2QgZXhwZXJpZW5jZS4gSGUgZmluZHMgaGltc2VsZiBhcyBhIGxpdHRsZSBib3kgb2YgZml2ZSBvciBzaXggeWVhcnMgb2xkIGluIGhpcyBjaGlsZGhvb2QuIEhlIHVzZWQgdG8gbG9vayBhdCB0aGUgYmVhdXRpZnVsIGdvbGRlbiBzdW5zZXQgYW5kIGZlZWxzIGZvciB0aGUgYmVhdXRpZnVsIHdheSBvZiB0aGUgdHJhbnNpdGlvbiBvZiB0aGUgZGF5IGludG8gdGhlIG5pZ2h0Lgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj4KICAgIGIuIFJlY2FsbCBhIGNoaWxkaG9vZCBtb21lbnQgd2hlbiB5b3UgZmVsdCBjbG9zZWx5IGNvbm5lY3RlZCB3aXRoIG5hdHVyZS4gRGVzY3JpYmUgdGhlIHRpbWUgYW5kIHBsYWNlIGFzCiAgICB3ZWxsIGFzIHlvdXIgZmVlbGluZ3MgYW5kIHRob3VnaHRzIGFib3V0IGl0Lgo8L3NwYW4+Cjxicj4KJiMxMDE0MDsgSSB3YXMgYm9ybiBhbmQgcmFpc2VkIGluIHRoZSBidXN5IGNpdHkgb2YgS2F0aG1hbmR1LiBNeSBmYXRoZXIgd29ya3MgdGhlcmUuIEkgZ3JldyB1cCBpbiB0aGUgbWlkc3Qgb2YgdGhlIGNpdHksIHdpdGggbGl0dGxlIGNvbm5lY3Rpb24gdG8gbmF0dXJlLiBBcyBJIHdhcyBhYm91dCB0byB0YWtlIG15IHNjaG9vbCBncmFkdWF0aW9uIGV4YW1zIG15IGZhdGhlciBhbm5vdW5jZWQgdGhhdCB3ZSB3b3VsZCBnbyB0byBvdXIgbmF0aXZlIHZpbGxhZ2UgaW4gdGhlIGxvbmcgdmFjYXRpb24uIE15IGhhcHBpbmVzcyBrbmV3IG5vIGJvdW5kLiBJdCB3YXMgbGlrZSBhIGRyZWFtIGNvbWluZyB0cnVlLiBGaW5hbGx5IEkgd2FzIGluIG15IG5hdGl2ZSB2aWxsYWdlLiBJdCB3YXMgc28gZGlmZmVyZW50LiBPcHBvc2l0ZSB0byB0aGUgaHVzdGxlIGFuZCBidXN0bGUgb2YgdGhlIGJ1c3kgY2l0eSwgaXQgd2FzIHNvIGNhbG0gYW5kIHRyYW5xdWlsLiBJdCB3YXMgZmlyc3QgdGltZSBJIHNhdyBhIG1pbGtpbmcgY293LiBPdGhlcndpc2UgSSB1c2VkIHRvIHRoaW5rIHRoYXQgYWxsIHByb2R1Y2UgY29tZSBmcm9tIHN1cGVyIG1hcmtldHMgb3IgZGFpcmllcy4gVGhlIG5leHQgbW9ybmluZyBteSBncmFuZCBwYSB0b29rIG1lIHRvIG91ciBwYWRkeSBmaWVsZC4gSSB3YXMgc3VycHJpc2VkIHRvIHNlZSB0aGUgdmFzdCBzdHJldGNoIG9mIGdyZWVuZXJ5LiBJdCB3YXMgc28gZGlmZmVyZW50IGZyb20gdGhlIGNvbmNyZXRlIGp1bmdsZSBvZiB0aGUgcGxhY2Ugd2hlcmUgSSBsaXZlLiBUaGUgY2hpcnBpbmcgb2YgYmlyZHMgaW4gbWFuZ28gZ3JvdmVzIHdhcyBzbyBzd2VldC4gSXQgd2FzIG5vdCBsaWtlIGEgY2FnZWQgYmlyZC4gSSBuZXZlciBrbmV3IGJlZm9yZSB0aGF0IHdpbmRzIGNhbiBwbGF5IHNvIGRlbGlnaHRmdWxseS4gVGhlcmUgSSBsZWFybnQgaG93IHRvIGNvbm5lY3Qgd2l0aCBuYXR1cmUuIEkgZW5qb3llZCBzdW4gcmlzZXMgYW5kIHN1bnNldHMsIHdoaWNoIHdlcmUgYWx3YXlzIGNvdmVyZWQgYnkgdGhlIGJpZyBidWlsZGluZ3Mgb2YgbXkgY2l0eS4gV2Ugc3RheWVkIHRoZXJlIGZvciBhYm91dCBhIG1vbnRoLiBCdXQgSSBzaGFsbCBuZXZlciBmb3JnZXQgbXkgZmlyc3QgaW50cm9kdWN0aW9uIHdpdGggbmF0dXJlLgo8YnI+Cjxicj4KPGJyPgo8c3Bhbj4KICAgIGMuIEludGVycHJldCB0aGUgcG9lbSBpbiBhbnkgd2F5IHlvdSBsaWtlLgo8L3NwYW4+Cjxicj4KJiMxMDE0MDsgVGhpcyBsaXR0bGUgcG9lbSBpcyBpbiB0aGUgZm9ybSBvZiBhIGRyYW1hdGljIG1vbm9sb2d1ZSB3aGVyZSBoZSBhZGRyZXNzZXMgaGlzIG93biBjaGlsZGhvb2QuIEl0IG9wZW5zIHdpdGggaW4gYSBub3N0YWxnaWMgbW9vZC4gV2F0Y2hpbmcgc3Vuc2V0IHRocm91Z2ggaGlzIHdpbmRvdyBvbmUgZXZlbmluZywgdGhlIHNwZWFrZXIgc3VkZGVubHkgZ29lcyBpbiBmbGFzaGJhY2sgd2hlbiBpbiBoaXMgY2hpbGRob29kIGhlIHVzZWQgdG8gZW5qb3kgc3VjaCBuYXR1cmFsIHNjZW5lcy4gCjxicj48YnI+CkhlIGFza3MgaGlzICJsaXR0bGUgaSIgd2hvIGhlIGlzLiBObyBkb3VidCwgdGhlICdsaXR0bGUgaScgaXMgaGlzIGNoaWxkaG9vZCB2ZXJzaW9uIChoaXMgY2hpbGRob29kKS4gSXQgc2hvd3MgdGhhdCBhbHRob3VnaCB0aGUgd29ycmllcyBvZiBoaXMgY2hpbGRob29kIGhhdmUga2VwdCBzdXBwcmVzc2VkIGhpcyBjaGlsZGhvb2QgcGxlYXN1cmVzLCBpdCBpcyBzdGlsbCB0aGVyZSBpbiBzb21lIGNvcm5lciBvZiBoaXMgaGVhcnQuIFRoYXQgaXMgdGhlIGhhcHBpZXN0IHRoaW5nLgo8YnI+PGJyPgpBcyB0aGUgcG9lbSBwcm9jZWVkcywgdGhlIG1vb2QgY2hhbmdlcyBmcm9tIG5vc3RhbGdpYyB0byBzYWQgcGVuc2l2ZSBvbmUsIHdoZW4gaGUgdGFsa3MgYWJvdXQgdGhlIHRoZSBwYXNzaW5nIGRheXMsIGluZGljYXRpbmcgJ2RlYXRoJy4gSGVyZSB3ZSBmaW5kIGFuIHVud2VsY29tZSB0cmFuc2l0aW9uIChjaGFuZ2UpIGZyb20gcGxlYXNpbmcgY2hpbGRob29kIHRvIGFwcHJvYWNoaW5nIGRlYXRoLiBCdXQgaGVyZSBhZ2FpbiwgaGUgZmluZHMgYSBiZWF1dGlmdWwgd2F5IG9mIGFwcHJvYWNoaW5nIGEgZHJlYWRlZCBmaW5hbGUgKHRoYXQgaXMsIGZlYXIgb2YgZGVhdGgpLgo8YnI+PGJyPgpCeSBwdXR0aW5nICJpIiB3aXRoICJsaXR0bGUiIGhlIGRlZW1waGFzaXplcyAobWluaW1pemVzIHRoZSBpbXBvcnRhbmNlIG9mKSB0aGUgc2VsZiBhbmQgcHJvbW90ZXMgdGltZS4KCjxicj4KPGJyPjxicj48YnI+PGJyPgo8c3Bhbj5JZiB5b3UgaGF2ZSBhbnkgc3VnZ2VzdGlvbnMgb3IgZmVlZGJhY2tzLCBwbGVhc2Ugd3JpdGUgdG8gdXMgYXQgcGx1czJoZWxwQGdtYWlsLmNvbTwvc3Bhbj4KPGJyPjxicj4KPC9ib2R5Pgo8L2h0bWw+", "5": ""}, "essays": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}, "oap": {"1": "", "2": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsCiAgICAgICAgICAgICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOyAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+UmVmdW5kPC9jZW50ZXI+CgogICAgPGJyPgoKICAgIDxoMz5VbmRlcnN0YW5kaW5nIHRoZSB0ZXh0PC9oMz4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5BbnN3ZXIgdGhlIGZvbGxvd2luZyBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2h5IGRvZXMgV2Fzc2Vya29wZiBkZW1hbmQgYSByZWZ1bmQgb2YgaGlzIHR1aXRpb24gZmVlcyBmcm9tIHRoZSBzY2hvb2w/PC9zcGFuPgogICAgPGJyPgogICAgJiMxMDE0MDsgV2Fzc2Vya29wZiBkZW1hbmRzIGEgcmVmdW5kIG9mIGhpcyB0dWl0aW9uIGZlZXMgZnJvbSB0aGUgc2Nob29sIGJlY2F1c2UgaGUgY2xhaW1zIHRoYXQgaGUgZGlkbuKAmXQgbGVhcm4gYW55dGhpbmcgZnJvbSB0aGUgc2Nob29sIGFuZCBoaXMgMTggeWVhcnMgZWR1Y2F0aW9uIG1hZGUgaGltIG5vdGhpbmcgYnV0IGFuIGluY29tcGV0ZW50IGFzcy4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+Yi4gV2h5IGRvZXMgV2Fzc2Vya29wZiBjb25zaWRlciBoaW1zZWxmIGdvb2QgZm9yIG5vdGhpbmc/PC9zcGFuPgogICAgPGJyPgogICAgJiMxMDE0MDsgV2Fzc2Vya29wZiBjb25zaWRlcnMgaGltc2VsZiBnb29kIGZvciBub3RoaW5nIGJlY2F1c2UgaGlzIHNjaG9vbCB0YXVnaHQgaGltIG5vdGhpbmcgYW5kIGhlIGJlY29tZXMgZmFpbHVyZSBtYW55IHRpbWVzIGluIGhpcyBsaWZlIGluIHRoZSBtYXR0ZXIgb2YgZ2V0dGluZyBhIGpvYiB0b28uCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmMuIFdoYXQgZGlkIHRoZSB0ZWFjaGVycyBkZWNpZGUgdG8gZG8gd2hlbiBXYXNzZXJrb3BmIGFza2VkIGZvciBhIHJlZnVuZD88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBUaGUgdGVhY2hlcnMgYXBwcm92ZWQgV2Fzc2Vya29wZidzIHJlcXVlc3QgZm9yIGEgcmUtZXhhbWluYXRpb24gYW5kIHBhc3MgaGltIGluIGFsbCBzdWJqZWN0cywgZXZlbiBpZiBoaXMgYW5zd2VycyB3ZXJlIGluY29ycmVjdC4gVGhleSBhZ3JlZWQgdG8gcHJvdmUgV2Fzc2Vya29wZidzIGFuc3dlcnMgdG8gdGhlaXIgcXVlc3Rpb25zIGNvcnJlY3QuCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmQuIFdoeSBkaWQgV2Fzc2Vya29wZiBnaXZlIHJpZGljdWxvdXMgYW5zd2Vycz8gV2h5IGRpZCB0aGUgdGVhY2hlcnMgYWNjZXB0IHRoZXNlIGFuc3dlcnM/PC9zcGFuPgogICAgPGJyPgogICAgJiMxMDE0MDsgV2Fzc2Vya29wZiBnYXZlIHJpZGljdWxvdXMgYW5zd2VycyBzbyB0aGF0IGhlIGNvdWxkIGZhaWwgdGhlIGV4YW0gYnkgYW55IG1lYW5zIG5lY2Vzc2FyeSBhbmQgcmVjZWl2ZSBhIHJlZnVuZC4gVGVhY2hlcnMgYWNjZXB0ZWQgaGlzIGFuc3dlcnMgYmVjYXVzZSB0aGV5IHdhbnRlZCBoaW0gdG8gcGFzcyB0aGUgZXhhbSB0byBwcmVzZXJ2ZSB0aGUgc2Nob29sJ3MgcmVwdXRhdGlvbi4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+ZS4gSG93IGRvZXMgdGhlIE1hdGhlbWF0aWNzIE1hc3RlciBkZXNjcmliZSBXYXNzZXJrb3BmJnJzcXVvO3MgY2hhcmFjdGVyPzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBNYXRoZW1hdGljcyBNYXN0ZXIgZGVzY3JpYmUgV2Fzc2Vya29wZuKAmXMgY2hhcmFjdGVyIGFzIGEgc2x5IGFuZCBjcmFmdHkgaW5kaXZpZHVhbCB3aG8gaW50ZW5kcyB0byBkZWxpYmVyYXRlbHkgZmFpbCBoaXMgZXhhbSBpbiBvcmRlciB0byByZWNvdXAgaGlzIHR1aXRpb24gZmVlLiBIZSBpcyBhIHVuaXF1ZSBpbmRpdmlkdWFsIHdobyBpcnJpdGF0ZXMgYWxsIG9mIHRoZSB0ZWFjaGVycyB3aXRoIGhpcyBhYnVzaXZlIGxhbmd1YWdlLgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5mLiBIb3cgZGlkIHRoZSB0ZWFjaGVycyBvdXR3aXQgV2Fzc2Vya29wZj88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyAgSGUgZ2F2ZSB3cm9uZyBhbmQgcmlkaWN1bG91cyBhbnN3ZXJzIHRvIGZhaWwgdGhlIHRlc3QuIEJ1dCB0aGUgdGVhY2hlcnMgd2VyZSBjbGV2ZXJlciB0aGFuIGhpbS4gQWZ0ZXIgYXNraW5nIFdhc3NlcmtvcGYgdGhlIGVhc3kgcXVlc3Rpb24sIHRoZSBtYXRoZW1hdGljcyB0ZWFjaGVyIHNhaWQgdGhhdCBoZSBmYWlsZWQgdGhlIGV4YW0gYW5kIGFza2VkIGhpbSB0byBjYWxjdWxhdGUgdGhlIGFtb3VudCB0aGUgc2Nob29sIGhhZCB0byByZWZ1bmQuIEhlIGRpZCBpdCB2ZXJ5IHdlbGwuIFRoZSBtYXRoZW1hdGljcyB0ZWFjaGVycyBzYWlkIHRoYXQgaGUgc29sdmVkIHRoZSBkaWZmaWN1bHQgcXVlc3Rpb24gYXMgaGUgd2FzIGEgbWF0aGVtYXRpY2FsIGdlbml1cy4gVGhlIHRlYWNoZXJzIGRlY2xhcmVkIHRoYXQgaGUgcGFzc2VkIHRoZSBleGFtLiBJbiB0aGlzIHdheSwgdGhleSBvdXR3aXR0ZWQgV2Fzc2Vya29wZi4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+Zy4gV2hhdCBpcyB0aGUgZmluYWwganVkZ21lbnQgb24gV2FzZXJrb3BmJnJzcXVvO3MgZGVtYW5kIG9mIHJlZnVuZD88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBBdCBsYXN0LCBoZSBnZXRzIG5vdGhpbmcgb24gaGlzIGRlbWFuZCBvZiByZWZ1bmQuIFRoZSBwcmluY2lwYWwgZGVjbGFyZXMgdGhhdCBXYXNzZXJrb3BmIGhhcyBwYXNzZWQgdGhlIHJlLWV4YW1pbmF0aW9uIHdpdGggZGlzdGluY3Rpb24gaW4gZXZlcnkgc3ViamVjdCwgYW5kIGhhcyBhZ2FpbiBzaG93biB0aGF0IGhlIGlzIGVudGl0bGVkIHRvIHRoZSBjZXJ0aWZpY2F0ZSB0aGV5IGF3YXJkZWQgaGltIG9uIGhpcyBncmFkdWF0aW9uLgogICAgPGJyPjxicj48YnI+PGJyPjxicj4KICAgIDxoMz5SZWZlcmVuY2UgdG8gdGhlIGNvbnRleHQ8L2gzPgogICAgPGJyPjxicj4KICAgIDxzcGFuPmEuIFJlYWQgdGhlIGV4dHJhY3QgZnJvbSB0aGUgcGxheSBnaXZlbiBiZWxvdyBhbmQgYW5zd2VyIHRoZSBxdWVzdGlvbnMgdGhhdCBmb2xsb3c6PC9zcGFuPgogICAgPGJyPgogICAgPGk+CiAgICAgICAgJmxkcXVvO0l0JnJzcXVvO3MgcG9zc2libGUgSSZyc3F1bzt2ZSBjaGFuZ2VkLiBXaGF0IHRoZSBoZWxsJiM4MjMwOyEgWW91ciBjbGFzcyByZWNvcmRzIHdpbGwgc2hvdwogICAgICAgIEkmcnNxdW87dmUgZ290IGEgcmlnaHQgdG8gY29tZSBoZXJlLiZyZHF1bzsKICAgIDwvaT4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5pLiBXaG8gaXMgdGhlIHNwZWFrZXI/IFdobyBpcyBoZSBzcGVha2luZyB0bz88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBXYXNzZXJrb3BmIGlzIHRoZSBzcGVha2VyLiBIZSdzIHNwZWFraW5nIHRvIHRoZSBwcmluY2lwYWwgb2YgaGlzIGZvcm1lciBzY2hvb2wuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+aWkuIFdoeSBpcyB0aGUgc3BlYWtlciBzYXkgdGhlc2Ugd29yZHM/PC9zcGFuPgogICAgPGJyPgogICAgJiMxMDE0MDsgVGhlIHNwZWFrZXIgc2F5cyB0aGVzZSB3b3JkcyBiZWNhdXNlIGhlIGlzIGRpc3NhdGlzZmllZCB3aXRoIGhpcyBlZHVjYXRpb25hbCByZWNvcmRzIGZyb20gaGlzCiAgICBwcmV2aW91cyBzY2hvb2wsIHdoaWNoIGhlIG9idGFpbmVkIGVpZ2h0ZWVuIHllYXJzIGFnby4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5paWkuIFdoZXJlIGlzIHRoZSBzcGVha2VyIGF0IHRoaXMgbW9tZW50Pzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoZSBzcGVha2VyIGlzIGluIHRoZSBQcmluY2lwYWwncyBvZmZpY2UgYXQgdGhpcyBtb21lbnQuCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmIuIFJlYWQgdGhlIGV4dHJhY3QgZGlhbG9ndWUgZ2l2ZW4gYmVsb3cgYW5kIGFuc3dlciB0aGUgcXVlc3Rpb25zIHRoYXQgZm9sbG93Ojwvc3Bhbj4KICAgIDxicj4KICAgIDxpPgogICAgICAgICZsZHF1bztUSEUgU1RBRkY6IChib3dpbmcsIGhlYXJ0aWx5KSBIb3cgZG8geW91IGRvPwogICAgICAgIDxicj4KICAgICAgICBXQVNTRVJLT1BGOiBXaG8gdGhlIGhlbGwgYXJlIHlvdT8gU2l0IGRvd24sIHlvdSBsb2FmZXJzISAoSGUgZ3JpbnMsIHdhaXRpbmcgdG8gYmUgdGhyb3duIG91dCkKICAgICAgICA8YnI+CiAgICAgICAgVEhFIFBSSU5DSVBBTDogSG93IGRhcmUgeW91ICZuZGFzaDsmcmRxdW87CiAgICA8L2k+CiAgICA8YnI+PGJyPgogICAgPHNwYW4+aS4gV2hhdCBpcyB0byBiZSB0aGUgcmVzcG9uc2UgdG8gJmxzcXVvO0hvdyBkbyB5b3UgZG8/JnJzcXVvOzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7ICdJIGFtIGZpbmUnIGlzIHRvIGJlIHRoZSByZXNwb25zZSB0byAnSG93IGRvIHlvdSBkbycuCiAgICA8YnI+PGJyPgogICAgPHNwYW4+aWkuIElzIFdhc3NlcmtvcGYmcnNxdW87cyByZXNwb25zZSBwb2xpdGUgZW5vdWdoIHRvIHRoZSBzdGFmZj88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBObywgV2Fzc2Vya29wZidzIHJlc3BvbnNlIHRvIHRoZSBzdGFmZiBpc24ndCBwb2xpdGUgZW5vdWdoLiBIZSB1c2VzIGRlcm9nYXRvcnkgbGFuZ3VhZ2UgYWdhaW5zdAogICAgdGhlbS4KICAgIDxicj48YnI+CiAgICA8c3Bhbj5paWkuIEhvdyBkb2VzIFdhc3NlcmtvcGYgcmVidWtlIHRoZSBzdGFmZj88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBXYXNzZXJrb3BmIHJlYnVrZXMgdGhlIHN0YWZmLCBjYWxsaW5nIHRoZW0gJnF1b3Q7bG9hZmVycyZxdW90OyBhbmQgYXNraW5nLCAmcXVvdDtXaG8gdGhlIGhlbGwKICAgIGFyZSB5b3U/JnF1b3Q7CiAgICA8YnI+PGJyPgogICAgPHNwYW4+aXYuIFdoYXQgZG9lcyB0aGUgcHJpbmNpcGFsIG1lYW4gYnkgJmxzcXVvO0hvdyBkYXJlIHlvdSAtJnJzcXVvOz88L3NwYW4+CiAgICA8YnI+CiAgICAmIzEwMTQwOyBUaGUgUHJpbmNpcGFsIGlzIHJlZmVycmluZyB0byBXYXNzZXJrb3BmJ3MgZGFyZSB0byBtYWtlIGFidXNpdmUgcmVtYXJrcyBhYm91dCBtYXN0ZXJzIHdoZW4gaGUKICAgIHNheXMsICdIb3cgZGFyZSB5b3U/JwogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5jLiBFeHBsYWluIHRoZSBmb2xsb3dpbmcgbGluZSBvZiB0aGUgcGxheTo8L3NwYW4+CiAgICA8YnI+CiAgICA8aT4mbGRxdW87QmVjYXVzZSBJIGRpZG4mcnNxdW87dCBnZXQgbXkgbW9uZXkmcnNxdW87cyB3b3J0aCwgdGhhdCZyc3F1bztzIHdoeSEmcmRxdW87PC9pPgogICAgPGJyPgogICAgJiMxMDE0MDsgVGhpcyBsaW5lIHdhcyBzcG9rZW4gYnkgdGhlIG1haW4gY2hhcmFjdGVyIG9mIHRoZSBwbGF5LCBXYXNzZXJrb3BmLiBJbiB0aGlzIGxpbmUsIFdhc3NlcmtvcGYgZXhwbGFpbnMgaGlzIHJlYXNvbiBmb3IgaGlzIGFycml2YWwgYW5kIGRlbWFuZCBhIHJlZnVuZCB0byB0aGUgc2Nob29sJ3MgcHJpbmNpcGFsLiBBY2NvcmRpbmcgdG8gaGltLCBoaXMgZWR1Y2F0aW9uIGZyb20gc2Nob29sIGRpZCBwcm92aWRlIGhpbSBub3RoaW5nLiBIZSBpcyBmaXJlZCBmcm9tIHRoZSBqb2IgYW5kIGlzIGluIGZpbmFuY2lhbCBjcmlzaXMuIFdhc3NlcmtvcGYgaXMsIHRoZXJlZm9yZSwganVzdGlmaWVkIGluIGNsYWltaW5nIGZvciBhIHJlZnVuZC4gSGUgYWRkcyB0aGF0IGEgcmUtZXhhbWluYXRpb24gd2lsbCBwcm92ZSB0aGF0IGhpcyBkZW1hbmQgaXMgdmFsaWQuCiAgICA8YnI+PGJyPjxicj4KICAgIDxzcGFuPmQuIFdoYXQgaXMgdGhlIHRoZW1lIG9mIHRoZSBwbGF5Pzwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFRoaXMgcGxheSBpcyBhIHNhdGlyZSBvbiB0b2RheSdzIGVkdWNhdGlvbmFsIHN5c3RlbSwgd2hpY2ggaGFzIGZhaWxlZCB0byBwcmVwYXJlIHN0dWRlbnRzIGZvciBsaWZlLiBUaGlzIHBsYXkgc2hvd2Nhc2VzIHRlYWNoZXJzJyB3aXQgaW4gdGhlIGZhY2Ugb2YgYW4gaWxsLW5hdHVyZWQgb2xkIHB1cGlsIFdhc3NlcmtvcGYgd2hvIHJldHVybnMgdG8gaGlzIG9sZCBzY2hvb2wgd2l0aCBhbiBhYnN1cmQgZGVtYW5kIG9mIGEgcmVmdW5kIGFzIGhlIGhhcyBnb3Qgbm90aGluZyByZWFkaW5nIHRoZXJlLgogICAgPGJyPjxicj48YnI+CiAgICA8c3Bhbj5lLiBTa2V0Y2ggdGhlIGNoYXJhY3RlciBvZiBXYXNzZXJrb3BmLjwvc3Bhbj4KICAgIDxicj4KICAgICYjMTAxNDA7IFdhc3NlcmtvcGYgaXMgYSBmb3J0eS15ZWFyLW9sZCBwb29yIGFuZCBncmVlZHkgbWFuIHdobyB3YXMgYm9ybiBpbiBIdW5nYXJ5LiBIZSBpcyBhIHNob3J0LXRlbXBlcmVkIG1hbiB3aG8gaGFzIGJlZW4gZmlyZWQgc2V2ZXJhbCB0aW1lcyBmb3IgaGlzIGJhZCBtYW5uZXJzIGFuZCBydWRlIGJlaGF2aW91ci4gV2Fzc2Vya29wZiBzZWVtcyB0byBiZSB0aGUgdHlwZSBvZiBwZXJzb24gd2hvIGRvZXMgbm90IGRvIGhpcyBkdXR5IGFuZCBibGFtZXMgb3RoZXJzLiBXaGlsZSBhdCBzY2hvb2wsIGhlIGp1c3Qgd2FudGVkIHRvIHBhc3MgYW5kIGRpZCBub3Qgc3R1ZHkgd2VsbC4gSGUgZG9lcyBub3QgZXZlbiBrbm93IGFib3V0IGZvcmVpZ24gZXhjaGFuZ2UuIFRoYXQgaXMgd2h5IGhlIGRpZCBub3QgZ2V0IGEgZ29vZCBqb2IuIEhlIGhpbXNlbGYgc2F5cyBoZSBpcyBnb29kIGZvciBub3RoaW5nLiBXYXNzZXJrb3BmIGFsc28gc291bmRzIGxpa2UgYW4gdW5kaXNjaXBsaW5lZCBtYW4gd2l0aCBubyBnb29kIG1hbm5lcnMuIEhlIGRvZXMgbm90IHJlc3BlY3QgaGlzIHRlYWNoZXJzIGFuZCB1c2VzIGJhZCB3b3JkcyBhbmQgZGVyb2dhdG9yeSBsYW5ndWFnZSB3aXRoIHRoZW0uIEhlIHRoaW5rcyB0aGF0IGhlIGlzIGNsZXZlciBlbm91Z2ggdG8gZ2V0IHRoZSByZWZ1bmQgYnV0IGJlY2F1c2Ugb2YgaGlzIGZvb2xpc2huZXNzIGFuZCBzdHVwaWRpdHksIGhlIGZhbGxzIGluIGhpcyBNYXRoZW1hdGljcyB0ZWFjaGVyc+KAmSB0cmFwLgogICAgPGJyPjxicj48YnI+PGJyPgogICAgPGgzPlJlZmVyZW5jZSBiZXlvbmQgdGhlIHRleHQ8L2gzPgogICAgPGJyPgogICAgPHNwYW4+CiAgICAgICAgYS4gVGhlIHBsYXkgaXMgYSBzYXRpcmUgb24gdGhlIHByZXNlbnQgZGF5IGVkdWNhdGlvbiBzeXN0ZW0uIERvIHlvdSB0aGluayB0aGF0IG91ciBlZHVjYXRpb24gc3lzdGVtIGRvZXMKICAgICAgICBub3QgcHJlcGFyZSBzdHVkZW50cyBmb3IgbGlmZT8gRGlzY3Vzcy4KICAgIDwvc3Bhbj4KICAgIDxicj48YnI+CiAgICAmIzEwMTQwOyBZZXMsIEkgYmVsaWV2ZSB0aGF0IG91ciBlZHVjYXRpb25hbCBzeXN0ZW0gZG9lcyBub3QgYWRlcXVhdGVseSBwcmVwYXJlIHN0dWRlbnRzIGZvciBsaWZlLiBJIHRoaW5rIHRoYXQgb3VyIGVkdWNhdGlvbiBzeXN0ZW0gZG9lcyBub3QgcHJlcGFyZSBzdHVkZW50cyBmb3IgbGlmZS4gT3VyIGVkdWNhdGlvbiBzeXN0ZW0gaXMgYmFzZWQgb24gbWVtb3JpemF0aW9uLiBTdHVkZW50cyBoYXJkbHkgbGVhcm4gc2tpbGxzIHVzZWZ1bCBmb3IgcmVhbCBsaWZlLiBCdXQgdG9kYXnigJlzIHN0dWRlbnRzIGFsc28gZG8gbm90IGNhcmUgYWJvdXQgcmVhbCBrbm93bGVkZ2UuIFRoZXkganVzdCB3YW50IHRvIHBhc3MgdGhlIGV4YW1zIHdpdGggZ29vZCBtYXJrcyByYXRoZXIgdGhhbiBsZWFybmluZy4gQ291cnNlcyBhcmUgbW9yZSB0aGVvcmV0aWNhbCB0aGFuIHByYWN0aWNhbC4gT3VyIGN1cnJpY3VsdW0gZG9lc27igJl0IHByZXBhcmUgdXMgZm9yIG91ciBmdXR1cmUgc3RydWdnbGUgYW5kIHN1cnZpdmFsLiBGb3IgZXhhbXBsZSwgd2UgYXJlIHRhdWdodCB0aGUgdGhpbmdzIHdoaWNoIGFyZSB1c2VsZXNzIGluIG91ciByZWFsIGxpZmUuIEl0IG1ha2VzIHN0dWRlbnRzIGR1bGwgYW5kIGxlc3MgY3JlYXRpdmUgaW4gcHJhY3RpY2FsIGxpZmUuIEhlbmNlLCBzYWRseSBpdCBpcyB0cnVlIHRoYXQgb3VyIGVkdWNhdGlvbiBzeXN0ZW0gZG9lcyBub3QgcHJlcGFyZSB1cyBmb3IgbGlmZS4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+CiAgICAgICAgYi4gT3VyIGVkdWNhdGlvbiBzeXN0ZW0gZm9jdXNlcyBvbiBtZW1vcmlzYXRpb24gcmF0aGVyIHRoYW4gY3JlYXRpdmUgdGhpbmtpbmcuIERvIHlvdSB0aGluayB0aGUKICAgICAgICBrbm93bGVkZ2UgaW1wYXJ0ZWQgYnkgZWR1Y2F0aW9uIG1heSBub3QgaGF2ZSBwcmFjdGljYWwgcmVsZXZhbmNlIGluIG9uZSZyc3F1bztzIGRheS10by1kYXkgbGlmZT8gV2hvIGRvCiAgICAgICAgeW91IGJsYW1lIGZvciB0aGlzPwogICAgPC9zcGFuPgogICAgPGJyPjxicj4KICAgICYjMTAxNDA7IFllcywgSSBiZWxpZXZlIHRoYXQgdGhlIGtub3dsZWRnZSBpbXBhcnRlZCBieSBlZHVjYXRpb24gbWF5IG5vdCBiZSBwcmFjdGljYWwgaW4gZGFpbHkgbGlmZS4gT3VyIGVkdWNhdGlvbiBzeXN0ZW0gaXMgbW9yZSBiYXNlZCBvbiBtZW1vcml6YXRpb24gdGhlbiBvbiBsZWFybmluZyB0aGUgc2tpbGxzIHVzZWZ1bCBmb3IgcmVhbCBsaWZlLiBJIHRoaW5rIHRoYXQgb3VyIGdvdmVybm1lbnQgaXMgbWFpbmx5IHJlc3BvbnNpYmxlIGZvciB0aGUgY2F1c2UuIFRoZSBnb3Zlcm5tZW50IHNob3VsZCBtYWtlIGN1cnJpY3VsdW0gbW9yZSBwcmFjdGljYWwgdGhhbiB0aGVvcmV0aWNhbCBzbyB0aGF0IHRoZSBzdHVkZW50cyBjYW4gbGVhcm4gdGhlIHRoaW5nIHByYWN0aWNhbGx5IHJhdGhlciB0aGFuIGZyb20gd3JpdGluZyBpbnRvIHRoZSBwYXBlcnMuIFN0dWRlbnRzIGFyZSBmb2N1c2VkIG9uIHJlbWVtYmVyaW5nIHRoYW4gaW4gZG9pbmcgdGhlIHRoaW5ncyBjcmVhdGl2ZWx5LiBDcmVhdGl2aXR5IGhhcyBubyBwbGFjZSBpbiB0aGVpciBsaXZlcy4gVGhleSBqdXN0IHdhbnQgdG8gcGFzcyB0aGUgZXhhbXMgd2l0aCBnb29kIG1hcmtzIHJhdGhlciB0aGFuIGxlYXJuaW5nLiBTdHVkZW50cyB0b28gYXJlIHJlc3BvbnNpYmxlIGZvciB0aGlzIGJlY2F1c2UgdGhleSBhcmUgZG9pbmcgdGhlIHRoaW5ncyBibGluZGx5IHdoYXRldmVyIHRoZXkgYXJlIHNhaWQgYW5kIHRhdWdodCB3aXRob3V0IGZvY3VzaW5nIG9uIGxlYXJuaW5nIHRoaW5ncyBwcmFjdGljYWxseS4gVGhleSBhcmUgZG9pbmcgdGhlaXIgam9iIGFzIGFuIGVsZXBoYW50IGluIGEgY2lyY3VzLiBUaHVzIEkgYmxhbWUgdGhlIGdvdmVybm1lbnQgYW5kIHRoZSBzdHVkZW50cyBmb3IgdGhpcy4KICAgIDxicj48YnI+PGJyPgogICAgPHNwYW4+CiAgICAgICAgYy4gTW9zdCBvZiB0aGUgc3R1ZGVudHMgd2FudCB0byBsZWFybiBqdXN0IGZvciBleGFtaW5hdGlvbiByYXRoZXIgdGhhbiBrbm93bGVkZ2UuIERvIHlvdSB0aGluayB0aGF0CiAgICAgICAgY2VydGlmaWNhdGUgd2lsbCBoZWxwIHRoZW0gaW4gdGhlaXIgZnV0dXJlIGNhcmVlcj8KICAgIDwvc3Bhbj4KICAgIDxicj48YnI+CiAgICAmIzEwMTQwOyAgSXTigJlzIHRydWUgdGhhdCBtb3N0IG9mIHRoZSBzdHVkZW50cyB3YW50IHRvIGxlYXJuIGp1c3QgZm9yIGV4YW1pbmF0aW9uIHJhdGhlciB0aGFuIGtub3dsZWRnZS4gVGhleSB3YW50IHRvIGdldCBoaWdoZXIgbWFya3Mgb25seSBieSBob29rIG9yIGNyb29rLiBCdXQgdGhhdCBjZXJ0aWZpY2F0ZSB3b27igJl0IGhlbHAgdGhlbSBpbiB0aGVpciBmdXR1cmUgY2FyZWVyLiBTdHVkZW50cyB3aG8gb25seSBwcmVwYXJlIGZvciBleGFtcyB3b27igJl0IGVuam95IGNyZWRlbnRpYWxzIHRocm91Z2hvdXQgdGhlaXIgZnV0dXJlIGNhcmVlcnMuIFRoZXkncmUgZmFyIGZyb20gdGhlIGNvbmNlcHQgb2Yga25vd2xlZGdlLCBidXQgdGhleSB0cnVzdCBxdWljayBzb2x1dGlvbnMgdG8gcGFzcyB5b3VyIGV4YW1zLiBUaGUgbWV0aG9kIHRoZXkgaGF2ZSBjaG9zZW4gZG9lc24ndCBiZW5lZml0IHRoZWlyIGZ1dHVyZS4gU2luY2UgY2VydGlmaWNhdGVzIG5ldmVyIGRlbW9uc3RyYXRlIGdlbnVpbmUga25vd2xlZGdlIG9yIHNraWxscywgdHJ1ZSBrbm93bGVkZ2Ugd2lsbCBjZXJ0YWlubHkgYmUgbGFja2luZyBpbiB0aGUgZnV0dXJlLiBNYW55IGNlcnRpZmljYXRlIGhvbGRlcnMgZG9u4oCZdCBnZXQgcHJvcGVyIGpvYiBkdWUgdG8gaW5zdWZmaWNpZW50IHNraWxsIGFuZCBoZW5jZSB0aGV5IGFyZSBmb3JjZWQgdG8gZG8gbWFudWFsIGpvYnMgaW4gZm9yZWlnbiBjb3VudHJpZXMgYWx0aG91Z2ggdGhleSBoYXZlIGRlZ3JlZSBpbiBOZXBhbC4gQnkgdGhpcyB3ZSBjYW4gc2F5IHRoYXQgdGhlIGNlcnRpZmljYXRlIGlzIGp1c3QgYSBwaWVjZSBvZiBwYXBlciBhbmQgZ2FpbmluZyBjZXJ0aWZpY2F0ZSBieSBtZW1vcml6aW5nIHJhdGhlciB0aGFuIGxlYXJuaW5nIHdvdWxkIGxlYWQgYSBwZXJzb24gdG8gYSBkZWFkIGVuZC4KCgogICAgPGJyPjxicj4KICAgIDxicj48YnI+PGJyPjxicj4KCiAgICA8c3Bhbj5JZiB5b3UgaGF2ZSBhbnkgc3VnZ2VzdGlvbnMgb3IgZmVlZGJhY2tzLCBwbGVhc2Ugd3JpdGUgdG8gdXMgYXQgcGx1czJoZWxwQGdtYWlsLmNvbTwvc3Bhbj4KCiAgICA8YnI+PGJyPgo8L2JvZHk+Cgo8L2h0bWw+"}}